diff --git a/.classpath b/.classpath
new file mode 100644
index 00000000..ebbaeba8
--- /dev/null
+++ b/.classpath
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
+	<classpathentry kind="src" path="ponysdk/src/main/java"/>
+	<classpathentry kind="src" path="ponysdk/src/test/java"/>
+	<classpathentry kind="src" path="sample/src/main/java"/>
+	<classpathentry kind="lib" path="gradle/wrapper/gradle-wrapper.jar"/>
+	<classpathentry kind="lib" path="ponysdk/build/libs/ponysdk-2.8.15-SNAPSHOT-sources.jar"/>
+	<classpathentry kind="lib" path="ponysdk/build/libs/ponysdk-2.8.15-SNAPSHOT.jar"/>
+	<classpathentry kind="lib" path="ponysdk/build/libs/ponysdk-2.8.20-javadoc.jar"/>
+	<classpathentry kind="lib" path="ponysdk/build/libs/ponysdk-2.8.20-sources.jar"/>
+	<classpathentry kind="lib" path="ponysdk/build/libs/ponysdk-2.8.20.jar"/>
+	<classpathentry kind="lib" path="ponysdk/build/tmp/expandedArchives/org.jacoco.agent-0.8.2.jar_2aca8b620b19ecd063f63feff8caaa38/jacocoagent.jar"/>
+	<classpathentry kind="lib" path="sample/build/libs/sample-2.8.15-SNAPSHOT.jar"/>
+	<classpathentry kind="lib" path="sample/build/libs/sample-2.8.20.jar"/>
+	<classpathentry kind="output" path="ponysdk/bin/main"/>
+</classpath>
diff --git a/.github/ISSUE_TEMPLATE/bug_report.md b/.github/ISSUE_TEMPLATE/bug_report.md
deleted file mode 100644
index dd84ea78..00000000
--- a/.github/ISSUE_TEMPLATE/bug_report.md
+++ /dev/null
@@ -1,38 +0,0 @@
----
-name: Bug report
-about: Create a report to help us improve
-title: ''
-labels: ''
-assignees: ''
-
----
-
-**Describe the bug**
-A clear and concise description of what the bug is.
-
-**To Reproduce**
-Steps to reproduce the behavior:
-1. Go to '...'
-2. Click on '....'
-3. Scroll down to '....'
-4. See error
-
-**Expected behavior**
-A clear and concise description of what you expected to happen.
-
-**Screenshots**
-If applicable, add screenshots to help explain your problem.
-
-**Desktop (please complete the following information):**
- - OS: [e.g. iOS]
- - Browser [e.g. chrome, safari]
- - Version [e.g. 22]
-
-**Smartphone (please complete the following information):**
- - Device: [e.g. iPhone6]
- - OS: [e.g. iOS8.1]
- - Browser [e.g. stock browser, safari]
- - Version [e.g. 22]
-
-**Additional context**
-Add any other context about the problem here.
diff --git a/.github/ISSUE_TEMPLATE/feature_request.md b/.github/ISSUE_TEMPLATE/feature_request.md
deleted file mode 100644
index bbcbbe7d..00000000
--- a/.github/ISSUE_TEMPLATE/feature_request.md
+++ /dev/null
@@ -1,20 +0,0 @@
----
-name: Feature request
-about: Suggest an idea for this project
-title: ''
-labels: ''
-assignees: ''
-
----
-
-**Is your feature request related to a problem? Please describe.**
-A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]
-
-**Describe the solution you'd like**
-A clear and concise description of what you want to happen.
-
-**Describe alternatives you've considered**
-A clear and concise description of any alternative solutions or features you've considered.
-
-**Additional context**
-Add any other context or screenshots about the feature request here.
diff --git a/.github/workflows/gradle.yml b/.github/workflows/gradle.yml
deleted file mode 100644
index 05541363..00000000
--- a/.github/workflows/gradle.yml
+++ /dev/null
@@ -1,20 +0,0 @@
-name: CI
-
-on:
-  push:
-    branches:
-    - master
-
-jobs:
-  build:
-
-    runs-on: ubuntu-latest
-
-    steps:
-    - uses: actions/checkout@v1
-    - name: Set up JDK 1.9
-      uses: actions/setup-java@v1
-      with:
-        java-version: 1.9
-    - name: Build with Gradle
-      run: ./gradlew test
diff --git a/.project b/.project
new file mode 100644
index 00000000..57d29b26
--- /dev/null
+++ b/.project
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>PonySDK</name>
+	<comment></comment>
+	<projects/>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments/>
+		</buildCommand>
+	</buildSpec>
+	<linkedResources/>
+	<filteredResources/>
+</projectDescription>
diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 00000000..95a529cd
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1,13 @@
+language: java
+jdk:
+  - oraclejdk9
+branches:
+  only:
+  - master
+before_script:
+  - chmod +x gradlew
+script:
+  - ./gradlew check
+  - ./gradlew codeCoverageReport 
+after_success:
+  - bash <(curl -s https://codecov.io/bash)
diff --git a/CODE_OF_CONDUCT.md b/CODE_OF_CONDUCT.md
deleted file mode 100644
index ed20837d..00000000
--- a/CODE_OF_CONDUCT.md
+++ /dev/null
@@ -1,76 +0,0 @@
-# Contributor Covenant Code of Conduct
-
-## Our Pledge
-
-In the interest of fostering an open and welcoming environment, we as
-contributors and maintainers pledge to making participation in our project and
-our community a harassment-free experience for everyone, regardless of age, body
-size, disability, ethnicity, sex characteristics, gender identity and expression,
-level of experience, education, socio-economic status, nationality, personal
-appearance, race, religion, or sexual identity and orientation.
-
-## Our Standards
-
-Examples of behavior that contributes to creating a positive environment
-include:
-
-* Using welcoming and inclusive language
-* Being respectful of differing viewpoints and experiences
-* Gracefully accepting constructive criticism
-* Focusing on what is best for the community
-* Showing empathy towards other community members
-
-Examples of unacceptable behavior by participants include:
-
-* The use of sexualized language or imagery and unwelcome sexual attention or
- advances
-* Trolling, insulting/derogatory comments, and personal or political attacks
-* Public or private harassment
-* Publishing others' private information, such as a physical or electronic
- address, without explicit permission
-* Other conduct which could reasonably be considered inappropriate in a
- professional setting
-
-## Our Responsibilities
-
-Project maintainers are responsible for clarifying the standards of acceptable
-behavior and are expected to take appropriate and fair corrective action in
-response to any instances of unacceptable behavior.
-
-Project maintainers have the right and responsibility to remove, edit, or
-reject comments, commits, code, wiki edits, issues, and other contributions
-that are not aligned to this Code of Conduct, or to ban temporarily or
-permanently any contributor for other behaviors that they deem inappropriate,
-threatening, offensive, or harmful.
-
-## Scope
-
-This Code of Conduct applies both within project spaces and in public spaces
-when an individual is representing the project or its community. Examples of
-representing a project or community include using an official project e-mail
-address, posting via an official social media account, or acting as an appointed
-representative at an online or offline event. Representation of a project may be
-further defined and clarified by project maintainers.
-
-## Enforcement
-
-Instances of abusive, harassing, or otherwise unacceptable behavior may be
-reported by contacting the project team at ciaravola.nicolas@gmail.com. All
-complaints will be reviewed and investigated and will result in a response that
-is deemed necessary and appropriate to the circumstances. The project team is
-obligated to maintain confidentiality with regard to the reporter of an incident.
-Further details of specific enforcement policies may be posted separately.
-
-Project maintainers who do not follow or enforce the Code of Conduct in good
-faith may face temporary or permanent repercussions as determined by other
-members of the project's leadership.
-
-## Attribution
-
-This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,
-available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html
-
-[homepage]: https://www.contributor-covenant.org
-
-For answers to common questions about this code of conduct, see
-https://www.contributor-covenant.org/faq
diff --git a/LICENSE b/LICENSE
deleted file mode 100644
index 261eeb9e..00000000
--- a/LICENSE
+++ /dev/null
@@ -1,201 +0,0 @@
-                                 Apache License
-                           Version 2.0, January 2004
-                        http://www.apache.org/licenses/
-
-   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
-
-   1. Definitions.
-
-      "License" shall mean the terms and conditions for use, reproduction,
-      and distribution as defined by Sections 1 through 9 of this document.
-
-      "Licensor" shall mean the copyright owner or entity authorized by
-      the copyright owner that is granting the License.
-
-      "Legal Entity" shall mean the union of the acting entity and all
-      other entities that control, are controlled by, or are under common
-      control with that entity. For the purposes of this definition,
-      "control" means (i) the power, direct or indirect, to cause the
-      direction or management of such entity, whether by contract or
-      otherwise, or (ii) ownership of fifty percent (50%) or more of the
-      outstanding shares, or (iii) beneficial ownership of such entity.
-
-      "You" (or "Your") shall mean an individual or Legal Entity
-      exercising permissions granted by this License.
-
-      "Source" form shall mean the preferred form for making modifications,
-      including but not limited to software source code, documentation
-      source, and configuration files.
-
-      "Object" form shall mean any form resulting from mechanical
-      transformation or translation of a Source form, including but
-      not limited to compiled object code, generated documentation,
-      and conversions to other media types.
-
-      "Work" shall mean the work of authorship, whether in Source or
-      Object form, made available under the License, as indicated by a
-      copyright notice that is included in or attached to the work
-      (an example is provided in the Appendix below).
-
-      "Derivative Works" shall mean any work, whether in Source or Object
-      form, that is based on (or derived from) the Work and for which the
-      editorial revisions, annotations, elaborations, or other modifications
-      represent, as a whole, an original work of authorship. For the purposes
-      of this License, Derivative Works shall not include works that remain
-      separable from, or merely link (or bind by name) to the interfaces of,
-      the Work and Derivative Works thereof.
-
-      "Contribution" shall mean any work of authorship, including
-      the original version of the Work and any modifications or additions
-      to that Work or Derivative Works thereof, that is intentionally
-      submitted to Licensor for inclusion in the Work by the copyright owner
-      or by an individual or Legal Entity authorized to submit on behalf of
-      the copyright owner. For the purposes of this definition, "submitted"
-      means any form of electronic, verbal, or written communication sent
-      to the Licensor or its representatives, including but not limited to
-      communication on electronic mailing lists, source code control systems,
-      and issue tracking systems that are managed by, or on behalf of, the
-      Licensor for the purpose of discussing and improving the Work, but
-      excluding communication that is conspicuously marked or otherwise
-      designated in writing by the copyright owner as "Not a Contribution."
-
-      "Contributor" shall mean Licensor and any individual or Legal Entity
-      on behalf of whom a Contribution has been received by Licensor and
-      subsequently incorporated within the Work.
-
-   2. Grant of Copyright License. Subject to the terms and conditions of
-      this License, each Contributor hereby grants to You a perpetual,
-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
-      copyright license to reproduce, prepare Derivative Works of,
-      publicly display, publicly perform, sublicense, and distribute the
-      Work and such Derivative Works in Source or Object form.
-
-   3. Grant of Patent License. Subject to the terms and conditions of
-      this License, each Contributor hereby grants to You a perpetual,
-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
-      (except as stated in this section) patent license to make, have made,
-      use, offer to sell, sell, import, and otherwise transfer the Work,
-      where such license applies only to those patent claims licensable
-      by such Contributor that are necessarily infringed by their
-      Contribution(s) alone or by combination of their Contribution(s)
-      with the Work to which such Contribution(s) was submitted. If You
-      institute patent litigation against any entity (including a
-      cross-claim or counterclaim in a lawsuit) alleging that the Work
-      or a Contribution incorporated within the Work constitutes direct
-      or contributory patent infringement, then any patent licenses
-      granted to You under this License for that Work shall terminate
-      as of the date such litigation is filed.
-
-   4. Redistribution. You may reproduce and distribute copies of the
-      Work or Derivative Works thereof in any medium, with or without
-      modifications, and in Source or Object form, provided that You
-      meet the following conditions:
-
-      (a) You must give any other recipients of the Work or
-          Derivative Works a copy of this License; and
-
-      (b) You must cause any modified files to carry prominent notices
-          stating that You changed the files; and
-
-      (c) You must retain, in the Source form of any Derivative Works
-          that You distribute, all copyright, patent, trademark, and
-          attribution notices from the Source form of the Work,
-          excluding those notices that do not pertain to any part of
-          the Derivative Works; and
-
-      (d) If the Work includes a "NOTICE" text file as part of its
-          distribution, then any Derivative Works that You distribute must
-          include a readable copy of the attribution notices contained
-          within such NOTICE file, excluding those notices that do not
-          pertain to any part of the Derivative Works, in at least one
-          of the following places: within a NOTICE text file distributed
-          as part of the Derivative Works; within the Source form or
-          documentation, if provided along with the Derivative Works; or,
-          within a display generated by the Derivative Works, if and
-          wherever such third-party notices normally appear. The contents
-          of the NOTICE file are for informational purposes only and
-          do not modify the License. You may add Your own attribution
-          notices within Derivative Works that You distribute, alongside
-          or as an addendum to the NOTICE text from the Work, provided
-          that such additional attribution notices cannot be construed
-          as modifying the License.
-
-      You may add Your own copyright statement to Your modifications and
-      may provide additional or different license terms and conditions
-      for use, reproduction, or distribution of Your modifications, or
-      for any such Derivative Works as a whole, provided Your use,
-      reproduction, and distribution of the Work otherwise complies with
-      the conditions stated in this License.
-
-   5. Submission of Contributions. Unless You explicitly state otherwise,
-      any Contribution intentionally submitted for inclusion in the Work
-      by You to the Licensor shall be under the terms and conditions of
-      this License, without any additional terms or conditions.
-      Notwithstanding the above, nothing herein shall supersede or modify
-      the terms of any separate license agreement you may have executed
-      with Licensor regarding such Contributions.
-
-   6. Trademarks. This License does not grant permission to use the trade
-      names, trademarks, service marks, or product names of the Licensor,
-      except as required for reasonable and customary use in describing the
-      origin of the Work and reproducing the content of the NOTICE file.
-
-   7. Disclaimer of Warranty. Unless required by applicable law or
-      agreed to in writing, Licensor provides the Work (and each
-      Contributor provides its Contributions) on an "AS IS" BASIS,
-      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
-      implied, including, without limitation, any warranties or conditions
-      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
-      PARTICULAR PURPOSE. You are solely responsible for determining the
-      appropriateness of using or redistributing the Work and assume any
-      risks associated with Your exercise of permissions under this License.
-
-   8. Limitation of Liability. In no event and under no legal theory,
-      whether in tort (including negligence), contract, or otherwise,
-      unless required by applicable law (such as deliberate and grossly
-      negligent acts) or agreed to in writing, shall any Contributor be
-      liable to You for damages, including any direct, indirect, special,
-      incidental, or consequential damages of any character arising as a
-      result of this License or out of the use or inability to use the
-      Work (including but not limited to damages for loss of goodwill,
-      work stoppage, computer failure or malfunction, or any and all
-      other commercial damages or losses), even if such Contributor
-      has been advised of the possibility of such damages.
-
-   9. Accepting Warranty or Additional Liability. While redistributing
-      the Work or Derivative Works thereof, You may choose to offer,
-      and charge a fee for, acceptance of support, warranty, indemnity,
-      or other liability obligations and/or rights consistent with this
-      License. However, in accepting such obligations, You may act only
-      on Your own behalf and on Your sole responsibility, not on behalf
-      of any other Contributor, and only if You agree to indemnify,
-      defend, and hold each Contributor harmless for any liability
-      incurred by, or claims asserted against, such Contributor by reason
-      of your accepting any such warranty or additional liability.
-
-   END OF TERMS AND CONDITIONS
-
-   APPENDIX: How to apply the Apache License to your work.
-
-      To apply the Apache License to your work, attach the following
-      boilerplate notice, with the fields enclosed by brackets "[]"
-      replaced with your own identifying information. (Don't include
-      the brackets!)  The text should be enclosed in the appropriate
-      comment syntax for the file format. We also recommend that a
-      file or class name and description of purpose be included on the
-      same "printed page" as the copyright notice for easier
-      identification within third-party archives.
-
-   Copyright [yyyy] [name of copyright owner]
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
diff --git a/README.md b/README.md
index 2143b4f2..7b45f00b 100644
--- a/README.md
+++ b/README.md
@@ -1,5 +1,5 @@
+[![Build Status](https://travis-ci.org/Nciaravola/PonySDK.svg?branch=master)](https://travis-ci.org/Nciaravola/PonySDK)
 [![codecov](https://codecov.io/gh/Nciaravola/PonySDK/branch/master/graph/badge.svg)](https://codecov.io/gh/Nciaravola/PonySDK)
-[![Actions Status](https://github.com/Nciaravola/PonySDK/workflows/CI/badge.svg)](https://github.com/Nciaravola/PonySDK/actions)
 
 # PonySDK
 PonySDK is an open source project and application that uses open source tools built on the Java platform to help you develop Web applications quickly and efficiently
diff --git a/build.gradle b/build.gradle
index c2b31212..fb71d2b3 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,10 +1,60 @@
-subprojects {
-    apply plugin: 'java'
-    version = '2.8.20'
-    sourceCompatibility = JavaVersion.VERSION_1_9
-    targetCompatibility = JavaVersion.VERSION_1_9
+ext {
+    gwtVersion = '2.8.2'
+    
+    jettyVersion = '9.4.14.v20181114'
+    springVersion = '5.1.3.RELEASE'
+    
+    slf4jVersion = '1.8.0-alpha2'
+    log4jVersion = '2.10.0'
+}
+
+allprojects{
+    apply plugin: 'eclipse'
+    apply plugin: 'jacoco'
 
     repositories {
         mavenCentral()
     }
-}
\ No newline at end of file
+}
+
+subprojects {
+    apply plugin: 'java'
+    apply plugin: 'maven'
+    apply plugin: 'maven-publish'
+
+    sourceCompatibility = 9
+    targetCompatibility = 9
+
+    def suffix = project.hasProperty('BUILD_RELEASE') ? "" : "-SNAPSHOT"
+    version = '2.8.15' + suffix
+
+    publishing {
+        publications {
+            maven(MavenPublication) {
+                groupId 'com.ponysdk'
+                artifactId project.name
+                from components.java
+            }
+        }
+    }
+}
+
+task codeCoverageReport(type: JacocoReport) {
+    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
+
+    subprojects.each {
+        sourceSets it.sourceSets.main
+    }
+
+    reports {
+        xml.enabled true
+        xml.destination file("${buildDir}/reports/jacoco/report.xml")
+        html.enabled false
+        csv.enabled false
+    }
+}
+
+codeCoverageReport.dependsOn {
+    subprojects*.test
+}
+
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index c9d4f065..01df28a8 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -3,4 +3,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-6.0-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-5.2.1-all.zip
diff --git a/ponysdk/.project b/ponysdk/.project
new file mode 100644
index 00000000..2e33408b
--- /dev/null
+++ b/ponysdk/.project
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>ponysdk</name>
+	<comment></comment>
+	<projects/>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments/>
+		</buildCommand>
+	</buildSpec>
+	<linkedResources/>
+	<filteredResources/>
+</projectDescription>
diff --git a/ponysdk/.settings/org.eclipse.jdt.core.prefs b/ponysdk/.settings/org.eclipse.jdt.core.prefs
index f56f2fcf..2e8e4bd3 100644
--- a/ponysdk/.settings/org.eclipse.jdt.core.prefs
+++ b/ponysdk/.settings/org.eclipse.jdt.core.prefs
@@ -1,5 +1,5 @@
 #
-#Thu Nov 22 09:56:45 CET 2018
+#Thu Mar 19 16:43:24 CET 2020
 org.eclipse.jdt.core.formatter.insert_space_after_ellipsis=insert
 org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_declarations=insert
 org.eclipse.jdt.core.formatter.insert_new_line_in_empty_annotation_declaration=insert
@@ -28,44 +28,44 @@ org.eclipse.jdt.core.formatter.blank_lines_after_package=1
 org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_local_declarations=insert
 org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant=16
 org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_parameterized_type_reference=do not insert
-org.eclipse.jdt.core.formatter.comment.indent_root_tags=true
 org.eclipse.jdt.core.formatter.wrap_before_or_operator_multicatch=true
+org.eclipse.jdt.core.formatter.comment.indent_root_tags=true
 org.eclipse.jdt.core.formatter.enabling_tag=@formatter\:on
 org.eclipse.jdt.core.formatter.comment.count_line_length_from_starting_position=false
-org.eclipse.jdt.core.compiler.annotation.nullable.secondary=
-org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_method_declaration=16
 org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_parameter=do not insert
+org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_method_declaration=16
+org.eclipse.jdt.core.compiler.annotation.nullable.secondary=
 org.eclipse.jdt.core.formatter.keep_then_statement_on_same_line=true
 org.eclipse.jdt.core.formatter.insert_space_after_comma_in_explicitconstructorcall_arguments=insert
 org.eclipse.jdt.core.codeComplete.localSuffixes=
 org.eclipse.jdt.core.formatter.insert_space_after_prefix_operator=do not insert
 org.eclipse.jdt.core.formatter.insert_space_before_closing_brace_in_array_initializer=insert
-org.eclipse.jdt.core.compiler.annotation.nonnullbydefault=org.eclipse.jdt.annotation.NonNullByDefault
-org.eclipse.jdt.core.codeComplete.fieldPrefixes=
 org.eclipse.jdt.core.compiler.problem.nullAnnotationInferenceConflict=error
+org.eclipse.jdt.core.codeComplete.fieldPrefixes=
+org.eclipse.jdt.core.compiler.annotation.nonnullbydefault=org.eclipse.jdt.annotation.NonNullByDefault
 org.eclipse.jdt.core.compiler.problem.nullSpecViolation=error
 org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_arguments=do not insert
 org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotation=warning
-org.eclipse.jdt.core.compiler.problem.syntacticNullAnalysisForFields=disabled
 org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_method=insert
+org.eclipse.jdt.core.compiler.problem.syntacticNullAnalysisForFields=disabled
 org.eclipse.jdt.core.formatter.alignment_for_parameterized_type_references=0
 org.eclipse.jdt.core.compiler.problem.staticAccessReceiver=warning
 org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_parenthesized_expression=do not insert
 org.eclipse.jdt.core.compiler.problem.unusedObjectAllocation=ignore
 org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_enum_constant=insert
-org.eclipse.jdt.core.compiler.problem.finalParameterBound=warning
 org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.problem.finalParameterBound=warning
 org.eclipse.jdt.core.formatter.insert_space_after_and_in_type_parameter=insert
-org.eclipse.jdt.core.compiler.problem.redundantSpecificationOfTypeArguments=warning
 org.eclipse.jdt.core.compiler.annotation.nonnull=org.eclipse.jdt.annotation.NonNull
+org.eclipse.jdt.core.compiler.problem.redundantSpecificationOfTypeArguments=warning
 org.eclipse.jdt.core.compiler.problem.unnecessaryElse=ignore
 org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_invocation=do not insert
 org.eclipse.jdt.core.formatter.insert_space_after_assignment_operator=insert
 org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_type_declaration=insert
 org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_for=do not insert
-org.eclipse.jdt.core.compiler.problem.missingJavadocTagsOverriding=disabled
-org.eclipse.jdt.core.formatter.comment.preserve_white_space_between_code_and_line_comments=false
 org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_local_variable=insert
+org.eclipse.jdt.core.formatter.comment.preserve_white_space_between_code_and_line_comments=false
+org.eclipse.jdt.core.compiler.problem.missingJavadocTagsOverriding=disabled
 org.eclipse.jdt.core.codeComplete.staticFinalFieldPrefixes=
 org.eclipse.jdt.core.compiler.doc.comment.support=enabled
 org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_invocation=do not insert
@@ -84,16 +84,16 @@ org.eclipse.jdt.core.compiler.problem.missingDeprecatedAnnotation=warning
 org.eclipse.jdt.core.compiler.problem.fatalOptionalError=disabled
 org.eclipse.jdt.core.formatter.put_empty_statement_on_new_line=true
 org.eclipse.jdt.core.compiler.debug.lineNumber=generate
-org.eclipse.jdt.core.formatter.alignment_for_type_parameters=0
 org.eclipse.jdt.core.formatter.alignment_for_parameters_in_constructor_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_type_parameters=0
 org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
 org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment=false
 org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_array_initializer=insert
 org.eclipse.jdt.core.formatter.insert_space_before_unary_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_array_initializer=insert
 org.eclipse.jdt.core.compiler.problem.missingDefaultCase=ignore
-org.eclipse.jdt.core.compiler.problem.redundantNullCheck=warning
 org.eclipse.jdt.core.formatter.format_line_comment_starting_on_first_column=true
+org.eclipse.jdt.core.compiler.problem.redundantNullCheck=warning
 org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownException=warning
 org.eclipse.jdt.core.compiler.problem.undocumentedEmptyBlock=ignore
 org.eclipse.jdt.core.formatter.parentheses_positions_in_annotation=common_lines
@@ -103,17 +103,17 @@ org.eclipse.jdt.core.formatter.insert_space_after_colon_in_assert=insert
 org.eclipse.jdt.core.formatter.insert_space_before_and_in_type_parameter=insert
 org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_parenthesized_expression=do not insert
 org.eclipse.jdt.core.formatter.align_type_members_on_columns=false
-org.eclipse.jdt.core.formatter.alignment_for_module_statements=16
 org.eclipse.jdt.core.formatter.alignment_for_assignment=0
+org.eclipse.jdt.core.formatter.alignment_for_module_statements=16
 org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_type_header=true
 org.eclipse.jdt.core.codeComplete.argumentPrefixes=
 org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_declaration=do not insert
 org.eclipse.jdt.core.formatter.comment.align_tags_names_descriptions=false
 org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_enum_constant=do not insert
 org.eclipse.jdt.core.formatter.blank_lines_before_first_class_body_declaration=1
-org.eclipse.jdt.core.formatter.format_guardian_clause_on_one_line=false
-org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer=do not insert
 org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer=do not insert
+org.eclipse.jdt.core.formatter.format_guardian_clause_on_one_line=false
 org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_if=insert
 org.eclipse.jdt.core.compiler.problem.incompatibleNonInheritedInterfaceMethod=warning
 org.eclipse.jdt.core.compiler.problem.missingSerialVersion=ignore
@@ -122,8 +122,8 @@ org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_constructor_
 org.eclipse.jdt.core.compiler.problem.unclosedCloseable=warning
 org.eclipse.jdt.core.formatter.comment.format_header=false
 org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression=20
-org.eclipse.jdt.core.compiler.problem.missingJavadocTagsMethodTypeParameters=disabled
 org.eclipse.jdt.core.compiler.problem.invalidJavadocTags=enabled
+org.eclipse.jdt.core.compiler.problem.missingJavadocTagsMethodTypeParameters=disabled
 org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_switch=do not insert
 org.eclipse.jdt.core.formatter.alignment_for_method_declaration=0
 org.eclipse.jdt.core.compiler.problem.unusedParameterWhenImplementingAbstract=disabled
@@ -145,8 +145,8 @@ org.eclipse.jdt.core.codeComplete.fieldSuffixes=
 org.eclipse.jdt.core.formatter.blank_lines_before_field=0
 org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation=do not insert
 org.eclipse.jdt.core.formatter.blank_lines_before_method=1
-org.eclipse.jdt.core.compiler.debug.sourceFile=generate
 org.eclipse.jdt.core.compiler.problem.unusedParameterWhenOverridingConcrete=disabled
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
 org.eclipse.jdt.core.formatter.alignment_for_superclass_in_type_declaration=16
 org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_throw=insert
 org.eclipse.jdt.core.compiler.codegen.targetPlatform=9
diff --git a/ponysdk/build.gradle b/ponysdk/build.gradle
index e28ad4d1..39590558 100644
--- a/ponysdk/build.gradle
+++ b/ponysdk/build.gradle
@@ -1,42 +1,48 @@
 ext {
     resourcesCoreTest = "src/test/resources"
     gwtOutputDirName = buildDir.name + "/gwt"
+    buildInfoOutputDirName = buildDir.name + "/buildinfo"
+    javadocResources = "src/main/javadoc"
+
     jsinteropVersion = '1.0.2'
+
+    javaxServletVersion = '4.0.1'
     glassfishVersion = '1.1.4'
+    jsonVersion = '1.1.4'
     javaxValidationVersion = '1.0.0.GA'
     seleniumVersion = '3.14.0'
     junitVersion = '4.12'
     tyrusVersion = '1.15'
     mockitoVersion = '2.24.0'
-    gwtVersion = '2.8.2'
-    jettyVersion = '9.4.14.v20181114'
-    springVersion = '5.1.3.RELEASE'
-    javaxServletVersion = '4.0.1'
-    slf4jVersion = '1.8.0-alpha2'
-    log4jVersion = '2.10.0'
-    jsonVersion = '1.1.4'
 }
 
 configurations {
-    gwt
     gwtdev
-    implementation.extendsFrom gwt
 }
 
 dependencies {
-    gwt(
-            'com.google.gwt:gwt-user:' + gwtVersion,
-            'com.google.gwt:gwt-elemental:' + gwtVersion
-    )
-
     gwtdev(
             'com.google.gwt:gwt-dev:' + gwtVersion
     )
 
-    implementation(
-            'javax.validation:validation-api:' + javaxValidationVersion,
+    compile('javax.validation:validation-api:' + javaxValidationVersion) {
+        artifact {
+            name = 'validation-api'
+            type = 'jar'
+        }
+        artifact {
+            name = 'validation-api'
+            type = 'jar'
+            classifier = 'sources'
+        }
+    }
+
+    compile(
+            'com.google.gwt:gwt-user:' + gwtVersion,
+            'com.google.gwt:gwt-elemental:' + gwtVersion,
             'com.google.jsinterop:jsinterop:' + jsinteropVersion,
             'com.google.jsinterop:jsinterop-annotations:' + jsinteropVersion,
+
             'org.eclipse.jetty:jetty-server:' + jettyVersion,
             'org.eclipse.jetty:jetty-servlet:' + jettyVersion,
             'org.eclipse.jetty:jetty-webapp:' + jettyVersion,
@@ -52,50 +58,52 @@ dependencies {
             'org.eclipse.jetty.websocket:websocket-server:' + jettyVersion,
             'org.eclipse.jetty.websocket:websocket-servlet:' + jettyVersion,
             'org.eclipse.jetty.websocket:javax-websocket-server-impl:' + jettyVersion,
+
             'org.springframework:spring-core:' + springVersion,
             'org.springframework:spring-web:' + springVersion,
             'org.springframework:spring-beans:' + springVersion,
             'org.springframework:spring-context:' + springVersion,
+
             'org.slf4j:slf4j-api:' + slf4jVersion,
+
             'javax.servlet:javax.servlet-api:' + javaxServletVersion,
             'javax.json:javax.json-api:' + jsonVersion,
             'org.glassfish:javax.json:' + glassfishVersion,
+
             'org.seleniumhq.selenium:selenium-api:' + seleniumVersion,
             'org.glassfish.tyrus:tyrus-client:' + tyrusVersion,
-            'org.glassfish.tyrus.ext:tyrus-extension-deflate:' + tyrusVersion,
-            'junit:junit:' + junitVersion,
-            'org.mockito:mockito-core:' + mockitoVersion
+            'org.glassfish.tyrus.ext:tyrus-extension-deflate:' + tyrusVersion
     )
 
-    testImplementation(
+    testCompile(
+            'junit:junit:' + junitVersion,
+
+            'org.mockito:mockito-core:' + mockitoVersion,
+
             'org.seleniumhq.selenium:selenium-java:' + seleniumVersion,
             'javax.websocket:javax.websocket-client-api:1.1',
             'org.jsoup:jsoup:1.11.3'
     )
 
-    testRuntimeOnly(
+    testRuntime(
             'org.slf4j:jcl-over-slf4j:' + slf4jVersion,
             'org.slf4j:log4j-over-slf4j:' + slf4jVersion,
             'org.slf4j:jul-to-slf4j:' + slf4jVersion,
             'org.apache.logging.log4j:log4j-slf4j-impl:' + log4jVersion,
+
             'org.glassfish.tyrus:tyrus-container-grizzly-client:' + tyrusVersion
     )
 }
 
-java {
-    withJavadocJar()
-    withSourcesJar()
-}
-
-javadoc {
-    classpath += configurations.gwtdev
-    exclude '**/terminal/**'
-}
-
 jar {
+    baseName = 'ponysdk'
     into('ponyterminal') {
-        from gwtOutputDirName + '/gwt/ponyterminal'
+        from gwtOutputDirName + '/prod/gwt/ponyterminal'
+    }
+    into('ponyterminaldebug') {
+        from gwtOutputDirName + '/debug/gwt/ponyterminaldebug'
     }
+
     exclude('*.devmode.js')
     exclude('*compilation-mappings.txt')
 
@@ -103,29 +111,49 @@ jar {
         def cmd = "git rev-parse HEAD"
         def proc = cmd.execute()
         ext.revision = proc.text.trim()
+        ext.timestamp = (int) (new Date().getTime() / 1000)
 
-        manifest {
-            attributes(
-                    'Built-By': System.properties['user.name'],
-                    'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
-                    'Build-Revision': revision,
-                    'Created-By': "Gradle ${gradle.gradleVersion}",
-                    'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
-                    'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
-                    'License-Title': "Apache License 2.0"
-            )
-        }
+        attributes("Manifest-Version": "1.0")
+        attributes("Created-By": "PonySDK")
+        attributes("Built-By": "PonySDK")
+        attributes("License-Title": "Apache License 2.0")
+        attributes("Specification-Title": "PonySDK")
+        attributes("Specification-Version": version)
+        attributes("Specification-Vendor": "PonySDK")
+        attributes("Implementation-Title": "PonySDK")
+        attributes("Implementation-Version": version)
+        attributes("Implementation-Vendor-Id": "com.ponysdk")
+        attributes("Implementation-Vendor": "PonySDK")
+        attributes("Revision": revision)
+        attributes("Date": timestamp + " / " + new Date().toGMTString())
     }
 }
 
-task gwtc(type: JavaExec) {
+javadoc {
+    exclude '**/terminal/**'
+}
+
+task createGWTProdBuildDir {
+    doLast {
+        mkdir new File(gwtOutputDirName, "prod")
+    }
+}
+
+task gwtc(dependsOn: 'classes', type: JavaExec) {
     inputs.dir('src/main/java/com/ponysdk/core/terminal')
-    outputs.dir(gwtOutputDirName + '/gwt/ponyterminal')
+    outputs.dir(gwtOutputDirName + '/prod/gwt/ponyterminal')
     description = "GWT compile to JavaScript (production mode)"
     main = 'com.google.gwt.dev.Compiler'
-    workingDir = new File(gwtOutputDirName)
-    classpath { [sourceSets.main.java.srcDirs, configurations.gwtdev, configurations.gwt] }
-    maxHeapSize = '512M'
+    workingDir = new File(gwtOutputDirName, "prod")
+
+    classpath {
+        [
+                sourceSets.main.java.srcDirs,
+                configurations.compile,
+                configurations.gwtdev
+        ]
+    }
+
     args = [
             '-war',
             'gwt',
@@ -133,10 +161,92 @@ task gwtc(type: JavaExec) {
             Runtime.getRuntime().availableProcessors(),
             'com.ponysdk.core.PonyTerminal',
             '-generateJsInteropExports'
-            // Debug Mode
-            // '-style', 'DETAILED',
-            // '-optimize', '0'
     ]
+
+    maxHeapSize = '512M'
+}
+
+task createGWTDebugBuildDir {
+    doLast {
+        mkdir new File(gwtOutputDirName, "debug")
+    }
+}
+
+task gwtcDebug(dependsOn: classes, type: JavaExec) {
+    inputs.dir('src/main/java/com/ponysdk/core/terminal')
+    outputs.dir(gwtOutputDirName + '/debug/gwt/ponyterminaldebug')
+    description = "GWT compile to JavaScript (debug mode)"
+    main = 'com.google.gwt.dev.Compiler'
+    workingDir = new File(gwtOutputDirName, "debug")
+
+    classpath {
+        [
+                sourceSets.main.java.srcDirs,
+                configurations.compile,
+                configurations.gwtdev
+        ]
+    }
+
+    args = [
+            '-war',
+            'gwt',
+            '-localWorkers',
+            Runtime.getRuntime().availableProcessors(),
+            'com.ponysdk.core.PonyTerminalDebug',
+            '-generateJsInteropExports',
+            '-style', 'DETAILED',
+            '-optimize', '0'
+    ]
+
+    maxHeapSize = '512M'
+}
+
+task sourcesJar(type: Jar, dependsOn: classes) {
+    classifier = 'sources'
+    from sourceSets.main.allJava
+    from sourceSets.test.allJava
+
+    from(sourceSets.main.java.srcDirs) {
+        include '**/*.xml'
+    }
+
+    manifest {
+        def cmd = "git rev-parse HEAD"
+        def proc = cmd.execute()
+        ext.revision = proc.text.trim()
+        ext.timestamp = (int) (new Date().getTime() / 1000)
+
+        attributes("Manifest-Version": "1.0")
+        attributes("Created-By": "PonySDK")
+        attributes("Built-By": "PonySDK")
+        attributes("License-Title": "Apache License 2.0")
+        attributes("Specification-Title": "PonySDK")
+        attributes("Specification-Version": version)
+        attributes("Specification-Vendor": "PonySDK")
+        attributes("Implementation-Title": "PonySDK")
+        attributes("Implementation-Version": version)
+        attributes("Implementation-Vendor-Id": "com.ponysdk")
+        attributes("Implementation-Vendor": "PonySDK")
+        attributes("Revision": revision)
+        attributes("Classifier": "sources")
+        attributes("Date": timestamp + " / " + new Date().toGMTString())
+    }
+}
+
+task testsJar(type: Jar) {
+    classifier = 'tests'
+    from sourceSets.test.output
+}
+
+publish.dependsOn('sourcesJar')
+publish.dependsOn('jar')
+publish.dependsOn('testsJar')
+publish.finalizedBy('publishInfo')
+
+task publishInfo {
+    doLast {
+        println 'You need to deploy manually new built jars in your favorite artifacts management server'
+    }
 }
 
 test {
@@ -148,21 +258,12 @@ test {
     }
 }
 
-task codeCoverageReport(type: JacocoReport) {
-    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
-
-    subprojects.each {
-        sourceSets it.sourceSets.main
-    }
-
-    reports {
-        xml.enabled true
-        xml.destination file("${buildDir}/reports/jacoco/report.xml")
-        html.enabled false
-        csv.enabled false
-    }
+artifacts {
+    archives sourcesJar
 }
 
-codeCoverageReport.dependsOn('test')
-gwtc.dependsOn('classes')
-jar.dependsOn('gwtc')
\ No newline at end of file
+gwtc.dependsOn('createGWTProdBuildDir')
+jar.dependsOn('gwtc')
+
+gwtcDebug.dependsOn('createGWTDebugBuildDir')
+jar.dependsOn('gwtcDebug')
diff --git a/ponysdk/src/main/java/com/ponysdk/core/PonyTerminalDebug.gwt.xml b/ponysdk/src/main/java/com/ponysdk/core/PonyTerminalDebug.gwt.xml
new file mode 100644
index 00000000..85650199
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/PonyTerminalDebug.gwt.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module rename-to='ponyterminaldebug'>
+	<inherits name='com.google.gwt.user.User' />
+	<inherits name="com.google.gwt.http.HTTP" />
+	<inherits name="elemental.Elemental" />
+
+	<entry-point class='com.ponysdk.core.terminal.CommunicationEntryPoint' />
+	<source path='terminal' />
+	<source path='model' />
+
+	<inherits name="com.google.gwt.logging.Logging" />
+	<set-property name="gwt.logging.logLevel" value="INFO" />
+	<set-property name="gwt.logging.enabled" value="TRUE" />
+	<set-property name="gwt.logging.consoleHandler" value="ENABLED" />
+
+    <inherits name="com.google.gwt.core.StackTrace" />
+    <set-property name="compiler.stackMode" value="emulated" />
+    <set-configuration-property name="compiler.emulatedStack.recordLineNumbers" value="true"/>
+    <set-configuration-property name="compiler.emulatedStack.recordFileNames" value="true"/>
+
+<!-- 	<script src="ponysdk.js" /> -->
+
+</module>
diff --git a/ponysdk/src/main/java/com/ponysdk/core/model/ArrayValueModel.java b/ponysdk/src/main/java/com/ponysdk/core/model/ArrayValueModel.java
index 4b1404a0..d85557a9 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/model/ArrayValueModel.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/model/ArrayValueModel.java
@@ -40,19 +40,19 @@ public enum ArrayValueModel {
 
     STRING_UTF8_UINT8_LENGTH(ArrayValueModel.STRING_UINT8_LENGTH_MIN_SIZE, true),
     STRING_UTF8_UINT16_LENGTH(ArrayValueModel.STRING_UINT16_LENGTH_SIZE, true),
-    STRING_UTF8_UINT32_LENGTH(ArrayValueModel.STRING_UINT32_LENGTH_MIN_SIZE, true);
+    STRING_UTF8_INT32_LENGTH(ArrayValueModel.STRING_INT32_LENGTH_MIN_SIZE, true);
 
     private static final int BOOLEAN_SIZE = 0;
     private static final int STRING_UINT8_LENGTH_MIN_SIZE = 1;
     private static final int STRING_UINT16_LENGTH_SIZE = 2;
-    private static final int STRING_UINT32_LENGTH_MIN_SIZE = 4;
+    private static final int STRING_INT32_LENGTH_MIN_SIZE = 4;
 
     private final int minSize;
     private final boolean dynamicSize;
 
     private static final ArrayValueModel[] VALUES = ArrayValueModel.values();
 
-    ArrayValueModel(final int minSize, final boolean dynamicSize) {
+    private ArrayValueModel(final int minSize, final boolean dynamicSize) {
         this.minSize = minSize;
         this.dynamicSize = dynamicSize;
     }
diff --git a/ponysdk/src/main/java/com/ponysdk/core/model/ClientToServerModel.java b/ponysdk/src/main/java/com/ponysdk/core/model/ClientToServerModel.java
index f8f9bc8d..f384883b 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/model/ClientToServerModel.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/model/ClientToServerModel.java
@@ -1,104 +1,104 @@
-/*
- * Copyright (c) 2011 PonySDK
- *  Owners:
- *  Luciano Broussal  <luciano.broussal AT gmail.com>
- *  Mathieu Barbier   <mathieu.barbier AT gmail.com>
- *  Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
- *
- *  WebSite:
- *  http://code.google.com/p/pony-sdk/
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-
-package com.ponysdk.core.model;
-
-public enum ClientToServerModel {
-
-    OBJECT_ID("0"),
-
-    UI_CONTEXT_ID("1"),
-    WINDOW_ID("2"),
-    FRAME_ID("3"),
-
-    NATIVE("4"),
-    APPLICATION_INSTRUCTIONS("5"),
-
-    ERROR_MSG("6"),
-    WARN_MSG("7"),
-    INFO_MSG("8"),
-
-    COOKIES("9"),
-    COOKIE_NAME("a"),
-    COOKIE_VALUE("b"),
-
-    TYPE_HISTORY("c"),
-
-    WIDGET_POSITION("d"),
-    POPUP_POSITION("e"),
-    EVENT_INFO("f"),
-    DOM_HANDLER_TYPE("g"),
-
-    TERMINAL_LATENCY("h"),
-    APPLICATION_ID("i"),
-
-    PARENT_OBJECT_ID("j"),
-    VALUE_KEY("k"),
-    REPLACEMENT_STRING("l"),
-    COMMAND_ID("m"),
-    STREAM_REQUEST_ID("n"),
-    SIZE("o"),
-    DRAG_SRC("p"),
-    START_DATE("q"),
-    END_DATE("r"),
-    KEY_FILTER("s"),
-    RESULT("t"),
-
-    OPTION_TABINDEX_ACTIVATED("u"),
-
-    HEARTBEAT_REQUEST("v"),
-
-    HANDLER_BOOLEAN_VALUE_CHANGE("A"),
-    HANDLER_DATE_VALUE_CHANGE("B"),
-    HANDLER_STRING_VALUE_CHANGE("C"),
-    HANDLER_BEFORE_SELECTION("D"),
-    HANDLER_COMMAND("E"),
-    HANDLER_CLOSE("F"),
-    HANDLER_OPEN("G"),
-    HANDLER_RESIZE("H"),
-    HANDLER_SELECTION("I"),
-    HANDLER_SHOW_RANGE("J"),
-    HANDLER_STRING_SELECTION("K"),
-    HANDLER_SUBMIT_COMPLETE("L"),
-    HANDLER_SCROLL("M"),
-    HANDLER_SCROLL_HEIGHT("N"),
-    HANDLER_SCROLL_WIDTH("O"),
-    HANDLER_SCROLL_VERTICAL("P"),
-    HANDLER_SCROLL_HORIZONTAL("Q"),
-    HANDLER_CHANGE("R"),
-    HANDLER_PASTE("S"),
-    HANDLER_WIDGET_VISIBILITY("T"),
-    HANDLER_DOCUMENT_VISIBILITY("U"),
-    HANDLER_DESTROY("V");
-
-    private String key;
-
-    private ClientToServerModel(final String key) {
-        this.key = key;
-    }
-
-    public final String toStringValue() {
-        return key;
-    }
-
-}
+/*
+ * Copyright (c) 2011 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *  Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *  Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.model;
+
+public enum ClientToServerModel {
+
+    OBJECT_ID("0"),
+
+    UI_CONTEXT_ID("1"),
+    WINDOW_ID("2"),
+    FRAME_ID("3"),
+
+    NATIVE("4"),
+    APPLICATION_INSTRUCTIONS("5"),
+
+    ERROR_MSG("6"),
+    WARN_MSG("7"),
+    INFO_MSG("8"),
+
+    COOKIES("9"),
+    COOKIE_NAME("a"),
+    COOKIE_VALUE("b"),
+
+    TYPE_HISTORY("c"),
+
+    WIDGET_POSITION("d"),
+    POPUP_POSITION("e"),
+    EVENT_INFO("f"),
+    DOM_HANDLER_TYPE("g"),
+
+    TERMINAL_LATENCY("h"),
+    APPLICATION_ID("i"),
+
+    PARENT_OBJECT_ID("j"),
+    VALUE_KEY("k"),
+    REPLACEMENT_STRING("l"),
+    COMMAND_ID("m"),
+    STREAM_REQUEST_ID("n"),
+    SIZE("o"),
+    DRAG_SRC("p"),
+    START_DATE("q"),
+    END_DATE("r"),
+    KEY_FILTER("s"),
+    RESULT("t"),
+
+    OPTION_TABINDEX_ACTIVATED("u"),
+
+    HEARTBEAT_REQUEST("v"),
+
+    HANDLER_BOOLEAN_VALUE_CHANGE("A"),
+    HANDLER_DATE_VALUE_CHANGE("B"),
+    HANDLER_STRING_VALUE_CHANGE("C"),
+    HANDLER_BEFORE_SELECTION("D"),
+    HANDLER_COMMAND("E"),
+    HANDLER_CLOSE("F"),
+    HANDLER_OPEN("G"),
+    HANDLER_RESIZE("H"),
+    HANDLER_SELECTION("I"),
+    HANDLER_SHOW_RANGE("J"),
+    HANDLER_STRING_SELECTION("K"),
+    HANDLER_SUBMIT_COMPLETE("L"),
+    HANDLER_SCROLL("M"),
+    HANDLER_SCROLL_HEIGHT("N"),
+    HANDLER_SCROLL_WIDTH("O"),
+    HANDLER_SCROLL_VERTICAL("P"),
+    HANDLER_SCROLL_HORIZONTAL("Q"),
+    HANDLER_CHANGE("R"),
+    HANDLER_PASTE("S"),
+    HANDLER_WIDGET_VISIBILITY("T"),
+    HANDLER_DOCUMENT_VISIBILITY("U"),
+    HANDLER_DESTROY("V");
+
+    private String key;
+
+    private ClientToServerModel(final String key) {
+        this.key = key;
+    }
+
+    public final String toStringValue() {
+        return key;
+    }
+
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/model/DateConverter.java b/ponysdk/src/main/java/com/ponysdk/core/model/DateConverter.java
index dd76f603..9919fbc3 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/model/DateConverter.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/model/DateConverter.java
@@ -28,27 +28,13 @@ import java.util.Date;
 
 public final class DateConverter {
 
-    private static final int MAX_ARRAY_SIZE = Byte.MAX_VALUE * 2 + 1;
     private static final int EMPTY_TIMESTAMP = -1;
 
     private DateConverter() {
     }
 
-    public static Long[][] encode(final Collection<Date> dates) {
-        if (dates == null || dates.isEmpty()) return null;
-        final int remainder = dates.size() % MAX_ARRAY_SIZE;
-        final int nbArrays = dates.size() / MAX_ARRAY_SIZE + (remainder == 0 ? 0 : 1);
-        final Long[][] arrays = new Long[nbArrays][];
-        for (int i = 0; i < arrays.length - 1; i++) {
-            arrays[i] = new Long[MAX_ARRAY_SIZE];
-        }
-        arrays[arrays.length - 1] = new Long[remainder == 0 ? MAX_ARRAY_SIZE : remainder];
-        int i = 0;
-        for (final Date date : dates) {
-            arrays[i / MAX_ARRAY_SIZE][i % MAX_ARRAY_SIZE] = encode(date);
-            i++;
-        }
-        return arrays;
+    public static Long[] encode(final Collection<Date> dates) {
+        return dates != null && !dates.isEmpty() ? dates.stream().map(DateConverter::encode).toArray(Long[]::new) : null;
     }
 
     public static Long encode(final Date date) {
diff --git a/ponysdk/src/main/java/com/ponysdk/core/model/ServerToClientModel.java b/ponysdk/src/main/java/com/ponysdk/core/model/ServerToClientModel.java
index 9760a3b6..19688a4d 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/model/ServerToClientModel.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/model/ServerToClientModel.java
@@ -1,279 +1,280 @@
-/*
- * Copyright (c) 2011 PonySDK
- *  Owners:
- *  Luciano Broussal  <luciano.broussal AT gmail.com>
- *  Mathieu Barbier   <mathieu.barbier AT gmail.com>
- *  Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
- *
- *  WebSite:
- *  http://code.google.com/p/pony-sdk/
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-
-package com.ponysdk.core.model;
-
-public enum ServerToClientModel {
-
-    ROUNDTRIP_LATENCY(ValueTypeModel.NULL),
-    HEARTBEAT(ValueTypeModel.NULL),
-    HEARTBEAT_PERIOD(ValueTypeModel.INTEGER),
-
-    CREATE_CONTEXT(ValueTypeModel.UINT31),
-    DESTROY_CONTEXT(ValueTypeModel.NULL),
-    END(ValueTypeModel.NULL),
-    OPTION_FORMFIELD_TABULATION(ValueTypeModel.BOOLEAN),
-
-    TYPE_CREATE(ValueTypeModel.UINT31),
-    TYPE_UPDATE(ValueTypeModel.UINT31),
-    TYPE_ADD(ValueTypeModel.UINT31),
-    TYPE_REMOVE(ValueTypeModel.UINT31),
-    TYPE_ADD_HANDLER(ValueTypeModel.UINT31),
-    TYPE_REMOVE_HANDLER(ValueTypeModel.NULL),
-    TYPE_HISTORY(ValueTypeModel.STRING),
-    TYPE_GC(ValueTypeModel.UINT31),
-
-    NATIVE(ValueTypeModel.STRING),
-    DATE(ValueTypeModel.LONG),
-    VALUE(ValueTypeModel.STRING),
-    PARENT_OBJECT_ID(ValueTypeModel.UINT31),
-    PUT_STYLE_KEY(ValueTypeModel.STRING),
-    STYLE_VALUE(ValueTypeModel.STRING),
-    REMOVE_STYLE_KEY(ValueTypeModel.STRING),
-    PUT_PROPERTY_KEY(ValueTypeModel.STRING),
-    PROPERTY_VALUE(ValueTypeModel.STRING),
-    PUT_ATTRIBUTE_KEY(ValueTypeModel.STRING),
-    ATTRIBUTE_VALUE(ValueTypeModel.STRING),
-    REMOVE_ATTRIBUTE_KEY(ValueTypeModel.STRING),
-    ADD_STYLE_NAME(ValueTypeModel.STRING),
-    REMOVE_STYLE_NAME(ValueTypeModel.STRING),
-    HREF(ValueTypeModel.STRING),
-    TEXT(ValueTypeModel.STRING),
-    ATTRIBUTE_LINKED_TO_VALUE(ValueTypeModel.STRING),
-    HTML(ValueTypeModel.STRING),
-    WIDGET_ID(ValueTypeModel.UINT31),
-    WIDGET(ValueTypeModel.NULL),
-    VALUE_CHECKBOX(ValueTypeModel.BYTE),
-    WORD_WRAP(ValueTypeModel.BOOLEAN),
-    CLEAR(ValueTypeModel.NULL),
-    CLEAR_ROW(ValueTypeModel.INTEGER),
-    INSERT_ROW(ValueTypeModel.INTEGER),
-    CELL_PADDING(ValueTypeModel.INTEGER),
-    CELL_SPACING(ValueTypeModel.INTEGER),
-    HORIZONTAL_ALIGNMENT(ValueTypeModel.BYTE),
-    WIDGET_HORIZONTAL_ALIGNMENT(ValueTypeModel.BYTE),
-    VERTICAL(ValueTypeModel.BOOLEAN),
-    VERTICAL_ALIGNMENT(ValueTypeModel.BYTE),
-    WIDGET_VERTICAL_ALIGNMENT(ValueTypeModel.BYTE),
-    WIDGET_HIDDEN(ValueTypeModel.BOOLEAN),
-    LEFT(ValueTypeModel.DOUBLE),
-    RIGHT(ValueTypeModel.DOUBLE),
-    WIDTH(ValueTypeModel.DOUBLE),
-    TOP(ValueTypeModel.DOUBLE),
-    BOTTOM(ValueTypeModel.DOUBLE),
-    HEIGHT(ValueTypeModel.DOUBLE),
-    UNIT(ValueTypeModel.BYTE),
-    ANIMATE(ValueTypeModel.INTEGER),
-    ANIMATION_DURATION(ValueTypeModel.INTEGER),
-    OPEN(ValueTypeModel.NULL),
-    CLOSE(ValueTypeModel.NULL),
-    BIND(ValueTypeModel.STRING),
-    CELL_HEIGHT(ValueTypeModel.STRING),
-    CELL_WIDTH(ValueTypeModel.STRING),
-    INDEX(ValueTypeModel.INTEGER),
-    ADD_COOKIE(ValueTypeModel.STRING),
-    REMOVE_COOKIE(ValueTypeModel.STRING),
-    COOKIE_EXPIRE(ValueTypeModel.LONG),
-    COOKIE_DOMAIN(ValueTypeModel.STRING),
-    COOKIE_PATH(ValueTypeModel.STRING),
-    COOKIE_SECURE(ValueTypeModel.NULL),
-    TIME(ValueTypeModel.LONG),
-    ANIMATION(ValueTypeModel.BOOLEAN),
-    CURSOR_POSITION(ValueTypeModel.INTEGER),
-    SELECTION_RANGE_START(ValueTypeModel.INTEGER),
-    SELECTION_RANGE_LENGTH(ValueTypeModel.INTEGER),
-    MAX_LENGTH(ValueTypeModel.INTEGER),
-    VISIBLE_LENGTH(ValueTypeModel.INTEGER),
-    REGEX_FILTER(ValueTypeModel.STRING),
-    MASK(ValueTypeModel.STRING),
-    VISIBILITY(ValueTypeModel.BOOLEAN),
-    REPLACEMENT_STRING(ValueTypeModel.STRING),
-    DATE_FORMAT_PATTERN(ValueTypeModel.STRING),
-    KEEP_DAY_TIME_NEEDED(ValueTypeModel.NULL),
-    TAG(ValueTypeModel.STRING),
-    PICKER(ValueTypeModel.INTEGER),
-    ROW(ValueTypeModel.INTEGER),
-    ROW_FORMATTER_ADD_STYLE_NAME(ValueTypeModel.STRING),
-    ROW_FORMATTER_REMOVE_STYLE_NAME(ValueTypeModel.STRING),
-    ROW_FORMATTER_SET_STYLE_NAME(ValueTypeModel.STRING),
-    ROW_FORMATTER_SHOW_ROW(ValueTypeModel.INTEGER),
-    ROW_FORMATTER_HIDE_ROW(ValueTypeModel.INTEGER),
-    COLUMN(ValueTypeModel.INTEGER),
-    CELL_FORMATTER_ADD_STYLE_NAME(ValueTypeModel.STRING),
-    CELL_FORMATTER_REMOVE_STYLE_NAME(ValueTypeModel.STRING),
-    CELL_FORMATTER_SET_STYLE_NAME(ValueTypeModel.STRING),
-    COLUMN_FORMATTER_COLUMN_WIDTH(ValueTypeModel.STRING),
-    COLUMN_FORMATTER_ADD_STYLE_NAME(ValueTypeModel.STRING),
-    COLUMN_FORMATTER_REMOVE_STYLE_NAME(ValueTypeModel.STRING),
-    COLUMN_FORMATTER_SET_STYLE_NAME(ValueTypeModel.STRING),
-    PLACEHOLDER(ValueTypeModel.STRING),
-    DATE_ENABLED(ValueTypeModel.ARRAY),
-    ENABLED(ValueTypeModel.BOOLEAN),
-    STYLE_NAME(ValueTypeModel.STRING),
-    ADD_DATE_STYLE(ValueTypeModel.ARRAY),
-    REMOVE_DATE_STYLE(ValueTypeModel.ARRAY),
-    YEAR_ARROWS_VISIBLE(ValueTypeModel.BOOLEAN),
-    POPUP_CAPTION(ValueTypeModel.STRING),
-    WIDGET_VISIBLE(ValueTypeModel.BOOLEAN),
-    IMAGE_WIDTH(ValueTypeModel.INTEGER),
-    IMAGE_HEIGHT(ValueTypeModel.INTEGER),
-    WIDGET_WIDTH(ValueTypeModel.STRING),
-    WIDGET_HEIGHT(ValueTypeModel.STRING),
-    WIDGET_TITLE(ValueTypeModel.STRING),
-    ENSURE_DEBUG_ID(ValueTypeModel.STRING),
-    ITEM_INSERTED(ValueTypeModel.STRING),
-    ITEM_UPDATED(ValueTypeModel.STRING),
-    ITEM_REMOVED(ValueTypeModel.INTEGER),
-    SELECTED(ValueTypeModel.BOOLEAN),
-    SELECTED_INDEX(ValueTypeModel.INTEGER),
-    MULTISELECT(ValueTypeModel.BOOLEAN),
-    VISIBLE_ITEM_COUNT(ValueTypeModel.INTEGER),
-    ITEM_ADD(ValueTypeModel.ARRAY),
-    ITEM_GROUP(ValueTypeModel.STRING),
-    POPUP_AUTO_HIDE(ValueTypeModel.BOOLEAN),
-    MODAL(ValueTypeModel.BOOLEAN),
-    POPUP_GLASS_ENABLED(ValueTypeModel.BOOLEAN),
-    DRAGGABLE(ValueTypeModel.BOOLEAN),
-    CENTER(ValueTypeModel.NULL),
-    POSITION_LEFT(ValueTypeModel.INTEGER),
-    POSITION_TOP(ValueTypeModel.INTEGER),
-    FIXDELAY(ValueTypeModel.LONG),
-    MIN_SIZE(ValueTypeModel.INTEGER),
-    SNAP_CLOSED_SIZE(ValueTypeModel.INTEGER),
-    TOGGLE_DISPLAY_ALLOWED(ValueTypeModel.BOOLEAN),
-    IMAGE_URL(ValueTypeModel.STRING),
-    INSERT_HORIZONTAL_RULE(ValueTypeModel.NULL),
-    INSERT_HTML(ValueTypeModel.STRING),
-    ORDERED(ValueTypeModel.NULL),
-    UNORDERED(ValueTypeModel.NULL),
-    BACK_COLOR(ValueTypeModel.STRING),
-    FONT_NAME(ValueTypeModel.STRING),
-    FONT_SIZE(ValueTypeModel.BYTE),
-    FONT_COLOR(ValueTypeModel.STRING),
-    JUSTIFICATION(ValueTypeModel.BYTE),
-    TOGGLE_BOLD(ValueTypeModel.NULL),
-    TOGGLE_ITALIC(ValueTypeModel.NULL),
-    TOGGLE_SUBSCRIPT(ValueTypeModel.NULL),
-    TOGGLE_UNDERLINE(ValueTypeModel.NULL),
-    LEFT_INDENT(ValueTypeModel.NULL),
-    REDO(ValueTypeModel.NULL),
-    REMOVE_FORMAT(ValueTypeModel.NULL),
-    REMOVE_LINK(ValueTypeModel.NULL),
-    TOGGLE_RIGHT_INDENT(ValueTypeModel.NULL),
-    SELECT_ALL(ValueTypeModel.NULL),
-    COMMAND_ID(ValueTypeModel.LONG),
-    ORACLE(ValueTypeModel.INTEGER),
-    STREAM_REQUEST_ID(ValueTypeModel.INTEGER),
-    TREE_ROOT(ValueTypeModel.INTEGER),
-    FACTORY(ValueTypeModel.STRING),
-    DIRECTION(ValueTypeModel.BYTE),
-    SIZE(ValueTypeModel.DOUBLE),
-    WIDGET_SIZE(ValueTypeModel.DOUBLE),
-    RESIZE(ValueTypeModel.NULL),
-    BEFORE_INDEX(ValueTypeModel.INTEGER),
-    TAB_WIDGET(ValueTypeModel.INTEGER),
-    TAB_TEXT(ValueTypeModel.STRING),
-    ENABLED_ON_REQUEST(ValueTypeModel.BOOLEAN),
-    TABINDEX(ValueTypeModel.INTEGER),
-    END_OF_PROCESSING(ValueTypeModel.NULL),
-    FOCUS(ValueTypeModel.BOOLEAN),
-    HANDLER_TYPE(ValueTypeModel.BYTE),
-    HISTORY_FIRE_EVENTS(ValueTypeModel.BOOLEAN),
-    LOADING_ON_REQUEST(ValueTypeModel.BOOLEAN),
-    SET_COL_SPAN(ValueTypeModel.INTEGER),
-    SET_ROW_SPAN(ValueTypeModel.INTEGER),
-    KEY_FILTER(ValueTypeModel.ARRAY),
-    POPUP_POSITION_AND_SHOW(ValueTypeModel.NULL),
-    ROOT_ID(ValueTypeModel.STRING),
-    WINDOW_ID(ValueTypeModel.UINT31),
-    FRAME_ID(ValueTypeModel.UINT31),
-    EVAL(ValueTypeModel.STRING),
-    VISIBLE_LINES(ValueTypeModel.INTEGER),
-    CHARACTER_WIDTH(ValueTypeModel.INTEGER),
-    HORIZONTAL_SCROLL_POSITION(ValueTypeModel.INTEGER),
-    VERTICAL_SCROLL_POSITION(ValueTypeModel.INTEGER),
-    SCROLL_TO(ValueTypeModel.INTEGER),
-    LIMIT(ValueTypeModel.INTEGER),
-    SUGGESTION(ValueTypeModel.STRING),
-    FEATURES(ValueTypeModel.STRING),
-    RELATIVE(ValueTypeModel.BOOLEAN),
-    URL(ValueTypeModel.STRING),
-    WIDGET_TYPE(ValueTypeModel.BYTE),
-    PREVENT_EVENT(ValueTypeModel.INTEGER),
-    STOP_EVENT(ValueTypeModel.INTEGER),
-    BORDER_WIDTH(ValueTypeModel.INTEGER),
-    SPACING(ValueTypeModel.INTEGER),
-    NAME(ValueTypeModel.STRING),
-    FORCE_DOM_ID(ValueTypeModel.NULL),
-    WIDGET_FULL_SIZE(ValueTypeModel.NULL),
-    WINDOW_TITLE(ValueTypeModel.STRING),
-    WINDOW_LOCATION_REPLACE(ValueTypeModel.STRING),
-    RESIZE_BY_X(ValueTypeModel.DOUBLE),
-    RESIZE_BY_Y(ValueTypeModel.DOUBLE),
-    RESIZE_TO_WIDTH(ValueTypeModel.INTEGER),
-    RESIZE_TO_HEIGHT(ValueTypeModel.INTEGER),
-    MOVE_BY_X(ValueTypeModel.DOUBLE),
-    MOVE_BY_Y(ValueTypeModel.DOUBLE),
-    MOVE_TO_X(ValueTypeModel.DOUBLE),
-    MOVE_TO_Y(ValueTypeModel.DOUBLE),
-    PRINT(ValueTypeModel.NULL),
-    RELOAD(ValueTypeModel.NULL),
-    PADDON_CREATION(ValueTypeModel.STRING),
-    PADDON_METHOD(ValueTypeModel.STRING),
-    PADDON_ARGUMENTS(ValueTypeModel.ARRAY),
-    DESTROY(ValueTypeModel.NULL),
-
-    FUNCTION_CREATION(ValueTypeModel.STRING),
-    FUNCTION_ID(ValueTypeModel.UINT31),
-    FUNCTION_ARGS(ValueTypeModel.ARRAY),
-
-    // Old, useless or not used
-    POPUP_GLASS_STYLE_NAME(ValueTypeModel.INTEGER),
-    DISCLOSURE_PANEL_OPEN_IMG(ValueTypeModel.INTEGER),
-    DISCLOSURE_PANEL_CLOSE_IMG(ValueTypeModel.INTEGER),
-    SUGGESTIONS(ValueTypeModel.STRING),
-    DEFAULT_SUGGESTIONS(ValueTypeModel.STRING),
-    TEXTBOX_ID(ValueTypeModel.INTEGER);
-
-    public static final int MAX_VALUE = Short.MAX_VALUE;
-    private static final ServerToClientModel[] VALUES = ServerToClientModel.values();
-
-    private final ValueTypeModel type;
-
-    private ServerToClientModel(final ValueTypeModel size) {
-        this.type = size;
-    }
-
-    public final short getValue() {
-        return (short) ordinal();
-    }
-
-    public final ValueTypeModel getTypeModel() {
-        return type;
-    }
-
-    public static ServerToClientModel fromRawValue(final int rawValue) {
-        return VALUES[rawValue];
-    }
-
-}
+/*
+ * Copyright (c) 2011 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *  Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *  Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.model;
+
+public enum ServerToClientModel {
+
+    ROUNDTRIP_LATENCY(ValueTypeModel.NULL),
+    HEARTBEAT(ValueTypeModel.NULL),
+    HEARTBEAT_PERIOD(ValueTypeModel.INTEGER),
+
+    CREATE_CONTEXT(ValueTypeModel.UINT31),
+    DESTROY_CONTEXT(ValueTypeModel.NULL),
+    END(ValueTypeModel.NULL),
+    OPTION_FORMFIELD_TABULATION(ValueTypeModel.BOOLEAN),
+
+    TYPE_CREATE(ValueTypeModel.UINT31),
+    TYPE_UPDATE(ValueTypeModel.UINT31),
+    TYPE_ADD(ValueTypeModel.UINT31),
+    TYPE_REMOVE(ValueTypeModel.UINT31),
+    TYPE_ADD_HANDLER(ValueTypeModel.UINT31),
+    TYPE_REMOVE_HANDLER(ValueTypeModel.NULL),
+    TYPE_HISTORY(ValueTypeModel.STRING),
+    TYPE_GC(ValueTypeModel.UINT31),
+
+    NATIVE(ValueTypeModel.STRING),
+    DATE(ValueTypeModel.LONG),
+    VALUE(ValueTypeModel.STRING),
+    PARENT_OBJECT_ID(ValueTypeModel.UINT31),
+    PUT_STYLE_KEY(ValueTypeModel.STRING),
+    STYLE_VALUE(ValueTypeModel.STRING),
+    REMOVE_STYLE_KEY(ValueTypeModel.STRING),
+    PUT_PROPERTY_KEY(ValueTypeModel.STRING),
+    PROPERTY_VALUE(ValueTypeModel.STRING),
+    PUT_ATTRIBUTE_KEY(ValueTypeModel.STRING),
+    ATTRIBUTE_VALUE(ValueTypeModel.STRING),
+    REMOVE_ATTRIBUTE_KEY(ValueTypeModel.STRING),
+    ADD_STYLE_NAME(ValueTypeModel.STRING),
+    REMOVE_STYLE_NAME(ValueTypeModel.STRING),
+    HREF(ValueTypeModel.STRING),
+    TEXT(ValueTypeModel.STRING),
+    ATTRIBUTE_LINKED_TO_VALUE(ValueTypeModel.STRING),
+    HTML(ValueTypeModel.STRING),
+    WIDGET_ID(ValueTypeModel.UINT31),
+    WIDGET(ValueTypeModel.NULL),
+    VALUE_CHECKBOX(ValueTypeModel.BYTE),
+    WORD_WRAP(ValueTypeModel.BOOLEAN),
+    CLEAR(ValueTypeModel.NULL),
+    CLEAR_ROW(ValueTypeModel.INTEGER),
+    INSERT_ROW(ValueTypeModel.INTEGER),
+    CELL_PADDING(ValueTypeModel.INTEGER),
+    CELL_SPACING(ValueTypeModel.INTEGER),
+    HORIZONTAL_ALIGNMENT(ValueTypeModel.BYTE),
+    WIDGET_HORIZONTAL_ALIGNMENT(ValueTypeModel.BYTE),
+    VERTICAL(ValueTypeModel.BOOLEAN),
+    VERTICAL_ALIGNMENT(ValueTypeModel.BYTE),
+    WIDGET_VERTICAL_ALIGNMENT(ValueTypeModel.BYTE),
+    WIDGET_HIDDEN(ValueTypeModel.BOOLEAN),
+    LEFT(ValueTypeModel.DOUBLE),
+    RIGHT(ValueTypeModel.DOUBLE),
+    WIDTH(ValueTypeModel.DOUBLE),
+    TOP(ValueTypeModel.DOUBLE),
+    BOTTOM(ValueTypeModel.DOUBLE),
+    HEIGHT(ValueTypeModel.DOUBLE),
+    UNIT(ValueTypeModel.BYTE),
+    ANIMATE(ValueTypeModel.INTEGER),
+    ANIMATION_DURATION(ValueTypeModel.INTEGER),
+    OPEN(ValueTypeModel.NULL),
+    CLOSE(ValueTypeModel.NULL),
+    BIND(ValueTypeModel.STRING),
+    CELL_HEIGHT(ValueTypeModel.STRING),
+    CELL_WIDTH(ValueTypeModel.STRING),
+    INDEX(ValueTypeModel.INTEGER),
+    ADD_COOKIE(ValueTypeModel.STRING),
+    REMOVE_COOKIE(ValueTypeModel.STRING),
+    COOKIE_EXPIRE(ValueTypeModel.LONG),
+    COOKIE_DOMAIN(ValueTypeModel.STRING),
+    COOKIE_PATH(ValueTypeModel.STRING),
+    COOKIE_SECURE(ValueTypeModel.NULL),
+    TIME(ValueTypeModel.LONG),
+    ANIMATION(ValueTypeModel.BOOLEAN),
+    CURSOR_POSITION(ValueTypeModel.INTEGER),
+    SELECTION_RANGE_START(ValueTypeModel.INTEGER),
+    SELECTION_RANGE_LENGTH(ValueTypeModel.INTEGER),
+    MAX_LENGTH(ValueTypeModel.INTEGER),
+    VISIBLE_LENGTH(ValueTypeModel.INTEGER),
+    REGEX_FILTER(ValueTypeModel.STRING),
+    MASK(ValueTypeModel.STRING),
+    VISIBILITY(ValueTypeModel.BOOLEAN),
+    REPLACEMENT_STRING(ValueTypeModel.STRING),
+    DATE_FORMAT_PATTERN(ValueTypeModel.STRING),
+    KEEP_DAY_TIME_NEEDED(ValueTypeModel.NULL),
+    TAG(ValueTypeModel.STRING),
+    PICKER(ValueTypeModel.INTEGER),
+    ROW(ValueTypeModel.INTEGER),
+    ROW_FORMATTER_ADD_STYLE_NAME(ValueTypeModel.STRING),
+    ROW_FORMATTER_REMOVE_STYLE_NAME(ValueTypeModel.STRING),
+    ROW_FORMATTER_SET_STYLE_NAME(ValueTypeModel.STRING),
+    ROW_FORMATTER_SHOW_ROW(ValueTypeModel.INTEGER),
+    ROW_FORMATTER_HIDE_ROW(ValueTypeModel.INTEGER),
+    COLUMN(ValueTypeModel.INTEGER),
+    CELL_FORMATTER_ADD_STYLE_NAME(ValueTypeModel.STRING),
+    CELL_FORMATTER_REMOVE_STYLE_NAME(ValueTypeModel.STRING),
+    CELL_FORMATTER_SET_STYLE_NAME(ValueTypeModel.STRING),
+    COLUMN_FORMATTER_COLUMN_WIDTH(ValueTypeModel.STRING),
+    COLUMN_FORMATTER_ADD_STYLE_NAME(ValueTypeModel.STRING),
+    COLUMN_FORMATTER_REMOVE_STYLE_NAME(ValueTypeModel.STRING),
+    COLUMN_FORMATTER_SET_STYLE_NAME(ValueTypeModel.STRING),
+    PLACEHOLDER(ValueTypeModel.STRING),
+    DATE_ENABLED(ValueTypeModel.ARRAY),
+    ENABLED(ValueTypeModel.BOOLEAN),
+    STYLE_NAME(ValueTypeModel.STRING),
+    ADD_DATE_STYLE(ValueTypeModel.ARRAY),
+    REMOVE_DATE_STYLE(ValueTypeModel.ARRAY),
+    YEAR_ARROWS_VISIBLE(ValueTypeModel.BOOLEAN),
+    POPUP_CAPTION(ValueTypeModel.STRING),
+    WIDGET_VISIBLE(ValueTypeModel.BOOLEAN),
+    IMAGE_WIDTH(ValueTypeModel.INTEGER),
+    IMAGE_HEIGHT(ValueTypeModel.INTEGER),
+    WIDGET_WIDTH(ValueTypeModel.STRING),
+    WIDGET_HEIGHT(ValueTypeModel.STRING),
+    WIDGET_TITLE(ValueTypeModel.STRING),
+    ENSURE_DEBUG_ID(ValueTypeModel.STRING),
+    ITEM_INSERTED(ValueTypeModel.STRING),
+    ITEM_UPDATED(ValueTypeModel.STRING),
+    ITEM_REMOVED(ValueTypeModel.INTEGER),
+    SELECTED(ValueTypeModel.BOOLEAN),
+    SELECTED_INDEX(ValueTypeModel.INTEGER),
+    MULTISELECT(ValueTypeModel.BOOLEAN),
+    VISIBLE_ITEM_COUNT(ValueTypeModel.INTEGER),
+    ITEM_ADD(ValueTypeModel.ARRAY),
+    ITEM_GROUP(ValueTypeModel.STRING),
+    POPUP_AUTO_HIDE(ValueTypeModel.BOOLEAN),
+    MODAL(ValueTypeModel.BOOLEAN),
+    POPUP_GLASS_ENABLED(ValueTypeModel.BOOLEAN),
+    DRAGGABLE(ValueTypeModel.BOOLEAN),
+    CENTER(ValueTypeModel.NULL),
+    POSITION_LEFT(ValueTypeModel.INTEGER),
+    POSITION_TOP(ValueTypeModel.INTEGER),
+    FIXDELAY(ValueTypeModel.LONG),
+    MIN_SIZE(ValueTypeModel.INTEGER),
+    SNAP_CLOSED_SIZE(ValueTypeModel.INTEGER),
+    TOGGLE_DISPLAY_ALLOWED(ValueTypeModel.BOOLEAN),
+    IMAGE_URL(ValueTypeModel.STRING),
+    INSERT_HORIZONTAL_RULE(ValueTypeModel.NULL),
+    INSERT_HTML(ValueTypeModel.STRING),
+    ORDERED(ValueTypeModel.NULL),
+    UNORDERED(ValueTypeModel.NULL),
+    BACK_COLOR(ValueTypeModel.STRING),
+    FONT_NAME(ValueTypeModel.STRING),
+    FONT_SIZE(ValueTypeModel.BYTE),
+    FONT_COLOR(ValueTypeModel.STRING),
+    JUSTIFICATION(ValueTypeModel.BYTE),
+    TOGGLE_BOLD(ValueTypeModel.NULL),
+    TOGGLE_ITALIC(ValueTypeModel.NULL),
+    TOGGLE_SUBSCRIPT(ValueTypeModel.NULL),
+    TOGGLE_UNDERLINE(ValueTypeModel.NULL),
+    LEFT_INDENT(ValueTypeModel.NULL),
+    REDO(ValueTypeModel.NULL),
+    REMOVE_FORMAT(ValueTypeModel.NULL),
+    REMOVE_LINK(ValueTypeModel.NULL),
+    TOGGLE_RIGHT_INDENT(ValueTypeModel.NULL),
+    SELECT_ALL(ValueTypeModel.NULL),
+    COMMAND_ID(ValueTypeModel.LONG),
+    ORACLE(ValueTypeModel.INTEGER),
+    STREAM_REQUEST_ID(ValueTypeModel.INTEGER),
+    TREE_ROOT(ValueTypeModel.INTEGER),
+    FACTORY(ValueTypeModel.STRING),
+    DIRECTION(ValueTypeModel.BYTE),
+    SIZE(ValueTypeModel.DOUBLE),
+    WIDGET_SIZE(ValueTypeModel.DOUBLE),
+    RESIZE(ValueTypeModel.NULL),
+    BEFORE_INDEX(ValueTypeModel.INTEGER),
+    TAB_WIDGET(ValueTypeModel.INTEGER),
+    TAB_TEXT(ValueTypeModel.STRING),
+    ENABLED_ON_REQUEST(ValueTypeModel.BOOLEAN),
+    TABINDEX(ValueTypeModel.INTEGER),
+    END_OF_PROCESSING(ValueTypeModel.NULL),
+    FOCUS(ValueTypeModel.BOOLEAN),
+    FOCUS_PREVENT_SCROLL(ValueTypeModel.NULL),
+    HANDLER_TYPE(ValueTypeModel.BYTE),
+    HISTORY_FIRE_EVENTS(ValueTypeModel.BOOLEAN),
+    LOADING_ON_REQUEST(ValueTypeModel.BOOLEAN),
+    SET_COL_SPAN(ValueTypeModel.INTEGER),
+    SET_ROW_SPAN(ValueTypeModel.INTEGER),
+    KEY_FILTER(ValueTypeModel.ARRAY),
+    POPUP_POSITION_AND_SHOW(ValueTypeModel.NULL),
+    ROOT_ID(ValueTypeModel.STRING),
+    WINDOW_ID(ValueTypeModel.UINT31),
+    FRAME_ID(ValueTypeModel.UINT31),
+    EVAL(ValueTypeModel.STRING),
+    VISIBLE_LINES(ValueTypeModel.INTEGER),
+    CHARACTER_WIDTH(ValueTypeModel.INTEGER),
+    HORIZONTAL_SCROLL_POSITION(ValueTypeModel.INTEGER),
+    VERTICAL_SCROLL_POSITION(ValueTypeModel.INTEGER),
+    SCROLL_TO(ValueTypeModel.INTEGER),
+    LIMIT(ValueTypeModel.INTEGER),
+    SUGGESTION(ValueTypeModel.STRING),
+    FEATURES(ValueTypeModel.STRING),
+    RELATIVE(ValueTypeModel.BOOLEAN),
+    URL(ValueTypeModel.STRING),
+    WIDGET_TYPE(ValueTypeModel.BYTE),
+    PREVENT_EVENT(ValueTypeModel.INTEGER),
+    STOP_EVENT(ValueTypeModel.INTEGER),
+    BORDER_WIDTH(ValueTypeModel.INTEGER),
+    SPACING(ValueTypeModel.INTEGER),
+    NAME(ValueTypeModel.STRING),
+    FORCE_DOM_ID(ValueTypeModel.NULL),
+    WIDGET_FULL_SIZE(ValueTypeModel.NULL),
+    WINDOW_TITLE(ValueTypeModel.STRING),
+    WINDOW_LOCATION_REPLACE(ValueTypeModel.STRING),
+    RESIZE_BY_X(ValueTypeModel.DOUBLE),
+    RESIZE_BY_Y(ValueTypeModel.DOUBLE),
+    RESIZE_TO_WIDTH(ValueTypeModel.INTEGER),
+    RESIZE_TO_HEIGHT(ValueTypeModel.INTEGER),
+    MOVE_BY_X(ValueTypeModel.DOUBLE),
+    MOVE_BY_Y(ValueTypeModel.DOUBLE),
+    MOVE_TO_X(ValueTypeModel.DOUBLE),
+    MOVE_TO_Y(ValueTypeModel.DOUBLE),
+    PRINT(ValueTypeModel.NULL),
+    RELOAD(ValueTypeModel.NULL),
+    PADDON_CREATION(ValueTypeModel.STRING),
+    PADDON_METHOD(ValueTypeModel.STRING),
+    PADDON_ARGUMENTS(ValueTypeModel.ARRAY),
+    DESTROY(ValueTypeModel.NULL),
+
+    FUNCTION_CREATION(ValueTypeModel.STRING),
+    FUNCTION_ID(ValueTypeModel.UINT31),
+    FUNCTION_ARGS(ValueTypeModel.ARRAY),
+
+    // Old, useless or not used
+    POPUP_GLASS_STYLE_NAME(ValueTypeModel.INTEGER),
+    DISCLOSURE_PANEL_OPEN_IMG(ValueTypeModel.INTEGER),
+    DISCLOSURE_PANEL_CLOSE_IMG(ValueTypeModel.INTEGER),
+    SUGGESTIONS(ValueTypeModel.STRING),
+    DEFAULT_SUGGESTIONS(ValueTypeModel.STRING),
+    TEXTBOX_ID(ValueTypeModel.INTEGER);
+
+    public static final int MAX_VALUE = Short.MAX_VALUE;
+    private static final ServerToClientModel[] VALUES = ServerToClientModel.values();
+
+    private final ValueTypeModel type;
+
+    private ServerToClientModel(final ValueTypeModel size) {
+        this.type = size;
+    }
+
+    public final short getValue() {
+        return (short) ordinal();
+    }
+
+    public final ValueTypeModel getTypeModel() {
+        return type;
+    }
+
+    public static ServerToClientModel fromRawValue(final int rawValue) {
+        return VALUES[rawValue];
+    }
+
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/model/ValueTypeModel.java b/ponysdk/src/main/java/com/ponysdk/core/model/ValueTypeModel.java
index c3c46444..cf94b7e4 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/model/ValueTypeModel.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/model/ValueTypeModel.java
@@ -52,9 +52,9 @@ public enum ValueTypeModel {
     public static final short STRING_UTF8_INT32 = 255;
     public static final short STRING_UTF8_UINT16 = 254;
     public static final short STRING_UTF8_UINT8 = 253;
-    public static final short STRING_ASCII_UINT8 = 250;
+    public static final short STRING_ASCII_INT32 = 252;
     public static final short STRING_ASCII_UINT16 = 251;
-    public static final short STRING_ASCII_UINT32 = 252;
+    public static final short STRING_ASCII_UINT8_MAX_LENGTH = 250;
 
     private static final ValueTypeModel[] VALUES = ValueTypeModel.values();
 
diff --git a/ponysdk/src/main/java/com/ponysdk/core/server/application/Application.java b/ponysdk/src/main/java/com/ponysdk/core/server/application/Application.java
index 5934c9f8..50c62dbd 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/server/application/Application.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/server/application/Application.java
@@ -23,15 +23,17 @@
 
 package com.ponysdk.core.server.application;
 
-import com.ponysdk.core.server.servlet.SessionManager;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import javax.servlet.http.HttpSession;
 import java.util.Collection;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 
+import javax.servlet.http.HttpSession;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.ponysdk.core.server.servlet.SessionManager;
+
 /**
  * Wrapper of the HTTPSession, and contains the UIContexts.
  */
@@ -60,12 +62,9 @@ public class Application {
     }
 
     public void deregisterUIContext(final int uiContextID) {
-        if (uiContexts.remove(uiContextID) != null && uiContexts.isEmpty()) {
-            try {
-                session.invalidate();
-            } catch (final IllegalStateException e) {
-                log.warn("Issue when unregistering UIContext #{} : Session {} already invalidated", uiContextID, session.getId());
-            }
+        uiContexts.remove(uiContextID);
+        if (uiContexts.isEmpty()) {
+            session.invalidate();
             SessionManager.get().unregisterApplication(this);
         }
     }
diff --git a/ponysdk/src/main/java/com/ponysdk/core/server/application/ApplicationConfiguration.java b/ponysdk/src/main/java/com/ponysdk/core/server/application/ApplicationConfiguration.java
index 63b94200..4fe8c931 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/server/application/ApplicationConfiguration.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/server/application/ApplicationConfiguration.java
@@ -45,7 +45,6 @@ public class ApplicationConfiguration {
     private String applicationContextName = "sample";
     private long heartBeatPeriod = 5000;// ms
     private TimeUnit heartBeatPeriodTimeUnit = TimeUnit.MILLISECONDS;
-    private boolean enableClientToServerHeartBeat = true;
 
     private int sessionTimeout = 15; // minutes
 
@@ -185,18 +184,4 @@ public class ApplicationConfiguration {
         return "ApplicationManagerOption [heartBeatPeriod=" + heartBeatPeriod + " " + heartBeatPeriodTimeUnit + "]";
     }
 
-    /**
-     * @return the enableClientToServerHeartBeat
-     */
-    public boolean isEnableClientToServerHeartBeat() {
-        return enableClientToServerHeartBeat;
-    }
-
-    /**
-     * @param enableClientToServerHeartBeat the enableClientToServerHeartBeat to set
-     */
-    public void setEnableClientToServerHeartBeat(final boolean enableClientToServerHeartBeat) {
-        this.enableClientToServerHeartBeat = enableClientToServerHeartBeat;
-    }
-
 }
diff --git a/ponysdk/src/main/java/com/ponysdk/core/server/application/UIContext.java b/ponysdk/src/main/java/com/ponysdk/core/server/application/UIContext.java
index 4b18c79f..5e9ff2c5 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/server/application/UIContext.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/server/application/UIContext.java
@@ -23,6 +23,29 @@
 
 package com.ponysdk.core.server.application;
 
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.locks.ReentrantLock;
+
+import javax.json.JsonNumber;
+import javax.json.JsonObject;
+import javax.json.JsonString;
+import javax.json.JsonValue;
+import javax.json.JsonValue.ValueType;
+import javax.json.spi.JsonProvider;
+import javax.servlet.http.HttpSession;
+
+import org.eclipse.jetty.websocket.servlet.ServletUpgradeRequest;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.ponysdk.core.model.ClientToServerModel;
 import com.ponysdk.core.model.HandlerModel;
 import com.ponysdk.core.model.ServerToClientModel;
@@ -35,25 +58,15 @@ import com.ponysdk.core.ui.basic.PCookies;
 import com.ponysdk.core.ui.basic.PHistory;
 import com.ponysdk.core.ui.basic.PObject;
 import com.ponysdk.core.ui.basic.PWindow;
-import com.ponysdk.core.ui.eventbus.*;
+import com.ponysdk.core.ui.eventbus.BroadcastEventHandler;
+import com.ponysdk.core.ui.eventbus.Event;
+import com.ponysdk.core.ui.eventbus.EventHandler;
+import com.ponysdk.core.ui.eventbus.EventSource;
+import com.ponysdk.core.ui.eventbus.HandlerRegistration;
+import com.ponysdk.core.ui.eventbus.StreamHandler;
 import com.ponysdk.core.ui.statistic.TerminalDataReceiver;
 import com.ponysdk.core.useragent.UserAgent;
 import com.ponysdk.core.writer.ModelWriter;
-import org.eclipse.jetty.websocket.servlet.ServletUpgradeRequest;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import javax.json.JsonNumber;
-import javax.json.JsonObject;
-import javax.json.JsonString;
-import javax.json.JsonValue;
-import javax.json.JsonValue.ValueType;
-import javax.json.spi.JsonProvider;
-import javax.servlet.http.HttpSession;
-import java.util.*;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.atomic.AtomicInteger;
-import java.util.concurrent.locks.ReentrantLock;
 
 /**
  * <p>
@@ -115,7 +128,7 @@ public class UIContext {
     private final ModelWriter modelWriter;
 
     public UIContext(final WebSocket socket, final TxnContext context, final ApplicationConfiguration configuration,
-                     final ServletUpgradeRequest request) {
+            final ServletUpgradeRequest request) {
         this.ID = uiContextCount.incrementAndGet();
         this.socket = socket;
         this.configuration = configuration;
@@ -161,7 +174,7 @@ public class UIContext {
     /**
      * Adds {@link EventHandler} to the {@link com.ponysdk.core.ui.eventbus.EventBus}
      *
-     * @param type    the event type
+     * @param type the event type
      * @param handler the event handler
      * @return the HandlerRegistration in order to remove the EventHandler
      * @see #fireEvent(Event)
@@ -192,7 +205,7 @@ public class UIContext {
     /**
      * Removes {@link EventHandler} from the {@link com.ponysdk.core.ui.eventbus.EventBus}
      *
-     * @param type    the event type
+     * @param type the event type
      * @param handler the event handler
      * @see #addHandler(com.ponysdk.core.ui.eventbus.Event.Type, EventHandler)
      */
@@ -204,7 +217,7 @@ public class UIContext {
      * Fires an {@link Event} on the {@link com.ponysdk.core.ui.eventbus.EventBus} with a specific source
      * Only {@link EventHandler}s added before fires event will be stimulated
      *
-     * @param event  the fired event
+     * @param event the fired event
      * @param source the source
      */
     public static void fireEventFromSource(final Event<? extends EventHandler> event, final EventSource source) {
@@ -267,7 +280,6 @@ public class UIContext {
      * Adds a {@link DataListener} to the UIContext
      *
      * @param listener the data listener
-     * @return {@code true} if this set did not already contain the specified element
      */
     public boolean addDataListener(final DataListener listener) {
         return listeners.add(listener);
@@ -277,7 +289,6 @@ public class UIContext {
      * Removes the {@link DataListener} from UIContext
      *
      * @param listener the data listener
-     * @return {@code true} if this set contained the specified element
      */
     public boolean removeDataListener(final DataListener listener) {
         return listeners.remove(listener);
@@ -285,6 +296,7 @@ public class UIContext {
 
     /**
      * Executes a {@link Runnable} that represents a task in a graphical context
+     * <p>
      * This method locks the UIContext
      *
      * @param runnable the tasks
@@ -386,7 +398,7 @@ public class UIContext {
 
                     if (jsonObject.containsKey(ClientToServerModel.PARENT_OBJECT_ID.toStringValue())) {
                         final int parentObjectID = jsonObject.getJsonNumber(ClientToServerModel.PARENT_OBJECT_ID.toStringValue())
-                                .intValue();
+                            .intValue();
                         final PObject gcObject = getObject(parentObjectID);
                         if (log.isWarnEnabled()) log.warn(String.valueOf(gcObject));
                     }
@@ -469,7 +481,6 @@ public class UIContext {
      * Registers a {@link StreamHandler} that will be called on the terminal side
      *
      * @param streamListener the stream handler
-     * @param window         Window target
      */
     public void stackStreamRequest(final StreamHandler streamListener, final PWindow window) {
         final int streamRequestID = nextStreamRequestID();
@@ -489,7 +500,7 @@ public class UIContext {
      * Registers a {@link StreamHandler} that will be called on a specific {@link com.ponysdk.core.terminal.ui.PTObject}
      *
      * @param streamListener the stream handler
-     * @param pObject        the {@link PObject}
+     * @param pObject the {@link PObject}
      */
     public void stackEmbeddedStreamRequest(final StreamHandler streamListener, final PObject pObject) {
         final int streamRequestID = nextStreamRequestID();
@@ -540,7 +551,7 @@ public class UIContext {
      * <p>
      * If the value passed in is null, this has the same effect as calling {@link #removeAttribute(String)}.
      *
-     * @param name  the name to which the object is bound; cannot be null
+     * @param name the name to which the object is bound; cannot be null
      * @param value the object to be bound
      */
     public void setAttribute(final String name, final Object value) {
@@ -576,38 +587,26 @@ public class UIContext {
      * This method locks the UIContext
      */
     public void onDestroy() {
-        //we used to avoid calling socket.close() there, but sometimes jetty does not close the WS
-        //when there is an exception in a listener => always call close since it is a no-op on a closed WS
-        destroy();
-    }
-
-    /**
-     * Destroys the current UIContext when the {@link Application} is destroyed
-     * <p>
-     * This method locks the UIContext
-     */
-    void destroyFromApplication() {
         if (!isAlive()) return;
         acquire();
         try {
             doDestroy();
-            socket.close();
+            context.deregisterUIContext(ID);
         } finally {
             release();
         }
     }
 
     /**
-     * Destroys the UIContext
+     * Destroys the current UIContext when the {@link Application} is destroyed
      * <p>
      * This method locks the UIContext
      */
-    public void destroy() {
+    void destroyFromApplication() {
         if (!isAlive()) return;
         acquire();
         try {
             doDestroy();
-            context.deregisterUIContext(ID);
             socket.close();
         } finally {
             release();
@@ -615,17 +614,17 @@ public class UIContext {
     }
 
     /**
-     * Disconnects and destroys the UIContext
+     * Destroys the UIContext
      * <p>
      * This method locks the UIContext
      */
-    public void disconnect() {
+    public void destroy() {
         if (!isAlive()) return;
         acquire();
         try {
             doDestroy();
             context.deregisterUIContext(ID);
-            socket.disconnect();
+            socket.close();
         } finally {
             release();
         }
@@ -693,9 +692,9 @@ public class UIContext {
     }
 
     /**
-     * Gets the {@link ApplicationConfiguration} of the UIContext
+     * Gets the {@link ApplicationManagerOption} of the UIContext
      *
-     * @return The configuration
+     * @return The ApplicationManagerOption
      */
     public ApplicationConfiguration getConfiguration() {
         return configuration;
diff --git a/ponysdk/src/main/java/com/ponysdk/core/server/concurrent/AutoFlushedBuffer.java b/ponysdk/src/main/java/com/ponysdk/core/server/concurrent/AutoFlushedBuffer.java
index 0d58c3ed..662fe37b 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/server/concurrent/AutoFlushedBuffer.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/server/concurrent/AutoFlushedBuffer.java
@@ -54,14 +54,13 @@ public abstract class AutoFlushedBuffer implements Closeable {
      * {@link AutoFlushedBuffer#onFlushCompletion() onFlushCompletion} or
      * {@link AutoFlushedBuffer#onFlushFailure(Exception) onFlushFailed} afterwards.
      *
-     * @param bufferToFlush a ready to read {@link ByteBuffer} that contains the data to flush.
+     * @param bufferToFlush
+     *            a ready to read {@link ByteBuffer} that contains the data to flush.
      */
     protected abstract void doFlush(ByteBuffer bufferToFlush);
 
     /**
      * Release resources associated to the flushing mechanism. Will be called at most once.
-     *
-     * @throws IOException
      */
     protected abstract void closeFlusher() throws IOException;
 
@@ -109,21 +108,27 @@ public abstract class AutoFlushedBuffer implements Closeable {
     }
 
     /**
-     * @param bufferSize                 the size of the underlying buffer to allocate. Must be a power of 2 and greater
-     *                                   than 32
-     * @param useDirectBuffer            should the underlying buffer be allocated off heap. Should be true if there are
-     *                                   real IO operations underneath, can be false for debugging purpose
-     * @param maxChunkSize               the maximum size of pending data before triggering a flush automatically, must be
-     *                                   between 8 and {@code bufferSize / 4}
-     * @param urgentMessageReservedRatio used by {@link AutoFlushedBuffer#shouldOnlyWriteUrgentMessages()
-     *                                   shouldOnlyWriteUrgentMessages}.
-     *                                   If the free space ratio in the buffer is less than this value, that method should
-     *                                   returns {@code true}
-     * @param timeoutMillis              the timeout period in millisecond. If write to the buffer are blocked for longer
-     *                                   than this, it will be automatically closed
+     *
+     * @param bufferSize
+     *            the size of the underlying buffer to allocate. Must be a power of 2 and greater
+     *            than 32
+     * @param useDirectBuffer
+     *            should the underlying buffer be allocated off heap. Should be true if there are
+     *            real IO operations underneath, can be false for debugging purpose
+     * @param maxChunkSize
+     *            the maximum size of pending data before triggering a flush automatically, must be
+     *            between 8 and {@code bufferSize / 4}
+     * @param urgentMessageReservedRatio
+     *            used by {@link AutoFlushedBuffer#shouldOnlyWriteUrgentMessages()
+     *            shouldOnlyWriteUrgentMessages}.
+     *            If the free space ratio in the buffer is less than this value, that method should
+     *            returns {@code true}
+     * @param timeoutMillis
+     *            the timeout period in millisecond. If write to the buffer are blocked for longer
+     *            than this, it will be automatically closed
      */
     protected AutoFlushedBuffer(final int bufferSize, final boolean useDirectBuffer, final int maxChunkSize,
-                                final float urgentMessageReservedRatio, final long timeoutMillis) {
+            final float urgentMessageReservedRatio, final long timeoutMillis) {
         if ((bufferSize & bufferSize - 1) != 0) {
             throw new IllegalArgumentException("bufferSize must be a power of 2");
         }
@@ -145,11 +150,14 @@ public abstract class AutoFlushedBuffer implements Closeable {
      * Writes a {@code byte} in the buffer. This method may block up to the configured timeout
      * period if the buffer is already full
      *
-     * @param b the byte to write
+     * @param b
+     *            the byte to write
      * @return this buffer
-     * @throws InterruptedIOException if the current thread is interrupted
-     * @throws IOException            if a timeout occurs or this buffer is already closed or the underlying flushing
-     *                                mechanism reported an issue
+     * @throws InterruptedIOException
+     *             if the current thread is interrupted
+     * @throws IOException
+     *             if a timeout occurs or this buffer is already closed or the underlying flushing
+     *             mechanism reported an issue
      */
     public final AutoFlushedBuffer put(final byte b) throws IOException {
         ensureCapacity(1);
@@ -162,11 +170,14 @@ public abstract class AutoFlushedBuffer implements Closeable {
      * Writes a {@code short} in the buffer. This method may block up to the configured timeout
      * period if the buffer is already full
      *
-     * @param s the short to write
+     * @param s
+     *            the short to write
      * @return this buffer
-     * @throws InterruptedIOException if the current thread is interrupted
-     * @throws IOException            if a timeout occurs or this buffer is already closed or the underlying flushing
-     *                                mechanism reported an issue
+     * @throws InterruptedIOException
+     *             if the current thread is interrupted
+     * @throws IOException
+     *             if a timeout occurs or this buffer is already closed or the underlying flushing
+     *             mechanism reported an issue
      */
     public final AutoFlushedBuffer putShort(final short s) throws IOException {
         ensureCapacity(2);
@@ -179,11 +190,14 @@ public abstract class AutoFlushedBuffer implements Closeable {
      * Writes an {@code int} in the buffer. This method may block up to the configured timeout
      * period if the buffer is already full
      *
-     * @param i the int to write
+     * @param i
+     *            the int to write
      * @return this buffer
-     * @throws InterruptedIOException if the current thread is interrupted
-     * @throws IOException            if a timeout occurs or this buffer is already closed or the underlying flushing
-     *                                mechanism reported an issue
+     * @throws InterruptedIOException
+     *             if the current thread is interrupted
+     * @throws IOException
+     *             if a timeout occurs or this buffer is already closed or the underlying flushing
+     *             mechanism reported an issue
      */
     public final AutoFlushedBuffer putInt(final int i) throws IOException {
         ensureCapacity(4);
@@ -196,11 +210,14 @@ public abstract class AutoFlushedBuffer implements Closeable {
      * Writes a {@code long} in the buffer. This method may block up to the configured timeout
      * period if the buffer is already full
      *
-     * @param l the long to write
+     * @param l
+     *            the long to write
      * @return this buffer
-     * @throws InterruptedIOException if the current thread is interrupted
-     * @throws IOException            if a timeout occurs or this buffer is already closed or the underlying flushing
-     *                                mechanism reported an issue
+     * @throws InterruptedIOException
+     *             if the current thread is interrupted
+     * @throws IOException
+     *             if a timeout occurs or this buffer is already closed or the underlying flushing
+     *             mechanism reported an issue
      */
     public final AutoFlushedBuffer putLong(final long l) throws IOException {
         ensureCapacity(8);
@@ -213,11 +230,14 @@ public abstract class AutoFlushedBuffer implements Closeable {
      * Writes a {@code char} in the buffer. This method may block up to the configured timeout
      * period if the buffer is already full
      *
-     * @param c the char to write
+     * @param c
+     *            the char to write
      * @return this buffer
-     * @throws InterruptedIOException if the current thread is interrupted
-     * @throws IOException            if a timeout occurs or this buffer is already closed or the underlying flushing
-     *                                mechanism reported an issue
+     * @throws InterruptedIOException
+     *             if the current thread is interrupted
+     * @throws IOException
+     *             if a timeout occurs or this buffer is already closed or the underlying flushing
+     *             mechanism reported an issue
      */
     public final AutoFlushedBuffer putChar(final char c) throws IOException {
         ensureCapacity(2);
@@ -230,11 +250,14 @@ public abstract class AutoFlushedBuffer implements Closeable {
      * Writes a {@code float} in the buffer. This method may block up to the configured timeout
      * period if the buffer is already full
      *
-     * @param f the float to write
+     * @param f
+     *            the float to write
      * @return this buffer
-     * @throws InterruptedIOException if the current thread is interrupted
-     * @throws IOException            if a timeout occurs or this buffer is already closed or the underlying flushing
-     *                                mechanism reported an issue
+     * @throws InterruptedIOException
+     *             if the current thread is interrupted
+     * @throws IOException
+     *             if a timeout occurs or this buffer is already closed or the underlying flushing
+     *             mechanism reported an issue
      */
     public final AutoFlushedBuffer putFloat(final float f) throws IOException {
         ensureCapacity(4);
@@ -247,11 +270,14 @@ public abstract class AutoFlushedBuffer implements Closeable {
      * Writes a {@code double} in the buffer. This method may block up to the configured timeout
      * period if the buffer is already full
      *
-     * @param d the double to write
+     * @param d
+     *            the double to write
      * @return this buffer
-     * @throws InterruptedIOException if the current thread is interrupted
-     * @throws IOException            if a timeout occurs or this buffer is already closed or the underlying flushing
-     *                                mechanism reported an issue
+     * @throws InterruptedIOException
+     *             if the current thread is interrupted
+     * @throws IOException
+     *             if a timeout occurs or this buffer is already closed or the underlying flushing
+     *             mechanism reported an issue
      */
     public final AutoFlushedBuffer putDouble(final double d) throws IOException {
         ensureCapacity(8);
@@ -269,11 +295,14 @@ public abstract class AutoFlushedBuffer implements Closeable {
      * put(bytes, 0, bytes.length)
      * </pre>
      *
-     * @param bytes the byte array to write
+     * @param bytes
+     *            the byte array to write
      * @return this buffer
-     * @throws InterruptedIOException if the current thread is interrupted
-     * @throws IOException            if a timeout occurs or this buffer is already closed or the underlying flushing
-     *                                mechanism reported an issue
+     * @throws InterruptedIOException
+     *             if the current thread is interrupted
+     * @throws IOException
+     *             if a timeout occurs or this buffer is already closed or the underlying flushing
+     *             mechanism reported an issue
      */
     public final AutoFlushedBuffer put(final byte[] bytes) throws IOException {
         return put(bytes, 0, bytes.length);
@@ -283,17 +312,23 @@ public abstract class AutoFlushedBuffer implements Closeable {
      * Writes a part of a {@code byte} array in the buffer. This method may block up to the
      * configured timeout period if the buffer is already full.
      *
-     * @param bytes  the byte array to write
-     * @param offset the offset within the array of the first byte to write;
-     *               must be non-negative and no larger than bytes.length
-     * @param length the number of bytes to write;
-     *               must be non-negative and no larger than bytes.length - offset
+     * @param bytes
+     *            the byte array to write
+     * @param offset
+     *            the offset within the array of the first byte to write;
+     *            must be non-negative and no larger than <tt>bytes.length</tt>
+     * @param length
+     *            the number of bytes to write;
+     *            must be non-negative and no larger than <tt>bytes.length - offset</tt>
      * @return this buffer
-     * @throws IndexOutOfBoundsException if the preconditions on the offset and length parameters do not
-     *                                   hold
-     * @throws InterruptedIOException    if the current thread is interrupted
-     * @throws IOException               if a timeout occurs or this buffer is already closed or the underlying flushing
-     *                                   mechanism reported an issue
+     * @throws IndexOutOfBoundsException
+     *             if the preconditions on the <tt>offset</tt> and <tt>length</tt> parameters do not
+     *             hold
+     * @throws InterruptedIOException
+     *             if the current thread is interrupted
+     * @throws IOException
+     *             if a timeout occurs or this buffer is already closed or the underlying flushing
+     *             mechanism reported an issue
      */
     public final AutoFlushedBuffer put(final byte[] bytes, int offset, int length) throws IOException {
         while (length > 0) {
@@ -331,7 +366,8 @@ public abstract class AutoFlushedBuffer implements Closeable {
      * Trigger an asynchronous flush. This method does not block. If there is already a flush in
      * progress, the actual flush will occurs on current flush completion.
      *
-     * @throws IOException if already closed or if the flushing logic already reported an issue
+     * @throws IOException
+     *             if already closed or if the flushing logic already reported an issue
      */
     public void flush() throws IOException {
         checkLiveness();
@@ -357,7 +393,7 @@ public abstract class AutoFlushedBuffer implements Closeable {
     /**
      * Tells whether or not this buffer is closed.
      *
-     * @return true if, and only if, this buffer is closed
+     * @return <tt>true</tt> if, and only if, this buffer is closed
      */
     public final boolean isClosed() {
         return closed;
@@ -366,7 +402,7 @@ public abstract class AutoFlushedBuffer implements Closeable {
     /**
      * Callback that should be called by the flushing logic when it successfully flushed the data.
      * We expect that {@code flushBuffer.limit()} has not been modified by the flushing logic and
-     * {@code flushBuffer.hasRemaining()} to return false.
+     * {@code flushBuffer.hasRemaining()} to return <tt>false</tt>.
      *
      * @see AutoFlushedBuffer#doFlush(ByteBuffer)
      */
diff --git a/ponysdk/src/main/java/com/ponysdk/core/server/concurrent/ScheduledTaskHandler.java b/ponysdk/src/main/java/com/ponysdk/core/server/concurrent/ScheduledTaskHandler.java
index e2af58b3..49aa8a8f 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/server/concurrent/ScheduledTaskHandler.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/server/concurrent/ScheduledTaskHandler.java
@@ -7,10 +7,12 @@ import java.util.concurrent.ScheduledFuture;
  * A wrapper around the ScheduledFuture owned by the Scheduler internal
  * executor.<br>
  * This wrapper only allows cancelling a future or periodic task.<br>
- * This wrapper use weak reference to make sure that the task
+ *
+ * @implNote this wrapper use weak reference to make sure that the task
  * submitted to the executor cannot be source of a memory leak once the task is
  * executed or cancelled
  * @author amaire
+ *
  */
 
 public class ScheduledTaskHandler {
diff --git a/ponysdk/src/main/java/com/ponysdk/core/server/concurrent/SchedulingContext.java b/ponysdk/src/main/java/com/ponysdk/core/server/concurrent/SchedulingContext.java
index 05c1f5d6..b8ee4bc5 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/server/concurrent/SchedulingContext.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/server/concurrent/SchedulingContext.java
@@ -69,7 +69,7 @@ public interface SchedulingContext {
 	 * the one that has been denied execution for the longest time will be triggered
 	 * before the others
 	 * 
-	 * @param periodMillis the delay before actually submitting the task
+	 * @param delayMillis the delay before actually submitting the task
 	 * @param task the periodic task to execute
 	 * @return a ScheduledTaskHandler that allow this task to be cancelled
 	 */
@@ -84,7 +84,7 @@ public interface SchedulingContext {
 	 * 
 	 * Wait for the context to shutdown properly up to the specified delay
 	 * 
-	 * @param timeoutInMillis the maximum delay to wait (in millisecond)
+	 * @param timeoutMillis the maximum delay to wait (in millisecond)
 	 * @return true if the context is terminated (no more relative tasks are
 	 * running, queued or scheduled), false otherwise
 	 */
diff --git a/ponysdk/src/main/java/com/ponysdk/core/server/context/CommunicationSanityChecker.java b/ponysdk/src/main/java/com/ponysdk/core/server/context/CommunicationSanityChecker.java
index 57fdc12f..117a0dfe 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/server/context/CommunicationSanityChecker.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/server/context/CommunicationSanityChecker.java
@@ -138,7 +138,7 @@ public class CommunicationSanityChecker {
                             uiContext.getID());
                         currentState = CommunicationState.KO;
                         stop();
-                        uiContext.disconnect();
+                        uiContext.destroy();
                     }
                 } else {
                     currentState = CommunicationState.OK;
diff --git a/ponysdk/src/main/java/com/ponysdk/core/server/servlet/BootstrapServlet.java b/ponysdk/src/main/java/com/ponysdk/core/server/servlet/BootstrapServlet.java
index aa5f870f..9e943301 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/server/servlet/BootstrapServlet.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/server/servlet/BootstrapServlet.java
@@ -23,13 +23,6 @@
 
 package com.ponysdk.core.server.servlet;
 
-import com.ponysdk.core.server.application.ApplicationConfiguration;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import javax.servlet.http.HttpServlet;
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
 import java.io.InputStream;
 import java.nio.ByteBuffer;
@@ -41,6 +34,15 @@ import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Set;
 
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.ponysdk.core.server.application.ApplicationConfiguration;
+
 public class BootstrapServlet extends HttpServlet {
 
     private static final String INDEX_URL = "/index.html";
@@ -228,7 +230,9 @@ public class BootstrapServlet extends HttpServlet {
     protected String addScript(final HttpServletRequest request) {
         final StringBuilder sb = new StringBuilder();
 
-        String ponyTerminalJsFileName = "ponyterminal/ponyterminal.nocache.js";
+        String ponyTerminalJsFileName;
+        if (configuration.isDebugMode()) ponyTerminalJsFileName = "ponyterminaldebug/ponyterminaldebug.nocache.js";
+        else ponyTerminalJsFileName = "ponyterminal/ponyterminal.nocache.js";
 
         sb.append(String.format(SCRIPT_PATTERN, rootPath + ponyTerminalJsFileName)).append(NEW_LINE);
         sb.append(String.format(SCRIPT_PATTERN, rootPath + "script/ponysdk.js")).append(NEW_LINE);
diff --git a/ponysdk/src/main/java/com/ponysdk/core/server/websocket/WebSocket.java b/ponysdk/src/main/java/com/ponysdk/core/server/websocket/WebSocket.java
index b28277a2..0e739e3a 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/server/websocket/WebSocket.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/server/websocket/WebSocket.java
@@ -1,413 +1,387 @@
-/*
- * Copyright (c) 2017 PonySDK
- *  Owners:
- *  Luciano Broussal  <luciano.broussal AT gmail.com>
- *  Mathieu Barbier   <mathieu.barbier AT gmail.com>
- *  Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
- *
- *  WebSite:
- *  http://code.google.com/p/pony-sdk/
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-
-package com.ponysdk.core.server.websocket;
-
-import com.ponysdk.core.model.ClientToServerModel;
-import com.ponysdk.core.model.ServerToClientModel;
-import com.ponysdk.core.server.application.ApplicationConfiguration;
-import com.ponysdk.core.server.application.ApplicationManager;
-import com.ponysdk.core.server.application.UIContext;
-import com.ponysdk.core.server.context.CommunicationSanityChecker;
-import com.ponysdk.core.server.stm.TxnContext;
-import com.ponysdk.core.ui.basic.PObject;
-import org.eclipse.jetty.util.component.Container;
-import org.eclipse.jetty.websocket.api.Session;
-import org.eclipse.jetty.websocket.api.StatusCode;
-import org.eclipse.jetty.websocket.api.WebSocketListener;
-import org.eclipse.jetty.websocket.common.extensions.ExtensionStack;
-import org.eclipse.jetty.websocket.servlet.ServletUpgradeRequest;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import javax.json.JsonArray;
-import javax.json.JsonObject;
-import javax.json.JsonReader;
-import java.io.IOException;
-import java.io.StringReader;
-import java.util.Arrays;
-import java.util.List;
-import java.util.Objects;
-import java.util.concurrent.TimeUnit;
-import java.util.stream.Collectors;
-
-public class WebSocket implements WebSocketListener, WebsocketEncoder {
-
-    private static final Logger log = LoggerFactory.getLogger(WebSocket.class);
-
-    private ServletUpgradeRequest request;
-    private WebsocketMonitor monitor;
-    private WebSocketPusher websocketPusher;
-    private ApplicationManager applicationManager;
-
-    private TxnContext context;
-    private Session session;
-    private UIContext uiContext;
-    private Listener listener;
-
-    private long lastSentPing;
-
-    public WebSocket() {
-    }
-
-    @Override
-    public void onWebSocketConnect(final Session session) {
-        try {
-            if (!session.isOpen()) throw new IllegalStateException("Session already closed");
-            this.session = session;
-
-            // 1K for max chunk size and 1M for total buffer size
-            // Don't set max chunk size > 8K because when using Jetty Websocket compression, the chunks are limited to 8K
-
-            this.websocketPusher = new WebSocketPusher(session, 1 << 20, 1 << 12, TimeUnit.SECONDS.toMillis(60));
-            uiContext = new UIContext(this, context, applicationManager.getConfiguration(), request);
-            log.info("Creating a new {}", uiContext);
-
-            final CommunicationSanityChecker communicationSanityChecker = new CommunicationSanityChecker(uiContext);
-            context.registerUIContext(uiContext);
-
-            uiContext.acquire();
-            try {
-                beginObject();
-                final ApplicationConfiguration configuration = uiContext.getConfiguration();
-                final boolean enableClientToServerHeartBeat = configuration.isEnableClientToServerHeartBeat();
-                final TimeUnit heartBeatPeriodTimeUnit = configuration.getHeartBeatPeriodTimeUnit();
-                final int heartBeatPeriod = enableClientToServerHeartBeat
-                        ? (int) heartBeatPeriodTimeUnit.toSeconds(configuration.getHeartBeatPeriod())
-                        : 0;
-
-                encode(ServerToClientModel.CREATE_CONTEXT, uiContext.getID()); // TODO nciaravola integer ?
-                encode(ServerToClientModel.OPTION_FORMFIELD_TABULATION, configuration.isTabindexOnlyFormField());
-                encode(ServerToClientModel.HEARTBEAT_PERIOD, heartBeatPeriod);
-                endObject();
-                if (isAlive()) flush0();
-            } catch (final Throwable e) {
-                log.error("Cannot send server heart beat to client", e);
-            } finally {
-                uiContext.release();
-            }
-
-            applicationManager.startApplication(uiContext);
-            communicationSanityChecker.start();
-        } catch (final Exception e) {
-            log.error("Cannot process WebSocket instructions", e);
-            e.printStackTrace(); // WORKAROUND The logger doesn't seem to work here
-        }
-    }
-
-    @Override
-    public void onWebSocketError(final Throwable throwable) {
-        log.error("WebSocket Error on UIContext #{}", uiContext.getID(), throwable);
-        uiContext.onDestroy();
-    }
-
-    @Override
-    public void onWebSocketClose(final int statusCode, final String reason) {
-        log.info("WebSocket closed on UIContext #{} : {}, reason : {}", uiContext.getID(), NiceStatusCode.getMessage(statusCode),
-                Objects.requireNonNullElse(reason, ""));
-        uiContext.onDestroy();
-    }
-
-    /**
-     * Receive from the terminal
-     */
-
-    @Override
-    public void onWebSocketText(final String message) {
-        if (this.listener != null) listener.onIncomingText(message);
-        if (isAlive()) {
-            try {
-                uiContext.onMessageReceived();
-                if (monitor != null) monitor.onMessageReceived(WebSocket.this, message);
-
-                final JsonObject jsonObject;
-                try (final JsonReader reader = uiContext.getJsonProvider().createReader(new StringReader(message))) {
-                    jsonObject = reader.readObject();
-                }
-
-                if (jsonObject.containsKey(ClientToServerModel.HEARTBEAT_REQUEST.toStringValue())) {
-                    sendHeartbeat();
-                } else if (jsonObject.containsKey(ClientToServerModel.TERMINAL_LATENCY.toStringValue())) {
-                    processRoundtripLatency(jsonObject);
-                } else if (jsonObject.containsKey(ClientToServerModel.APPLICATION_INSTRUCTIONS.toStringValue())) {
-                    processInstructions(jsonObject);
-                } else if (jsonObject.containsKey(ClientToServerModel.ERROR_MSG.toStringValue())) {
-                    processTerminalLog(jsonObject, ClientToServerModel.ERROR_MSG);
-                } else if (jsonObject.containsKey(ClientToServerModel.WARN_MSG.toStringValue())) {
-                    processTerminalLog(jsonObject, ClientToServerModel.WARN_MSG);
-                } else if (jsonObject.containsKey(ClientToServerModel.INFO_MSG.toStringValue())) {
-                    processTerminalLog(jsonObject, ClientToServerModel.INFO_MSG);
-                } else {
-                    log.error("Unknown message from terminal #{} : {}", uiContext.getID(), message);
-                }
-
-                if (monitor != null) monitor.onMessageProcessed(this, message);
-            } catch (final Throwable e) {
-                log.error("Cannot process message from terminal  #" + uiContext.getID() + " : " + message, e);
-            } finally {
-                if (monitor != null) monitor.onMessageUnprocessed(this, message);
-            }
-        } else {
-            log.info("UI Context #{} is destroyed, message dropped from terminal : {}", uiContext != null ? uiContext.getID() : -1,
-                    message);
-        }
-    }
-
-    private void processRoundtripLatency(final JsonObject jsonObject) {
-        final long roundtripLatency = TimeUnit.MILLISECONDS.convert(System.nanoTime() - lastSentPing, TimeUnit.NANOSECONDS);
-        log.debug("Roundtrip measurement : {} ms from terminal #{}", roundtripLatency, uiContext.getID());
-        uiContext.addRoundtripLatencyValue(roundtripLatency);
-
-        final long terminalLatency = jsonObject.getJsonNumber(ClientToServerModel.TERMINAL_LATENCY.toStringValue()).longValue();
-        log.debug("Terminal measurement : {} ms from terminal #{}", terminalLatency, uiContext.getID());
-        uiContext.addTerminalLatencyValue(terminalLatency);
-
-        final long networkLatency = roundtripLatency - terminalLatency;
-        log.debug("Network measurement : {} ms from terminal #{}", networkLatency, uiContext.getID());
-        uiContext.addNetworkLatencyValue(networkLatency);
-    }
-
-    private void processInstructions(final JsonObject jsonObject) {
-        final String applicationInstructions = ClientToServerModel.APPLICATION_INSTRUCTIONS.toStringValue();
-        uiContext.execute(() -> {
-            final JsonArray appInstructions = jsonObject.getJsonArray(applicationInstructions);
-            for (int i = 0; i < appInstructions.size(); i++) {
-                uiContext.fireClientData(appInstructions.getJsonObject(i));
-            }
-        });
-    }
-
-    private void processTerminalLog(final JsonObject json, final ClientToServerModel level) {
-        final String message = json.getJsonString(level.toStringValue()).getString();
-        String objectInformation = "";
-
-        if (json.containsKey(ClientToServerModel.OBJECT_ID.toStringValue())) {
-            final PObject object = uiContext.getObject(json.getJsonNumber(ClientToServerModel.OBJECT_ID.toStringValue()).intValue());
-            objectInformation = object == null ? "NA" : object.toString();
-        }
-
-        switch (level) {
-            case INFO_MSG:
-                log.info("Message received from terminal : UIContext #{} on {} : {}", uiContext.getID(), objectInformation, message);
-                break;
-            case WARN_MSG:
-                log.warn("Message received from terminal : UIContext #{} on {} : {}", uiContext.getID(), objectInformation, message);
-                break;
-            case ERROR_MSG:
-                log.error("Message received from terminal : UIContext #{} on {} : {}", uiContext.getID(), objectInformation, message);
-                break;
-            default:
-                log.error("Unknown log level during terminal log processing : {}", level);
-        }
-    }
-
-    /**
-     * Receive from the terminal
-     */
-    @Override
-    public void onWebSocketBinary(final byte[] payload, final int offset, final int len) {
-        // Can't receive binary data from terminal (GWT limitation)
-    }
-
-    /**
-     * Send round trip to the client
-     */
-    public void sendRoundTrip() {
-        if (isAlive() && isSessionOpen()) {
-            lastSentPing = System.nanoTime();
-            beginObject();
-            encode(ServerToClientModel.ROUNDTRIP_LATENCY, null);
-            endObject();
-            flush0();
-        }
-    }
-
-    private void sendHeartbeat() {
-        if (!isAlive() || !isSessionOpen()) return;
-        beginObject();
-        encode(ServerToClientModel.HEARTBEAT, null);
-        endObject();
-        flush0();
-    }
-
-    public void flush() {
-        if (isAlive() && isSessionOpen()) flush0();
-    }
-
-    void flush0() {
-        try {
-        websocketPusher.flush();
-        } catch (final IOException e) {
-            log.error("Can't write on the websocket for #{}, so we destroy the application", uiContext.getID(), e);
-            uiContext.onDestroy();
-        }
-    }
-
-    public void close() {
-        if (isSessionOpen()) {
-            final UIContext context = this.uiContext;
-            log.info("Closing websocket programmatically for UIContext #{}", context == null ? null : context.getID());
-            session.close();
-        }
-    }
-
-    public void disconnect() {
-        if (isSessionOpen()) {
-            final UIContext context = this.uiContext;
-            log.info("Disconnecting websocket programmatically for UIContext #{}", context == null ? null : context.getID());
-            try {
-                session.disconnect();
-            } catch (final IOException e) {
-                log.error("Unable to disconnect session for UIContext #{}", context == null ? null : context.getID(), e);
-            }
-        }
-    }
-
-    private boolean isAlive() {
-        return uiContext != null && uiContext.isAlive();
-    }
-
-    private boolean isSessionOpen() {
-        return session != null && session.isOpen();
-    }
-
-    @Override
-    public void beginObject() {
-        // Nothing to do
-    }
-
-    @Override
-    public void endObject() {
-        encode(ServerToClientModel.END, null);
-    }
-
-    @Override
-    public void encode(final ServerToClientModel model, final Object value) {
-        try {
-            websocketPusher.encode(model, value);
-            if (listener != null) listener.onOutgoingPonyFrame(model, value);
-        } catch (final IOException e) {
-            log.error("Can't write on the websocket for UIContext #{}, so we destroy the application", uiContext.getID(), e);
-            uiContext.destroy();
-        }
-    }
-
-    private enum NiceStatusCode {
-
-        NORMAL(StatusCode.NORMAL, "Normal closure"),
-        SHUTDOWN(StatusCode.SHUTDOWN, "Shutdown"),
-        PROTOCOL(StatusCode.PROTOCOL, "Protocol error"),
-        BAD_DATA(StatusCode.BAD_DATA, "Received bad data"),
-        UNDEFINED(StatusCode.UNDEFINED, "Undefined"),
-        NO_CODE(StatusCode.NO_CODE, "No code present"),
-        NO_CLOSE(StatusCode.NO_CLOSE, "Abnormal connection closed"),
-        ABNORMAL(StatusCode.ABNORMAL, "Abnormal connection closed"),
-        BAD_PAYLOAD(StatusCode.BAD_PAYLOAD, "Not consistent message"),
-        POLICY_VIOLATION(StatusCode.POLICY_VIOLATION, "Received message violates policy"),
-        MESSAGE_TOO_LARGE(StatusCode.MESSAGE_TOO_LARGE, "Message too big"),
-        REQUIRED_EXTENSION(StatusCode.REQUIRED_EXTENSION, "Required extension not sent"),
-        SERVER_ERROR(StatusCode.SERVER_ERROR, "Server error"),
-        SERVICE_RESTART(StatusCode.SERVICE_RESTART, "Server restart"),
-        TRY_AGAIN_LATER(StatusCode.TRY_AGAIN_LATER, "Server overload"),
-        FAILED_TLS_HANDSHAKE(StatusCode.POLICY_VIOLATION, "Failure handshake");
-
-        private final int statusCode;
-        private final String message;
-
-        private NiceStatusCode(final int statusCode, final String message) {
-            this.statusCode = statusCode;
-            this.message = message;
-        }
-
-        public static String getMessage(final int statusCode) {
-            final List<NiceStatusCode> codes = Arrays.stream(values())
-                    .filter(niceStatusCode -> niceStatusCode.statusCode == statusCode).collect(Collectors.toList());
-            if (!codes.isEmpty()) {
-                return codes.get(0).toString();
-            } else {
-                log.error("No matching status code found for {}", statusCode);
-                return String.valueOf(statusCode);
-            }
-        }
-
-        @Override
-        public String toString() {
-            return message + " (" + statusCode + ")";
-        }
-
-    }
-
-    public ServletUpgradeRequest getRequest() {
-        return request;
-    }
-
-    public void setRequest(final ServletUpgradeRequest request) {
-        this.request = request;
-    }
-
-    public void setApplicationManager(final ApplicationManager applicationManager) {
-        this.applicationManager = applicationManager;
-    }
-
-    public void setMonitor(final WebsocketMonitor monitor) {
-        this.monitor = monitor;
-    }
-
-    public void setContext(final TxnContext context) {
-        this.context = context;
-    }
-
-    public void setListener(final Listener listener) {
-        this.listener = listener;
-        this.websocketPusher.setWebSocketListener(listener);
-        if (!(session instanceof Container)) {
-            log.warn("Unrecognized session type {} for {}", session == null ? null : session.getClass(), uiContext);
-            return;
-        }
-        final ExtensionStack extensionStack = ((Container) session).getBean(ExtensionStack.class);
-        if (extensionStack == null) {
-            log.warn("No Extension Stack for {}", uiContext);
-            return;
-        }
-        final PonyPerMessageDeflateExtension extension = extensionStack.getBean(PonyPerMessageDeflateExtension.class);
-        if (extension == null) {
-            log.warn("Missing PonyPerMessageDeflateExtension from Extension Stack for {}", uiContext);
-            return;
-        }
-        extension.setWebSocketListener(listener);
-    }
-
-    public static interface Listener {
-
-        void onOutgoingPonyFrame(ServerToClientModel model, Object value);
-
-        void onOutgoingPonyFramesBytes(int bytes);
-
-        void onOutgoingWebSocketFrame(int headerLength, int payloadLength);
-
-        void onIncomingText(String text);
-
-        void onIncomingWebSocketFrame(int headerLength, int payloadLength);
-
-    }
-}
+/*
+ * Copyright (c) 2017 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *  Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *  Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.server.websocket;
+
+import java.io.StringReader;
+import java.util.Arrays;
+import java.util.List;
+import java.util.concurrent.TimeUnit;
+import java.util.stream.Collectors;
+
+import javax.json.JsonArray;
+import javax.json.JsonObject;
+import javax.json.JsonReader;
+
+import org.eclipse.jetty.util.component.Container;
+import org.eclipse.jetty.websocket.api.Session;
+import org.eclipse.jetty.websocket.api.StatusCode;
+import org.eclipse.jetty.websocket.api.WebSocketListener;
+import org.eclipse.jetty.websocket.common.extensions.ExtensionStack;
+import org.eclipse.jetty.websocket.servlet.ServletUpgradeRequest;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.ponysdk.core.model.ClientToServerModel;
+import com.ponysdk.core.model.ServerToClientModel;
+import com.ponysdk.core.server.application.ApplicationConfiguration;
+import com.ponysdk.core.server.application.ApplicationManager;
+import com.ponysdk.core.server.application.UIContext;
+import com.ponysdk.core.server.context.CommunicationSanityChecker;
+import com.ponysdk.core.server.stm.TxnContext;
+import com.ponysdk.core.ui.basic.PObject;
+
+public class WebSocket implements WebSocketListener, WebsocketEncoder {
+
+    private static final Logger log = LoggerFactory.getLogger(WebSocket.class);
+
+    private ServletUpgradeRequest request;
+    private WebsocketMonitor monitor;
+    private WebSocketPusher websocketPusher;
+    private ApplicationManager applicationManager;
+
+    private TxnContext context;
+    private Session session;
+    private UIContext uiContext;
+    private Listener listener;
+
+    private long lastSentPing;
+
+    public WebSocket() {
+    }
+
+    @Override
+    public void onWebSocketConnect(final Session session) {
+        try {
+            if (!session.isOpen()) throw new IllegalStateException("Session already closed");
+            this.session = session;
+
+            // 1K for max chunk size and 1M for total buffer size
+            // Don't set max chunk size > 8K because when using Jetty Websocket compression, the chunks are limited to 8K
+
+            this.websocketPusher = new WebSocketPusher(session, 1 << 20, 1 << 12, TimeUnit.SECONDS.toMillis(60));
+            uiContext = new UIContext(this, context, applicationManager.getConfiguration(), request);
+            log.info("Creating a new {}", uiContext);
+
+            final CommunicationSanityChecker communicationSanityChecker = new CommunicationSanityChecker(uiContext);
+            context.registerUIContext(uiContext);
+
+            uiContext.acquire();
+            try {
+                beginObject();
+                final ApplicationConfiguration configuration = uiContext.getConfiguration();
+                final TimeUnit heartBeatPeriodTimeUnit = configuration.getHeartBeatPeriodTimeUnit();
+
+                encode(ServerToClientModel.CREATE_CONTEXT, uiContext.getID()); // TODO nciaravola integer ?
+                encode(ServerToClientModel.OPTION_FORMFIELD_TABULATION, configuration.isTabindexOnlyFormField());
+                encode(ServerToClientModel.HEARTBEAT_PERIOD,
+                    (int) heartBeatPeriodTimeUnit.toSeconds(configuration.getHeartBeatPeriod()));
+                endObject();
+                if (isAlive()) flush0();
+            } catch (final Throwable e) {
+                log.error("Cannot send server heart beat to client", e);
+            } finally {
+                uiContext.release();
+            }
+
+            applicationManager.startApplication(uiContext);
+            communicationSanityChecker.start();
+        } catch (final Exception e) {
+            log.error("Cannot process WebSocket instructions", e);
+            e.printStackTrace(); // WORKAROUND The logger doesn't seem to work here
+        }
+    }
+
+    @Override
+    public void onWebSocketError(final Throwable throwable) {
+        log.error("WebSocket Error", throwable);
+        uiContext.onDestroy();
+    }
+
+    @Override
+    public void onWebSocketClose(final int statusCode, final String reason) {
+        log.info("WebSocket closed on UIContext #{} : {}, reason : {}", uiContext.getID(), NiceStatusCode.getMessage(statusCode),
+            reason != null ? reason : "");
+        uiContext.onDestroy();
+    }
+
+    /**
+     * Receive from the terminal
+     */
+
+    @Override
+    public void onWebSocketText(final String message) {
+        if (this.listener != null) listener.onIncomingText(message);
+        if (isAlive()) {
+            try {
+                uiContext.onMessageReceived();
+                if (monitor != null) monitor.onMessageReceived(WebSocket.this, message);
+
+                final JsonObject jsonObject;
+                try (final JsonReader reader = uiContext.getJsonProvider().createReader(new StringReader(message))) {
+                    jsonObject = reader.readObject();
+                }
+
+                if (jsonObject.containsKey(ClientToServerModel.HEARTBEAT_REQUEST.toStringValue())) {
+                    sendHeartbeat();
+                } else if (jsonObject.containsKey(ClientToServerModel.TERMINAL_LATENCY.toStringValue())) {
+                    processRoundtripLatency(jsonObject);
+                } else if (jsonObject.containsKey(ClientToServerModel.APPLICATION_INSTRUCTIONS.toStringValue())) {
+                    processInstructions(jsonObject);
+                } else if (jsonObject.containsKey(ClientToServerModel.ERROR_MSG.toStringValue())) {
+                    processTerminalLog(jsonObject, ClientToServerModel.ERROR_MSG);
+                } else if (jsonObject.containsKey(ClientToServerModel.WARN_MSG.toStringValue())) {
+                    processTerminalLog(jsonObject, ClientToServerModel.WARN_MSG);
+                } else if (jsonObject.containsKey(ClientToServerModel.INFO_MSG.toStringValue())) {
+                    processTerminalLog(jsonObject, ClientToServerModel.INFO_MSG);
+                } else {
+                    log.error("Unknow message from terminal #{} : {}", uiContext.getID(), message);
+                }
+
+                if (monitor != null) monitor.onMessageProcessed(this, message);
+            } catch (final Throwable e) {
+                log.error("Cannot process message from terminal  #" + uiContext.getID() + " : " + message, e);
+            } finally {
+                if (monitor != null) monitor.onMessageUnprocessed(this, message);
+            }
+        } else {
+            log.info("UI Context #{} is destroyed, message dropped from terminal : {}", uiContext != null ? uiContext.getID() : -1,
+                message);
+        }
+    }
+
+    private void processRoundtripLatency(final JsonObject jsonObject) {
+        final long roundtripLatency = TimeUnit.MILLISECONDS.convert(System.nanoTime() - lastSentPing, TimeUnit.NANOSECONDS);
+        log.debug("Roundtrip measurement : {} ms from terminal #{}", roundtripLatency, uiContext.getID());
+        uiContext.addRoundtripLatencyValue(roundtripLatency);
+
+        final long terminalLatency = jsonObject.getJsonNumber(ClientToServerModel.TERMINAL_LATENCY.toStringValue()).longValue();
+        log.debug("Terminal measurement : {} ms from terminal #{}", terminalLatency, uiContext.getID());
+        uiContext.addTerminalLatencyValue(terminalLatency);
+
+        final long networkLatency = roundtripLatency - terminalLatency;
+        log.debug("Network measurement : {} ms from terminal #{}", networkLatency, uiContext.getID());
+        uiContext.addNetworkLatencyValue(networkLatency);
+    }
+
+    private void processInstructions(final JsonObject jsonObject) {
+        final String applicationInstructions = ClientToServerModel.APPLICATION_INSTRUCTIONS.toStringValue();
+        uiContext.execute(() -> {
+            final JsonArray appInstructions = jsonObject.getJsonArray(applicationInstructions);
+            for (int i = 0; i < appInstructions.size(); i++) {
+                uiContext.fireClientData(appInstructions.getJsonObject(i));
+            }
+        });
+    }
+
+    private void processTerminalLog(final JsonObject json, final ClientToServerModel level) {
+        final String message = json.getJsonString(level.toStringValue()).getString();
+        String objectInformation = "";
+
+        if (json.containsKey(ClientToServerModel.OBJECT_ID.toStringValue())) {
+            final PObject object = uiContext.getObject(json.getJsonNumber(ClientToServerModel.OBJECT_ID.toStringValue()).intValue());
+            objectInformation = object == null ? "NA" : object.toString();
+        }
+
+        switch (level) {
+            case INFO_MSG:
+                log.info("Message received from terminal : UIContext #{} on {} : {}", uiContext.getID(), objectInformation, message);
+                break;
+            case WARN_MSG:
+                log.warn("Message received from terminal : UIContext #{} on {} : {}", uiContext.getID(), objectInformation, message);
+                break;
+            case ERROR_MSG:
+                log.error("Message received from terminal : UIContext #{} on {} : {}", uiContext.getID(), objectInformation, message);
+                break;
+            default:
+                log.error("Unknown log level during terminal log processing : {}", level);
+        }
+    }
+
+    /**
+     * Receive from the terminal
+     */
+    @Override
+    public void onWebSocketBinary(final byte[] payload, final int offset, final int len) {
+        // Can't receive binary data from terminal (GWT limitation)
+    }
+
+    /**
+     * Send round trip to the client
+     */
+    public void sendRoundTrip() {
+        if (isAlive() && isSessionOpen()) {
+            lastSentPing = System.nanoTime();
+            beginObject();
+            encode(ServerToClientModel.ROUNDTRIP_LATENCY, null);
+            endObject();
+            flush0();
+        }
+    }
+    
+    private void sendHeartbeat() {
+        if (!isAlive() || !isSessionOpen()) return;
+        beginObject();
+        encode(ServerToClientModel.HEARTBEAT, null);
+        endObject();
+        flush0();
+    }
+
+    public void flush() {
+        if (isAlive() && isSessionOpen()) flush0();
+    }
+
+    void flush0() {
+        websocketPusher.flush();
+    }
+
+    public void close() {
+        if (isSessionOpen()) {
+            log.info("Closing websocket programmatically");
+            session.close();
+        }
+    }
+
+    private boolean isAlive() {
+        return uiContext != null && uiContext.isAlive();
+    }
+
+    private boolean isSessionOpen() {
+        return session != null && session.isOpen();
+    }
+
+    @Override
+    public void beginObject() {
+        // Nothing to do
+    }
+
+    @Override
+    public void endObject() {
+        encode(ServerToClientModel.END, null);
+    }
+
+    @Override
+    public void encode(final ServerToClientModel model, final Object value) {
+        websocketPusher.encode(model, value);
+        if (listener != null) listener.onOutgoingPonyFrame(model, value);
+    }
+
+    private static enum NiceStatusCode {
+
+        NORMAL(StatusCode.NORMAL, "Normal closure"),
+        SHUTDOWN(StatusCode.SHUTDOWN, "Shutdown"),
+        PROTOCOL(StatusCode.PROTOCOL, "Protocol error"),
+        BAD_DATA(StatusCode.BAD_DATA, "Received bad data"),
+        UNDEFINED(StatusCode.UNDEFINED, "Undefined"),
+        NO_CODE(StatusCode.NO_CODE, "No code present"),
+        NO_CLOSE(StatusCode.NO_CLOSE, "Abnormal connection closed"),
+        ABNORMAL(StatusCode.ABNORMAL, "Abnormal connection closed"),
+        BAD_PAYLOAD(StatusCode.BAD_PAYLOAD, "Not consistent message"),
+        POLICY_VIOLATION(StatusCode.POLICY_VIOLATION, "Received message violates policy"),
+        MESSAGE_TOO_LARGE(StatusCode.MESSAGE_TOO_LARGE, "Message too big"),
+        REQUIRED_EXTENSION(StatusCode.REQUIRED_EXTENSION, "Required extension not sent"),
+        SERVER_ERROR(StatusCode.SERVER_ERROR, "Server error"),
+        SERVICE_RESTART(StatusCode.SERVICE_RESTART, "Server restart"),
+        TRY_AGAIN_LATER(StatusCode.TRY_AGAIN_LATER, "Server overload"),
+        FAILED_TLS_HANDSHAKE(StatusCode.POLICY_VIOLATION, "Failure handshake");
+
+        private final int statusCode;
+        private final String message;
+
+        private NiceStatusCode(final int statusCode, final String message) {
+            this.statusCode = statusCode;
+            this.message = message;
+        }
+
+        public static String getMessage(final int statusCode) {
+            final List<NiceStatusCode> codes = Arrays.stream(values())
+                .filter(niceStatusCode -> niceStatusCode.statusCode == statusCode).collect(Collectors.toList());
+            if (!codes.isEmpty()) {
+                return codes.get(0).toString();
+            } else {
+                log.error("No matching status code found for {}", statusCode);
+                return String.valueOf(statusCode);
+            }
+        }
+
+        @Override
+        public String toString() {
+            return message + " (" + statusCode + ")";
+        }
+
+    }
+
+    public ServletUpgradeRequest getRequest() {
+        return request;
+    }
+
+    public void setRequest(final ServletUpgradeRequest request) {
+        this.request = request;
+    }
+
+    public void setApplicationManager(final ApplicationManager applicationManager) {
+        this.applicationManager = applicationManager;
+    }
+
+    public void setMonitor(final WebsocketMonitor monitor) {
+        this.monitor = monitor;
+    }
+
+    public void setContext(final TxnContext context) {
+        this.context = context;
+    }
+
+    public void setListener(final Listener listener) {
+        this.listener = listener;
+        this.websocketPusher.setWebSocketListener(listener);
+        if (!(session instanceof Container)) {
+            log.warn("Unrecognized session type {} for {}", session == null ? null : session.getClass(), uiContext);
+            return;
+        }
+        final ExtensionStack extensionStack = ((Container) session).getBean(ExtensionStack.class);
+        if (extensionStack == null) {
+            log.warn("No Extension Stack for {}", uiContext);
+            return;
+        }
+        final PonyPerMessageDeflateExtension extension = extensionStack.getBean(PonyPerMessageDeflateExtension.class);
+        if (extension == null) {
+            log.warn("Missing PonyPerMessageDeflateExtension from Extension Stack for {}", uiContext);
+            return;
+        }
+        extension.setWebSocketListener(listener);
+    }
+
+    public static interface Listener {
+
+        void onOutgoingPonyFrame(ServerToClientModel model, Object value);
+
+        void onOutgoingPonyFramesBytes(int bytes);
+
+        void onOutgoingWebSocketFrame(int headerLength, int payloadLength);
+
+        void onIncomingText(String text);
+
+        void onIncomingWebSocketFrame(int headerLength, int payloadLength);
+
+    }
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/server/websocket/WebSocketPusher.java b/ponysdk/src/main/java/com/ponysdk/core/server/websocket/WebSocketPusher.java
index a39415c9..15db0676 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/server/websocket/WebSocketPusher.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/server/websocket/WebSocketPusher.java
@@ -23,16 +23,6 @@
 
 package com.ponysdk.core.server.websocket;
 
-import com.ponysdk.core.model.ArrayValueModel;
-import com.ponysdk.core.model.BooleanModel;
-import com.ponysdk.core.model.ServerToClientModel;
-import com.ponysdk.core.model.ValueTypeModel;
-import com.ponysdk.core.server.concurrent.AutoFlushedBuffer;
-import org.eclipse.jetty.websocket.api.Session;
-import org.eclipse.jetty.websocket.api.WriteCallback;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import java.io.IOException;
 import java.io.UnsupportedEncodingException;
 import java.nio.ByteBuffer;
@@ -43,6 +33,18 @@ import java.util.function.BiFunction;
 import java.util.function.Consumer;
 import java.util.function.Function;
 
+import org.eclipse.jetty.websocket.api.Session;
+import org.eclipse.jetty.websocket.api.WriteCallback;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.ponysdk.core.model.ArrayValueModel;
+import com.ponysdk.core.model.BooleanModel;
+import com.ponysdk.core.model.ServerToClientModel;
+import com.ponysdk.core.model.ValueTypeModel;
+import com.ponysdk.core.server.application.UIContext;
+import com.ponysdk.core.server.concurrent.AutoFlushedBuffer;
+
 public class WebSocketPusher extends AutoFlushedBuffer implements WriteCallback {
 
     private static final Logger log = LoggerFactory.getLogger(WebSocketPusher.class);
@@ -63,6 +65,16 @@ public class WebSocketPusher extends AutoFlushedBuffer implements WriteCallback
         this.session = session;
     }
 
+    @Override
+    public void flush() {
+        try {
+            super.flush();
+        } catch (final IOException e) {
+            log.error("Can't write on the websocket, so we destroy the application", e);
+            UIContext.get().onDestroy();
+        }
+    }
+
     @Override
     protected void doFlush(final ByteBuffer bufferToFlush) {
         final int bytes = bufferToFlush.remaining();
@@ -94,8 +106,9 @@ public class WebSocketPusher extends AutoFlushedBuffer implements WriteCallback
     /**
      * @param value The type can be primitives, String or Object[]
      */
-    void encode(final ServerToClientModel model, final Object value) throws IOException {
+    protected void encode(final ServerToClientModel model, final Object value) {
         if (log.isDebugEnabled()) log.debug("Writing in the buffer : {} => {}", model, value);
+        try {
             switch (model.getTypeModel()) {
                 case NULL:
                     write(model);
@@ -134,6 +147,10 @@ public class WebSocketPusher extends AutoFlushedBuffer implements WriteCallback
                     log.error("Unknown model type : {}", model.getTypeModel());
                     break;
             }
+        } catch (final IOException e) {
+            log.error("Can't write on the websocket, so we destroy the application", e);
+            UIContext.get().onDestroy();
+        }
     }
 
     private void write(final ServerToClientModel model) throws IOException {
@@ -322,7 +339,7 @@ public class WebSocketPusher extends AutoFlushedBuffer implements WriteCallback
             putUnsignedShort(length);
             metaBytes += 2;
         } else {
-            put(ArrayValueModel.STRING_UTF8_UINT32_LENGTH.getValue());
+            put(ArrayValueModel.STRING_UTF8_INT32_LENGTH.getValue());
             putInt(length);
             metaBytes += 4;
         }
@@ -349,7 +366,7 @@ public class WebSocketPusher extends AutoFlushedBuffer implements WriteCallback
             final byte[] bytes = value.getBytes(StandardCharsets.UTF_8);
             final int length = bytes.length;
             if (value.length() == length) { //ASCII
-                if (length <= ValueTypeModel.STRING_ASCII_UINT8) { // 0 -> 250 (The MOST common case)
+                if (length <= ValueTypeModel.STRING_ASCII_UINT8_MAX_LENGTH) { // 0 -> 250 (The MOST common case)
                     putUnsignedByte((short) length);
                     metaBytes += 1;
                 } else if (length <= MAX_UNSIGNED_SHORT_VALUE) { // 251 -> 65,535
@@ -357,7 +374,7 @@ public class WebSocketPusher extends AutoFlushedBuffer implements WriteCallback
                     putUnsignedShort(length);
                     metaBytes += 3;
                 } else { // 65,536 -> 2,147,483,647
-                    putUnsignedByte(ValueTypeModel.STRING_ASCII_UINT32);
+                    putUnsignedByte(ValueTypeModel.STRING_ASCII_INT32);
                     putInt(length);
                     metaBytes += 5;
                 }
diff --git a/ponysdk/src/main/java/com/ponysdk/core/server/websocket/WebsocketEncoder.java b/ponysdk/src/main/java/com/ponysdk/core/server/websocket/WebsocketEncoder.java
index d0d21379..2bf5674f 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/server/websocket/WebsocketEncoder.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/server/websocket/WebsocketEncoder.java
@@ -30,7 +30,7 @@ public interface WebsocketEncoder {
     void beginObject();
 
     /**
-     * @param model Model to encode
+     * @param model
      * @param value The type can be primitives, String or Object[]
      */
     void encode(final ServerToClientModel model, final Object value);
diff --git a/ponysdk/src/main/java/com/ponysdk/core/terminal/PonySDK.java b/ponysdk/src/main/java/com/ponysdk/core/terminal/PonySDK.java
index 6f643045..8a9e9c2f 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/terminal/PonySDK.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/terminal/PonySDK.java
@@ -1,236 +1,235 @@
-/*
- * Copyright (c) 2011 PonySDK
- *  Owners:
- *  Luciano Broussal  <luciano.broussal AT gmail.com>
- *  Mathieu Barbier   <mathieu.barbier AT gmail.com>
- *  Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
- *
- *  WebSite:
- *  http://code.google.com/p/pony-sdk/
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-
-package com.ponysdk.core.terminal;
-
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
-import com.google.gwt.core.client.GWT;
-import com.google.gwt.core.client.GWT.UncaughtExceptionHandler;
-import com.google.gwt.core.client.JavaScriptObject;
-import com.google.gwt.core.client.Scheduler;
-import com.google.gwt.json.client.JSONObject;
-import com.google.gwt.json.client.JSONParser;
-import com.google.gwt.json.client.JSONString;
-import com.google.gwt.json.client.JSONValue;
-import com.google.gwt.user.client.History;
-import com.google.gwt.user.client.Window;
-import com.ponysdk.core.model.ClientToServerModel;
-import com.ponysdk.core.model.MappingPath;
-import com.ponysdk.core.terminal.instruction.PTInstruction;
-import com.ponysdk.core.terminal.request.FrameRequestBuilder;
-import com.ponysdk.core.terminal.request.WindowRequestBuilder;
-import com.ponysdk.core.terminal.socket.WebSocketClient;
-import com.ponysdk.core.terminal.ui.PTObject;
-import com.ponysdk.core.terminal.ui.PTWindowManager;
-
-import elemental.client.Browser;
-import elemental.xml.XMLHttpRequest;
-import jsinterop.annotations.JsType;
-
-@JsType
-public class PonySDK implements UncaughtExceptionHandler {
-
-    private static final Logger log = Logger.getLogger(PonySDK.class.getName());
-
-    private static PonySDK INSTANCE;
-
-    private final UIBuilder uiBuilder = new UIBuilder();
-
-    private int contextId;
-    private WebSocketClient socketClient;
-    private boolean started;
-
-    private boolean tabindexOnlyFormField;
-
-    //Communication SanityChecker
-    private long lastHeartBeatFail = 0L;
-    private ReconnectionChecker reconnectionChecker;
-
-    public PonySDK() {
-        if (INSTANCE != null) throw new RuntimeException("Cannot instanciate PonySDK twice");
-        INSTANCE = this;
-    }
-
-    public static final PonySDK get() {
-        return INSTANCE;
-    }
-
-    public void start() {
-        if (started) return;
-
-        GWT.setUncaughtExceptionHandler(this);
-
-        try {
-            final String child = Window.Location.getParameter(ClientToServerModel.UI_CONTEXT_ID.toStringValue());
-
-            if (child == null) startMainContext();
-            else startChildContext();
-
-            started = true;
-            log.info("started");
-        } catch (final Throwable e) {
-            log.log(Level.SEVERE, "Loading application has failed #" + e.getMessage(), e);
-        }
-    }
-
-    private void startMainContext() {
-        Window.addCloseHandler(event -> close());
-        final String builder = GWT.getHostPageBaseURL().replaceFirst("http", "ws") + MappingPath.WEBSOCKET + "?"
-                + ClientToServerModel.TYPE_HISTORY.toStringValue() + "=" + History.getToken();
-        reconnectionChecker = new ReconnectionChecker();
-        socketClient = new WebSocketClient(builder, uiBuilder, reconnectionChecker);
-    }
-
-    private void startChildContext() {
-        final String windowId = Window.Location.getParameter(ClientToServerModel.WINDOW_ID.toStringValue());
-        final String frameId = Window.Location.getParameter(ClientToServerModel.FRAME_ID.toStringValue());
-
-        contextId = Integer.parseInt(Window.Location.getParameter(ClientToServerModel.UI_CONTEXT_ID.toStringValue()));
-        final String tabindexOnlyFormFieldRaw = Window.Location
-            .getParameter(ClientToServerModel.OPTION_TABINDEX_ACTIVATED.toStringValue());
-        if (tabindexOnlyFormFieldRaw != null) tabindexOnlyFormField = Boolean.parseBoolean(tabindexOnlyFormFieldRaw);
-
-        uiBuilder.init(windowId != null ? new WindowRequestBuilder(windowId, buffer -> uiBuilder.updateWindowTerminal(buffer))
-                : new FrameRequestBuilder(frameId, buffer -> uiBuilder.updateFrameTerminal(buffer)));
-    }
-
-    /**
-     * From other terminal to the server
-     */
-    public void sendDataToServerFromWindow(final String jsObject) {
-        uiBuilder.sendDataToServer(JSONParser.parseStrict(jsObject));
-    }
-
-    /**
-     * From Main terminal to the server
-     * Ajax implementation
-     */
-    public void sendDataToServer(final Object objectID, final JavaScriptObject jsObject, final AjaxCallback callback) {
-        if (callback == null) {
-            final PTInstruction instruction = new PTInstruction(Integer.valueOf(objectID.toString()));
-            instruction.put(ClientToServerModel.NATIVE, jsObject);
-            uiBuilder.sendDataToServer(instruction);
-        } else {
-            final XMLHttpRequest xhr = Browser.getWindow().newXMLHttpRequest();
-
-            final PTObject ptObject = uiBuilder.getPTObject(Integer.parseInt(objectID.toString()));
-
-            xhr.setOnload(evt -> callback.setAjaxResponse(xhr.getResponseText()));
-
-            xhr.open("GET", MappingPath.AJAX.toString());
-            xhr.setRequestHeader(ClientToServerModel.UI_CONTEXT_ID.name(), String.valueOf(contextId));
-            xhr.setRequestHeader(ClientToServerModel.OBJECT_ID.name(), String.valueOf(ptObject.getObjectID()));
-
-            final JSONObject jsonArray = new JSONObject(jsObject);
-            for (final String key : jsonArray.keySet()) {
-                final String value;
-                final JSONValue jsonValue = jsonArray.get(key);
-                if (jsonValue != null) {
-                    final JSONString stringValue = jsonValue.isString();
-                    value = stringValue != null ? stringValue.stringValue() : jsonValue.toString();
-                } else {
-                    value = "";
-                }
-                xhr.setRequestHeader(key, value);
-            }
-
-            xhr.send();
-        }
-    }
-
-    public void request(final Object objectID, final JavaScriptObject jsObject, final AjaxCallback callback) {
-        sendDataToServer(objectID, jsObject, callback);
-    }
-
-    public void setReadyFrame(final int frameID) {
-        uiBuilder.setReadyFrame(frameID);
-    }
-
-    public void setReadyWindow(final int windowID) {
-        uiBuilder.setReadyWindow(windowID);
-    }
-
-    public void registerAddOnFactory(final String signature, final JavascriptAddOnFactory javascriptAddOnFactory) {
-        uiBuilder.registerJavascriptAddOnFactory(signature, javascriptAddOnFactory);
-    }
-
-    public String getHostPageBaseURL() {
-        return GWT.getHostPageBaseURL();
-    }
-
-    @Override
-    public void onUncaughtException(final Throwable e) {
-        uiBuilder.sendExceptionMessageToServer(e);
-    }
-
-    public void close() {
-        socketClient.close();
-        PTWindowManager.closeAll();
-    }
-
-    public int getContextId() {
-        return contextId;
-    }
-
-    public void setContextId(final int contextId) {
-        this.contextId = contextId;
-    }
-
-    public boolean isTabindexOnlyFormField() {
-        return tabindexOnlyFormField;
-    }
-
-    public void setTabindexOnlyFormField(final boolean tabindexOnlyFormField) {
-        this.tabindexOnlyFormField = tabindexOnlyFormField;
-    }
-
-    public void setHeartBeatPeriod(final int heartBeatInseconds) {
-        if (heartBeatInseconds == 0) return;
-        final int heartBeatInMilli = heartBeatInseconds * 1000;
-        Scheduler.get().scheduleFixedDelay(() -> {
-            final long now = System.currentTimeMillis();
-            final long lastMessageTime = socketClient.getLastMessageTime();
-            if (lastMessageTime != lastHeartBeatFail) {
-                if (now - lastMessageTime > heartBeatInMilli) {
-                    lastHeartBeatFail = lastMessageTime;
-                    final PTInstruction requestData = new PTInstruction();
-                    requestData.put(ClientToServerModel.HEARTBEAT_REQUEST);
-                    socketClient.send(requestData.toString());
-                }
-            } else {
-                if (now - lastMessageTime > heartBeatInMilli) {
-                    socketClient.close(1000, "server did not respond");
-                    reconnectionChecker.detectConnectionFailure();
-                    //stop the scheduling
-                    return false;
-                } else {
-                    lastHeartBeatFail = 0L;
-                }
-            }
-            return true;
-        }, heartBeatInMilli);
-    }
-
-}
+/*
+ * Copyright (c) 2011 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *  Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *  Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.terminal;
+
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+import com.google.gwt.core.client.GWT;
+import com.google.gwt.core.client.GWT.UncaughtExceptionHandler;
+import com.google.gwt.core.client.JavaScriptObject;
+import com.google.gwt.core.client.Scheduler;
+import com.google.gwt.json.client.JSONObject;
+import com.google.gwt.json.client.JSONParser;
+import com.google.gwt.json.client.JSONString;
+import com.google.gwt.json.client.JSONValue;
+import com.google.gwt.user.client.History;
+import com.google.gwt.user.client.Window;
+import com.ponysdk.core.model.ClientToServerModel;
+import com.ponysdk.core.model.MappingPath;
+import com.ponysdk.core.terminal.instruction.PTInstruction;
+import com.ponysdk.core.terminal.request.FrameRequestBuilder;
+import com.ponysdk.core.terminal.request.WindowRequestBuilder;
+import com.ponysdk.core.terminal.socket.WebSocketClient;
+import com.ponysdk.core.terminal.ui.PTObject;
+import com.ponysdk.core.terminal.ui.PTWindowManager;
+
+import elemental.client.Browser;
+import elemental.xml.XMLHttpRequest;
+import jsinterop.annotations.JsType;
+
+@JsType
+public class PonySDK implements UncaughtExceptionHandler {
+
+    private static final Logger log = Logger.getLogger(PonySDK.class.getName());
+
+    private static PonySDK INSTANCE;
+
+    private final UIBuilder uiBuilder = new UIBuilder();
+
+    private int contextId;
+    private WebSocketClient socketClient;
+    private boolean started;
+
+    private boolean tabindexOnlyFormField;
+
+    //Communication SanityChecker
+    private long lastHeartBeatFail = 0L;
+    private ReconnectionChecker reconnectionChecker;
+
+    public PonySDK() {
+        if (INSTANCE != null) throw new RuntimeException("Cannot instanciate PonySDK twice");
+        INSTANCE = this;
+    }
+
+    public static final PonySDK get() {
+        return INSTANCE;
+    }
+
+    public void start() {
+        if (started) return;
+
+        GWT.setUncaughtExceptionHandler(this);
+
+        try {
+            final String child = Window.Location.getParameter(ClientToServerModel.UI_CONTEXT_ID.toStringValue());
+
+            if (child == null) startMainContext();
+            else startChildContext();
+
+            started = true;
+            log.info("started");
+        } catch (final Throwable e) {
+            log.log(Level.SEVERE, "Loading application has failed #" + e.getMessage(), e);
+        }
+    }
+
+    private void startMainContext() {
+        Window.addCloseHandler(event -> close());
+        final String builder = GWT.getHostPageBaseURL().replaceFirst("http", "ws") + MappingPath.WEBSOCKET + "?"
+                + ClientToServerModel.TYPE_HISTORY.toStringValue() + "=" + History.getToken();
+        reconnectionChecker = new ReconnectionChecker();
+        socketClient = new WebSocketClient(builder, uiBuilder, reconnectionChecker);
+    }
+
+    private void startChildContext() {
+        final String windowId = Window.Location.getParameter(ClientToServerModel.WINDOW_ID.toStringValue());
+        final String frameId = Window.Location.getParameter(ClientToServerModel.FRAME_ID.toStringValue());
+
+        contextId = Integer.parseInt(Window.Location.getParameter(ClientToServerModel.UI_CONTEXT_ID.toStringValue()));
+        final String tabindexOnlyFormFieldRaw = Window.Location
+            .getParameter(ClientToServerModel.OPTION_TABINDEX_ACTIVATED.toStringValue());
+        if (tabindexOnlyFormFieldRaw != null) tabindexOnlyFormField = Boolean.parseBoolean(tabindexOnlyFormFieldRaw);
+
+        uiBuilder.init(windowId != null ? new WindowRequestBuilder(windowId, buffer -> uiBuilder.updateWindowTerminal(buffer))
+                : new FrameRequestBuilder(frameId, buffer -> uiBuilder.updateFrameTerminal(buffer)));
+    }
+
+    /**
+     * From other terminal to the server
+     */
+    public void sendDataToServerFromWindow(final String jsObject) {
+        uiBuilder.sendDataToServer(JSONParser.parseStrict(jsObject));
+    }
+
+    /**
+     * From Main terminal to the server
+     * Ajax implementation
+     */
+    public void sendDataToServer(final Object objectID, final JavaScriptObject jsObject, final AjaxCallback callback) {
+        if (callback == null) {
+            final PTInstruction instruction = new PTInstruction(Integer.valueOf(objectID.toString()));
+            instruction.put(ClientToServerModel.NATIVE, jsObject);
+            uiBuilder.sendDataToServer(instruction);
+        } else {
+            final XMLHttpRequest xhr = Browser.getWindow().newXMLHttpRequest();
+
+            final PTObject ptObject = uiBuilder.getPTObject(Integer.parseInt(objectID.toString()));
+
+            xhr.setOnload(evt -> callback.setAjaxResponse(xhr.getResponseText()));
+
+            xhr.open("GET", MappingPath.AJAX.toString());
+            xhr.setRequestHeader(ClientToServerModel.UI_CONTEXT_ID.name(), String.valueOf(contextId));
+            xhr.setRequestHeader(ClientToServerModel.OBJECT_ID.name(), String.valueOf(ptObject.getObjectID()));
+
+            final JSONObject jsonArray = new JSONObject(jsObject);
+            for (final String key : jsonArray.keySet()) {
+                final String value;
+                final JSONValue jsonValue = jsonArray.get(key);
+                if (jsonValue != null) {
+                    final JSONString stringValue = jsonValue.isString();
+                    value = stringValue != null ? stringValue.stringValue() : jsonValue.toString();
+                } else {
+                    value = "";
+                }
+                xhr.setRequestHeader(key, value);
+            }
+
+            xhr.send();
+        }
+    }
+
+    public void request(final Object objectID, final JavaScriptObject jsObject, final AjaxCallback callback) {
+        sendDataToServer(objectID, jsObject, callback);
+    }
+
+    public void setReadyFrame(final int frameID) {
+        uiBuilder.setReadyFrame(frameID);
+    }
+
+    public void setReadyWindow(final int windowID) {
+        uiBuilder.setReadyWindow(windowID);
+    }
+
+    public void registerAddOnFactory(final String signature, final JavascriptAddOnFactory javascriptAddOnFactory) {
+        uiBuilder.registerJavascriptAddOnFactory(signature, javascriptAddOnFactory);
+    }
+
+    public String getHostPageBaseURL() {
+        return GWT.getHostPageBaseURL();
+    }
+
+    @Override
+    public void onUncaughtException(final Throwable e) {
+        uiBuilder.sendExceptionMessageToServer(e);
+    }
+
+    public void close() {
+        socketClient.close();
+        PTWindowManager.closeAll();
+    }
+
+    public int getContextId() {
+        return contextId;
+    }
+
+    public void setContextId(final int contextId) {
+        this.contextId = contextId;
+    }
+
+    public boolean isTabindexOnlyFormField() {
+        return tabindexOnlyFormField;
+    }
+
+    public void setTabindexOnlyFormField(final boolean tabindexOnlyFormField) {
+        this.tabindexOnlyFormField = tabindexOnlyFormField;
+    }
+
+    public void setHeartBeatPeriod(final int heartBeatInseconds) {
+        final int heartBeatInMilli = heartBeatInseconds * 1000;
+        Scheduler.get().scheduleFixedDelay(() -> {
+            final long now = System.currentTimeMillis();
+            final long lastMessageTime = socketClient.getLastMessageTime();
+            if (lastMessageTime != lastHeartBeatFail) {
+                if (now - lastMessageTime > heartBeatInMilli) {
+                    lastHeartBeatFail = lastMessageTime;
+                    final PTInstruction requestData = new PTInstruction();
+                    requestData.put(ClientToServerModel.HEARTBEAT_REQUEST);
+                    socketClient.send(requestData.toString());
+                }
+            } else {
+                if (now - lastMessageTime > heartBeatInMilli) {
+                    socketClient.close(1000, "server did not respond");
+                    reconnectionChecker.detectConnectionFailure();
+                    //stop the scheduling
+                    return false;
+                } else {
+                    lastHeartBeatFail = 0L;
+                }
+            }
+            return true;
+        }, heartBeatInMilli);
+    }
+
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/terminal/ReconnectionChecker.java b/ponysdk/src/main/java/com/ponysdk/core/terminal/ReconnectionChecker.java
index e96d3273..13f31da5 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/terminal/ReconnectionChecker.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/terminal/ReconnectionChecker.java
@@ -1,129 +1,129 @@
-/*
- * Copyright (c) 2017 PonySDK
- *  Owners:
- *  Luciano Broussal  <luciano.broussal AT gmail.com>
- *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
- *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
- *
- *  WebSite:
- *  http://code.google.com/p/pony-sdk/
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-
-package com.ponysdk.core.terminal;
-
-import java.util.logging.Logger;
-
-import com.google.gwt.core.client.GWT;
-import com.google.gwt.core.client.Scheduler;
-
-import elemental.client.Browser;
-import elemental.dom.Document;
-import elemental.dom.Element;
-import elemental.html.Window;
-import elemental.xml.XMLHttpRequest;
-
-public class ReconnectionChecker {
-
-    private static final int HTTP_STATUS_CODE_OK = 200;
-
-    private static final int RETRY_TIMEOUT = 30000; // 30 seconds
-    private static final int RETRY_PERIOD = 2000; // 2 seconds
-
-    private static final Logger log = Logger.getLogger(ReconnectionChecker.class.getName());
-
-    private final Window window;
-
-    private final XMLHttpRequest reconnectionRequest;
-
-    private boolean errorDetected;
-
-    public ReconnectionChecker() {
-        window = Browser.getWindow();
-
-        reconnectionRequest = window.newXMLHttpRequest();
-        reconnectionRequest.setOnreadystatechange(evt -> {
-            if (reconnectionRequest.getReadyState() == XMLHttpRequest.DONE) {
-                if (reconnectionRequest.getStatus() == HTTP_STATUS_CODE_OK) {
-                    errorDetected = false;
-                    window.getLocation().reload();
-                } else {
-                    // We reschedule the next check (we wait to avoid spaming)
-                    Scheduler.get().scheduleFixedDelay(() -> {
-                        retryConnection();
-                        return false;
-                    }, RETRY_PERIOD);
-                }
-            }
-        });
-    }
-
-    public void detectConnectionFailure() {
-        if (errorDetected) return;
-        errorDetected = true;
-
-        log.severe("Failure detected");
-        notifyConnectionLostListeners();
-
-        if (isSpecificReconnectionInformation()) {
-            showSpecificReconnectionInformation();
-        } else {
-            final Document document = Browser.getDocument();
-            final Element reconnectionElement = document.getElementById("reconnection");
-            reconnectionElement.getStyle().setDisplay("block");
-
-            final Element reconnectingElement = document.getElementById("reconnecting");
-            reconnectingElement.setInnerHTML("Connection to server lost<br>Reconnecting ...");
-        }
-
-        Scheduler.get().scheduleFixedDelay(() -> {
-            retryConnection();
-            return false;
-        }, RETRY_PERIOD);
-    }
-
-    private final native void notifyConnectionLostListeners() /*-{
-                                                              for(var i = 0 ; i < $wnd.document.onConnectionLostListeners.length ; i++) {
-                                                                  var connectionLostListener = $wnd.document.onConnectionLostListeners[i];
-                                                                  try {
-                                                                      connectionLostListener();
-                                                                  } catch (error) {
-                                                                      throw "cannot call onConnectionLostListeners callback: " + connectionLostListener + ", error " + error;
-                                                                  }
-                                                              }
-                                                              }-*/;
-
-    private final native boolean isSpecificReconnectionInformation() /*-{
-                                                                     return $wnd.showReconnectionInformation && typeof $wnd.showReconnectionInformation == 'function';
-                                                                     }-*/;
-
-    private final native void showSpecificReconnectionInformation() /*-{
-                                                                    $wnd.showReconnectionInformation();
-                                                                    }-*/;
-
-    private void retryConnection() {
-        reconnectionRequest.open("GET", getPingUrl() + "&retry");
-        setHTTPRequestTimeout(reconnectionRequest, RETRY_TIMEOUT);
-        reconnectionRequest.send();
-    }
-
-    private static final native void setHTTPRequestTimeout(XMLHttpRequest xmlHTTPRequest, int timeout) /*-{
-                                                                                                       xmlHTTPRequest.timeout = timeout;
-                                                                                                       }-*/;
-
-    private static final String getPingUrl() {
-        return GWT.getHostPageBaseURL() + "?ping=" + System.currentTimeMillis();
-    }
-
-}
+/*
+ * Copyright (c) 2017 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.terminal;
+
+import java.util.logging.Logger;
+
+import com.google.gwt.core.client.GWT;
+import com.google.gwt.core.client.Scheduler;
+
+import elemental.client.Browser;
+import elemental.dom.Document;
+import elemental.dom.Element;
+import elemental.html.Window;
+import elemental.xml.XMLHttpRequest;
+
+public class ReconnectionChecker {
+
+    private static final int HTTP_STATUS_CODE_OK = 200;
+
+    private static final int RETRY_TIMEOUT = 30000; // 30 seconds
+    private static final int RETRY_PERIOD = 2000; // 2 seconds
+
+    private static final Logger log = Logger.getLogger(ReconnectionChecker.class.getName());
+
+    private final Window window;
+
+    private final XMLHttpRequest reconnectionRequest;
+
+    private boolean errorDetected;
+
+    public ReconnectionChecker() {
+        window = Browser.getWindow();
+
+        reconnectionRequest = window.newXMLHttpRequest();
+        reconnectionRequest.setOnreadystatechange(evt -> {
+            if (reconnectionRequest.getReadyState() == XMLHttpRequest.DONE) {
+                if (reconnectionRequest.getStatus() == HTTP_STATUS_CODE_OK) {
+                    errorDetected = false;
+                    window.getLocation().reload();
+                } else {
+                    // We reschedule the next check (we wait to avoid spaming)
+                    Scheduler.get().scheduleFixedDelay(() -> {
+                        retryConnection();
+                        return false;
+                    }, RETRY_PERIOD);
+                }
+            }
+        });
+    }
+
+    public void detectConnectionFailure() {
+        if (errorDetected) return;
+        errorDetected = true;
+
+        log.severe("Failure detected");
+        notifyConnectionLostListeners();
+
+        if (isSpecificReconnectionInformation()) {
+            showSpecificReconnectionInformation();
+        } else {
+            final Document document = Browser.getDocument();
+            final Element reconnectionElement = document.getElementById("reconnection");
+            reconnectionElement.getStyle().setDisplay("block");
+
+            final Element reconnectingElement = document.getElementById("reconnecting");
+            reconnectingElement.setInnerHTML("Connection to server lost<br>Reconnecting ...");
+        }
+
+        Scheduler.get().scheduleFixedDelay(() -> {
+            retryConnection();
+            return false;
+        }, RETRY_PERIOD);
+    }
+
+    private final native void notifyConnectionLostListeners() /*-{
+                                                              for(var i = 0 ; i < $wnd.document.onConnectionLostListeners.length ; i++) {
+                                                                  var connectionLostListener = $wnd.document.onConnectionLostListeners[i];
+                                                                  try {
+                                                                      connectionLostListener();
+                                                                  } catch (error) {
+                                                                      throw "cannot call onConnectionLostListeners callback: " + connectionLostListener + ", error " + error;
+                                                                  }
+                                                              }
+                                                              }-*/;
+
+    private final native boolean isSpecificReconnectionInformation() /*-{
+                                                                     return $wnd.showReconnectionInformation && typeof $wnd.showReconnectionInformation == 'function';
+                                                                     }-*/;
+
+    private final native void showSpecificReconnectionInformation() /*-{
+                                                                    $wnd.showReconnectionInformation();
+                                                                    }-*/;
+
+    private void retryConnection() {
+        reconnectionRequest.open("GET", getPingUrl() + "&retry");
+        setHTTPRequestTimeout(reconnectionRequest, RETRY_TIMEOUT);
+        reconnectionRequest.send();
+    }
+
+    private static final native void setHTTPRequestTimeout(XMLHttpRequest xmlHTTPRequest, int timeout) /*-{
+                                                                                                       xmlHTTPRequest.timeout = timeout;
+                                                                                                       }-*/;
+
+    private static final String getPingUrl() {
+        return GWT.getHostPageBaseURL() + "?ping=" + System.currentTimeMillis();
+    }
+
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/terminal/UIBuilder.java b/ponysdk/src/main/java/com/ponysdk/core/terminal/UIBuilder.java
index a8202210..cbd505d9 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/terminal/UIBuilder.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/terminal/UIBuilder.java
@@ -1,497 +1,497 @@
-/*
- * Copyright (c) 2011 PonySDK
- *  Owners:
- *  Luciano Broussal  <luciano.broussal AT gmail.com>
- *  Mathieu Barbier   <mathieu.barbier AT gmail.com>
- *  Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
- *
- *  WebSite:
- *  http://code.google.com/p/pony-sdk/
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-
-package com.ponysdk.core.terminal;
-
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
-import com.google.gwt.dom.client.Element;
-import com.google.gwt.json.client.JSONArray;
-import com.google.gwt.json.client.JSONObject;
-import com.google.gwt.json.client.JSONValue;
-import com.google.gwt.user.client.History;
-import com.google.gwt.user.client.ui.RootPanel;
-import com.google.gwt.user.client.ui.UIObject;
-import com.google.gwt.user.client.ui.Widget;
-import com.ponysdk.core.model.ClientToServerModel;
-import com.ponysdk.core.model.HandlerModel;
-import com.ponysdk.core.model.ServerToClientModel;
-import com.ponysdk.core.model.WidgetType;
-import com.ponysdk.core.terminal.instruction.PTInstruction;
-import com.ponysdk.core.terminal.model.BinaryModel;
-import com.ponysdk.core.terminal.model.ReaderBuffer;
-import com.ponysdk.core.terminal.request.RequestBuilder;
-import com.ponysdk.core.terminal.ui.PTCookies;
-import com.ponysdk.core.terminal.ui.PTFrame;
-import com.ponysdk.core.terminal.ui.PTHistory;
-import com.ponysdk.core.terminal.ui.PTObject;
-import com.ponysdk.core.terminal.ui.PTStreamResource;
-import com.ponysdk.core.terminal.ui.PTWindow;
-import com.ponysdk.core.terminal.ui.PTWindowManager;
-
-import elemental.client.Browser;
-import elemental.html.Uint8Array;
-import elemental.util.Collections;
-import elemental.util.MapFromIntTo;
-import elemental.util.MapFromStringTo;
-
-public class UIBuilder {
-
-    private static final Logger log = Logger.getLogger(UIBuilder.class.getName());
-
-    private final UIFactory uiFactory = new UIFactory();
-    private final MapFromIntTo<PTObject> objectByID = Collections.mapFromIntTo();
-    private final Map<UIObject, Integer> objectIDByWidget = new HashMap<>();
-    private final MapFromIntTo<UIObject> widgetIDByObjectID = Collections.mapFromIntTo();
-    private final MapFromStringTo<JavascriptAddOnFactory> javascriptAddOnFactories = Collections.mapFromStringTo();
-
-    private final ReaderBuffer readerBuffer = new ReaderBuffer();
-
-    private RequestBuilder requestBuilder;
-
-    private int currentWindowId = -1;
-
-    private long lastReceivedMessage;
-
-    public void init(final RequestBuilder requestBuilder) {
-        if (log.isLoggable(Level.INFO)) log.info("Init graphical system");
-
-        this.requestBuilder = requestBuilder;
-
-        PTHistory.addValueChangeHandler(this);
-
-        final PTCookies cookies = new PTCookies(this);
-        objectByID.put(0, cookies);
-
-        // hide loading component
-        final Widget w = RootPanel.get("loading");
-        if (w != null) {
-            w.setSize("0px", "0px");
-            w.setVisible(false);
-        } else {
-            log.log(Level.WARNING, "Include splash screen html element into your index.html with id=\"loading\"");
-        }
-    }
-
-    public void updateMainTerminal(final Uint8Array buffer) {
-        lastReceivedMessage = System.currentTimeMillis();
-
-        readerBuffer.init(buffer);
-
-        while (readerBuffer.hasEnoughKeyBytes()) {
-            final int nextBlockPosition = readerBuffer.shiftNextBlock(true);
-            if (nextBlockPosition == ReaderBuffer.NOT_FULL_BUFFER_POSITION) return;
-
-            // Detect if the message is not for the main terminal but for a specific window
-            final BinaryModel binaryModel = readerBuffer.readBinaryModel();
-            final ServerToClientModel model = binaryModel.getModel();
-
-            if (ServerToClientModel.ROUNDTRIP_LATENCY == model) {
-                final PTInstruction requestData = new PTInstruction();
-                requestData.put(ClientToServerModel.TERMINAL_LATENCY, System.currentTimeMillis() - lastReceivedMessage);
-                requestBuilder.send(requestData);
-                readerBuffer.readBinaryModel(); // Read ServerToClientModel.END element
-            } else if (ServerToClientModel.CREATE_CONTEXT == model) {
-                PonySDK.get().setContextId(binaryModel.getIntValue());
-                // Read ServerToClientModel.OPTION_FORMFIELD_TABULATION element
-                PonySDK.get().setTabindexOnlyFormField(readerBuffer.readBinaryModel().getBooleanValue());
-                PonySDK.get().setHeartBeatPeriod(readerBuffer.readBinaryModel().getIntValue());
-                readerBuffer.readBinaryModel(); // Read ServerToClientModel.END element
-            } else if (ServerToClientModel.DESTROY_CONTEXT == model) {
-                destroy();
-                readerBuffer.readBinaryModel(); // Read ServerToClientModel.END element
-            } else if (ServerToClientModel.HEARTBEAT == model) {
-                readerBuffer.readBinaryModel(); // Read ServerToClientModel.END element
-            } else {
-                final int oldCurrentWindowId = currentWindowId;
-                if (ServerToClientModel.WINDOW_ID == model) currentWindowId = binaryModel.getIntValue();
-
-                if (currentWindowId == PTWindowManager.getMainWindowId() || oldCurrentWindowId == -1) {
-                    BinaryModel binaryModel2;
-                    if (ServerToClientModel.WINDOW_ID == model) binaryModel2 = readerBuffer.readBinaryModel();
-                    else binaryModel2 = binaryModel;
-
-                    final ServerToClientModel model2 = binaryModel.getModel();
-                    if (ServerToClientModel.FRAME_ID == model2) {
-                        final int frameId = binaryModel2.getIntValue();
-                        final PTFrame frame = (PTFrame) getPTObject(frameId);
-                        frame.postMessage(readerBuffer.slice(readerBuffer.getPosition(), nextBlockPosition));
-                    } else {
-                        update(binaryModel, readerBuffer);
-                    }
-                } else {
-                    if (ServerToClientModel.WINDOW_ID != model) readerBuffer.rewind(binaryModel);
-
-                    final PTWindow window = PTWindowManager.getWindow(currentWindowId);
-                    if (window != null && window.isReady()) {
-                        final int startPosition = readerBuffer.getPosition();
-                        int endPosition = nextBlockPosition;
-
-                        // Concat multiple messages for the same window
-                        readerBuffer.setPosition(endPosition);
-                        while (readerBuffer.hasEnoughKeyBytes()) {
-                            final int nextBlockPosition1 = readerBuffer.shiftNextBlock(true);
-                            if (nextBlockPosition1 != ReaderBuffer.NOT_FULL_BUFFER_POSITION) {
-                                final BinaryModel newBinaryModel = readerBuffer.readBinaryModel();
-                                final ServerToClientModel model2 = newBinaryModel.getModel();
-                                if (ServerToClientModel.WINDOW_ID != model2 && ServerToClientModel.ROUNDTRIP_LATENCY != model2
-                                        && ServerToClientModel.CREATE_CONTEXT != model2
-                                        && ServerToClientModel.DESTROY_CONTEXT != model2) {
-                                    endPosition = nextBlockPosition1;
-                                    readerBuffer.setPosition(endPosition);
-                                } else {
-                                    break;
-                                }
-                            } else {
-                                break;
-                            }
-                        }
-
-                        window.postMessage(readerBuffer.slice(startPosition, endPosition));
-                    } else {
-                        readerBuffer.shiftNextBlock(false);
-                    }
-                }
-            }
-        }
-    }
-
-    public void updateWindowTerminal(final Uint8Array buffer) {
-        readerBuffer.init(buffer);
-
-        while (readerBuffer.hasEnoughKeyBytes()) {
-            // Detect if the message is not for the window but for a specific frame
-            final BinaryModel binaryModel = readerBuffer.readBinaryModel();
-
-            if (ServerToClientModel.FRAME_ID == binaryModel.getModel()) {
-                final int requestedId = binaryModel.getIntValue();
-                final PTFrame frame = (PTFrame) getPTObject(requestedId);
-                if (log.isLoggable(Level.FINE)) log.fine("The main terminal send the buffer to frame " + requestedId);
-                frame.postMessage(readerBuffer.slice(readerBuffer.getPosition(), readerBuffer.shiftNextBlock(true)));
-            } else {
-                update(binaryModel, readerBuffer);
-            }
-        }
-    }
-
-    public void updateFrameTerminal(final Uint8Array buffer) {
-        readerBuffer.init(buffer);
-
-        update(readerBuffer.readBinaryModel(), readerBuffer);
-    }
-
-    private void update(final BinaryModel binaryModel, final ReaderBuffer buffer) {
-        final ServerToClientModel model = binaryModel.getModel();
-
-        try {
-            if (ServerToClientModel.TYPE_CREATE == model) {
-                processCreate(buffer, binaryModel.getIntValue());
-            } else if (ServerToClientModel.TYPE_UPDATE == model) {
-                processUpdate(buffer, binaryModel.getIntValue());
-            } else if (ServerToClientModel.TYPE_ADD == model) {
-                processAdd(buffer, binaryModel.getIntValue());
-            } else if (ServerToClientModel.TYPE_GC == model) {
-                processGC(buffer, binaryModel.getIntValue());
-            } else if (ServerToClientModel.TYPE_REMOVE == model) {
-                processRemove(buffer, binaryModel.getIntValue());
-            } else if (ServerToClientModel.TYPE_ADD_HANDLER == model) {
-                processAddHandler(buffer, binaryModel.getIntValue());
-            } else if (ServerToClientModel.TYPE_REMOVE_HANDLER == model) {
-                processRemoveHandler(buffer, binaryModel.getIntValue());
-            } else if (ServerToClientModel.TYPE_HISTORY == model) {
-                processHistory(buffer, binaryModel.getStringValue());
-            } else {
-                log.log(Level.WARNING, "Unknown instruction type : " + binaryModel + " ; " + buffer.toString());
-                if (ServerToClientModel.END != model) buffer.shiftNextBlock(false);
-            }
-        } catch (final Exception e) {
-            if (ServerToClientModel.END != model) buffer.shiftNextBlock(false);
-            sendExceptionMessageToServer(e);
-        }
-    }
-
-    private void processCreate(final ReaderBuffer buffer, final int objectID) {
-        // ServerToClientModel.WIDGET_TYPE
-        final WidgetType widgetType = WidgetType.fromRawValue(buffer.readBinaryModel().getIntValue());
-
-        final PTObject ptObject = uiFactory.newUIObject(widgetType);
-        if (ptObject != null) {
-            ptObject.create(buffer, objectID, this);
-            objectByID.put(objectID, ptObject);
-
-            processUpdate(buffer, objectID);
-        } else {
-            log.warning("Cannot create PObject #" + objectID + " with widget type : " + widgetType);
-            buffer.shiftNextBlock(false);
-        }
-    }
-
-    private void processAdd(final ReaderBuffer buffer, final int objectID) {
-        final PTObject ptObject = getPTObject(objectID);
-        if (ptObject != null) {
-            // ServerToClientModel.PARENT_OBJECT_ID
-            final int parentId = buffer.readBinaryModel().getIntValue();
-            final PTObject parentObject = getPTObject(parentId);
-            if (parentObject != null) {
-                parentObject.add(buffer, ptObject);
-                buffer.readBinaryModel(); // Read ServerToClientModel.END element
-            } else {
-                log.warning("Cannot add " + ptObject + " to an garbaged parent object #" + parentId
-                        + ", so we will consume all the buffer of this object");
-                buffer.shiftNextBlock(false);
-            }
-        } else {
-            log.warning("Add a null PTObject #" + objectID + ", so we will consume all the buffer of this object");
-            buffer.shiftNextBlock(false);
-        }
-    }
-
-    private void processUpdate(final ReaderBuffer buffer, final int objectID) {
-        final PTObject ptObject = getPTObject(objectID);
-        if (ptObject != null) {
-            BinaryModel binaryModel;
-            do {
-                binaryModel = buffer.readBinaryModel();
-                if (ServerToClientModel.END.getValue() != binaryModel.getModel().getValue()) {
-                    final boolean result = ptObject.update(buffer, binaryModel);
-                    if (!result) {
-                        log.warning("Update " + ptObject.getClass().getSimpleName() + " #" + objectID + " with key : " + binaryModel
-                                + " doesn't exist");
-                        buffer.shiftNextBlock(false);
-                        break;
-                    }
-                } else {
-                    break;
-                }
-            } while (buffer.hasEnoughKeyBytes());
-        } else {
-            log.warning("Update on a null PTObject #" + objectID + ", so we will consume all the buffer of this object");
-            buffer.shiftNextBlock(false);
-        }
-    }
-
-    private void processRemove(final ReaderBuffer buffer, final int objectID) {
-        final PTObject ptObject = getPTObject(objectID);
-        if (ptObject != null) {
-            final int parentId = buffer.readBinaryModel().getIntValue();
-            final PTObject parentObject = parentId != -1 ? getPTObject(parentId) : ptObject;
-
-            if (parentObject != null) {
-                parentObject.remove(buffer, ptObject);
-                buffer.readBinaryModel(); // Read ServerToClientModel.END element
-            } else {
-                log.warning("Cannot remove " + ptObject + " on a garbaged object #" + parentId);
-                buffer.shiftNextBlock(false);
-            }
-        } else {
-            log.warning("Remove a null PTObject #" + objectID + ", so we will consume all the buffer of this object");
-            buffer.shiftNextBlock(false);
-        }
-    }
-
-    private void processAddHandler(final ReaderBuffer buffer, final int objectID) {
-        // ServerToClientModel.HANDLER_TYPE
-        final HandlerModel handlerModel = HandlerModel.fromRawValue(buffer.readBinaryModel().getIntValue());
-
-        if (HandlerModel.HANDLER_STREAM_REQUEST == handlerModel) {
-            new PTStreamResource().addHandler(buffer, handlerModel);
-            buffer.readBinaryModel(); // Read ServerToClientModel.END element
-        } else {
-            final PTObject ptObject = getPTObject(objectID);
-            if (ptObject != null) {
-                ptObject.addHandler(buffer, handlerModel);
-                buffer.readBinaryModel(); // Read ServerToClientModel.END element
-            } else {
-                log.warning("Add handler on a null PTObject #" + objectID + ", so we will consume all the buffer of this object");
-                buffer.shiftNextBlock(false);
-            }
-        }
-    }
-
-    private void processRemoveHandler(final ReaderBuffer buffer, final int objectID) {
-        final PTObject ptObject = getPTObject(objectID);
-        if (ptObject != null) {
-            // ServerToClientModel.HANDLER_TYPE
-            final HandlerModel handlerModel = HandlerModel.fromRawValue(buffer.readBinaryModel().getIntValue());
-            ptObject.removeHandler(buffer, handlerModel);
-            buffer.readBinaryModel(); // Read ServerToClientModel.END element
-        } else {
-            log.warning("Remove handler on a null PTObject #" + objectID + ", so we will consume all the buffer of this object");
-            buffer.shiftNextBlock(false);
-        }
-    }
-
-    private void processHistory(final ReaderBuffer buffer, final String token) {
-        final String oldToken = History.getToken();
-
-        // ServerToClientModel.HISTORY_FIRE_EVENTS
-        final boolean fireEvents = buffer.readBinaryModel().getBooleanValue();
-        if (oldToken != null && oldToken.equals(token)) {
-            if (fireEvents) History.fireCurrentHistoryState();
-        } else {
-            History.newItem(token, fireEvents);
-        }
-
-        buffer.readBinaryModel(); // Read ServerToClientModel.END element
-    }
-
-    private void processGC(final ReaderBuffer buffer, final int objectID) {
-        final PTObject ptObject = unregisterObject(objectID);
-        if (ptObject != null) {
-            ptObject.destroy();
-            buffer.readBinaryModel(); // Read ServerToClientModel.END element
-        } else {
-            log.warning("Cannot GC a garbaged PTObject #" + objectID);
-            buffer.shiftNextBlock(false);
-        }
-    }
-
-    private PTObject unregisterObject(final int objectID) {
-        final PTObject ptObject = objectByID.get(objectID);
-        objectByID.remove(objectID);
-        final UIObject uiObject = widgetIDByObjectID.get(objectID);
-        widgetIDByObjectID.remove(objectID);
-        if (uiObject != null) objectIDByWidget.remove(uiObject);
-        return ptObject;
-    }
-
-    private void destroy() {
-        PTWindowManager.closeAll();
-        Browser.getWindow().getLocation().reload();
-    }
-
-    public void sendDataToServer(final Widget widget, final PTInstruction instruction) {
-        if (log.isLoggable(Level.FINE)) {
-            if (widget != null) {
-                final Element source = widget.getElement();
-                if (source != null) log.fine("Action triggered, Instruction [" + instruction + "] , " + source.getInnerHTML());
-            }
-        }
-        sendDataToServer(instruction);
-    }
-
-    public void sendDataToServer(final JSONValue instruction) {
-        requestBuilder.send(instruction);
-    }
-
-    public void sendDataToServer(final JSONObject instruction) {
-        final PTInstruction requestData = new PTInstruction();
-        final JSONArray jsonArray = new JSONArray();
-        jsonArray.set(0, instruction);
-        requestData.put(ClientToServerModel.APPLICATION_INSTRUCTIONS, jsonArray);
-
-        if (log.isLoggable(Level.FINE)) log.log(Level.FINE, "Data to send " + requestData.toString());
-
-        requestBuilder.send(requestData);
-    }
-
-    public void sendExceptionMessageToServer(final Throwable t) {
-        log.log(Level.SEVERE, "PonySDK has encountered an internal error : ", t);
-        sendErrorMessageToServer(
-            t.getClass().getCanonicalName() + " : " + t.getMessage() + " : " + Arrays.toString(t.getStackTrace()));
-    }
-
-    public void sendErrorMessageToServer(final String message) {
-        final PTInstruction requestData = new PTInstruction();
-        requestData.put(ClientToServerModel.ERROR_MSG, message);
-        requestBuilder.send(requestData);
-    }
-
-    public void sendErrorMessageToServer(final String message, final int objectID) {
-        final PTInstruction requestData = new PTInstruction();
-        requestData.put(ClientToServerModel.ERROR_MSG, message);
-        requestData.put(ClientToServerModel.OBJECT_ID, objectID);
-        requestBuilder.send(requestData);
-    }
-
-    public void sendWarningMessageToServer(final String message) {
-        final PTInstruction requestData = new PTInstruction();
-        requestData.put(ClientToServerModel.WARN_MSG, message);
-        requestBuilder.send(requestData);
-    }
-
-    public void sendWarningMessageToServer(final String message, final int objectID) {
-        final PTInstruction requestData = new PTInstruction();
-        requestData.put(ClientToServerModel.WARN_MSG, message);
-        requestData.put(ClientToServerModel.OBJECT_ID, objectID);
-        requestBuilder.send(requestData);
-    }
-
-    public void sendInfoMessageToServer(final String message) {
-        final PTInstruction requestData = new PTInstruction();
-        requestData.put(ClientToServerModel.INFO_MSG, message);
-        requestBuilder.send(requestData);
-    }
-
-    public void sendInfoMessageToServer(final String message, final int objectID) {
-        final PTInstruction requestData = new PTInstruction();
-        requestData.put(ClientToServerModel.INFO_MSG, message);
-        requestData.put(ClientToServerModel.OBJECT_ID, objectID);
-        requestBuilder.send(requestData);
-    }
-
-    public PTObject getPTObject(final int id) {
-        final PTObject ptObject = objectByID.get(id);
-        if (ptObject == null) {
-            log.warning("PTObject #" + id + " not found");
-            sendWarningMessageToServer("PTObject #" + id + " not found", id);
-        }
-        return ptObject;
-    }
-
-    public PTObject getPTObject(final UIObject uiObject) {
-        final Integer objectID = objectIDByWidget.get(uiObject);
-        if (objectID != null) return getPTObject(objectID.intValue());
-        return null;
-    }
-
-    public void registerUIObject(final Integer ID, final UIObject uiObject) {
-        objectIDByWidget.put(uiObject, ID);
-        widgetIDByObjectID.put(ID, uiObject);
-    }
-
-    void registerJavascriptAddOnFactory(final String signature, final JavascriptAddOnFactory javascriptAddOnFactory) {
-        this.javascriptAddOnFactories.put(signature, javascriptAddOnFactory);
-    }
-
-    public JavascriptAddOnFactory getJavascriptAddOnFactory(final String signature) {
-        return javascriptAddOnFactories.get(signature);
-    }
-
-    void setReadyWindow(final int windowID) {
-        final PTWindow window = PTWindowManager.getWindow(windowID);
-        if (window != null) window.setReady();
-        else log.warning("Window " + windowID + " doesn't exist");
-    }
-
-    void setReadyFrame(final int frameID) {
-        final PTFrame frame = (PTFrame) getPTObject(frameID);
-        if (frame != null) frame.setReady();
-        else log.warning("Frame " + frame + " doesn't exist");
-    }
-
-}
+/*
+ * Copyright (c) 2011 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *  Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *  Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.terminal;
+
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+import com.google.gwt.dom.client.Element;
+import com.google.gwt.json.client.JSONArray;
+import com.google.gwt.json.client.JSONObject;
+import com.google.gwt.json.client.JSONValue;
+import com.google.gwt.user.client.History;
+import com.google.gwt.user.client.ui.RootPanel;
+import com.google.gwt.user.client.ui.UIObject;
+import com.google.gwt.user.client.ui.Widget;
+import com.ponysdk.core.model.ClientToServerModel;
+import com.ponysdk.core.model.HandlerModel;
+import com.ponysdk.core.model.ServerToClientModel;
+import com.ponysdk.core.model.WidgetType;
+import com.ponysdk.core.terminal.instruction.PTInstruction;
+import com.ponysdk.core.terminal.model.BinaryModel;
+import com.ponysdk.core.terminal.model.ReaderBuffer;
+import com.ponysdk.core.terminal.request.RequestBuilder;
+import com.ponysdk.core.terminal.ui.PTCookies;
+import com.ponysdk.core.terminal.ui.PTFrame;
+import com.ponysdk.core.terminal.ui.PTHistory;
+import com.ponysdk.core.terminal.ui.PTObject;
+import com.ponysdk.core.terminal.ui.PTStreamResource;
+import com.ponysdk.core.terminal.ui.PTWindow;
+import com.ponysdk.core.terminal.ui.PTWindowManager;
+
+import elemental.client.Browser;
+import elemental.html.Uint8Array;
+import elemental.util.Collections;
+import elemental.util.MapFromIntTo;
+import elemental.util.MapFromStringTo;
+
+public class UIBuilder {
+
+    private static final Logger log = Logger.getLogger(UIBuilder.class.getName());
+
+    private final UIFactory uiFactory = new UIFactory();
+    private final MapFromIntTo<PTObject> objectByID = Collections.mapFromIntTo();
+    private final Map<UIObject, Integer> objectIDByWidget = new HashMap<>();
+    private final MapFromIntTo<UIObject> widgetIDByObjectID = Collections.mapFromIntTo();
+    private final MapFromStringTo<JavascriptAddOnFactory> javascriptAddOnFactories = Collections.mapFromStringTo();
+
+    private final ReaderBuffer readerBuffer = new ReaderBuffer();
+
+    private RequestBuilder requestBuilder;
+
+    private int currentWindowId = -1;
+
+    private long lastReceivedMessage;
+
+    public void init(final RequestBuilder requestBuilder) {
+        if (log.isLoggable(Level.INFO)) log.info("Init graphical system");
+
+        this.requestBuilder = requestBuilder;
+
+        PTHistory.addValueChangeHandler(this);
+
+        final PTCookies cookies = new PTCookies(this);
+        objectByID.put(0, cookies);
+
+        // hide loading component
+        final Widget w = RootPanel.get("loading");
+        if (w != null) {
+            w.setSize("0px", "0px");
+            w.setVisible(false);
+        } else {
+            log.log(Level.WARNING, "Include splash screen html element into your index.html with id=\"loading\"");
+        }
+    }
+
+    public void updateMainTerminal(final Uint8Array buffer) {
+        lastReceivedMessage = System.currentTimeMillis();
+
+        readerBuffer.init(buffer);
+
+        while (readerBuffer.hasEnoughKeyBytes()) {
+            final int nextBlockPosition = readerBuffer.shiftNextBlock(true);
+            if (nextBlockPosition == ReaderBuffer.NOT_FULL_BUFFER_POSITION) return;
+
+            // Detect if the message is not for the main terminal but for a specific window
+            final BinaryModel binaryModel = readerBuffer.readBinaryModel();
+            final ServerToClientModel model = binaryModel.getModel();
+
+            if (ServerToClientModel.ROUNDTRIP_LATENCY == model) {
+                final PTInstruction requestData = new PTInstruction();
+                requestData.put(ClientToServerModel.TERMINAL_LATENCY, System.currentTimeMillis() - lastReceivedMessage);
+                requestBuilder.send(requestData);
+                readerBuffer.readBinaryModel(); // Read ServerToClientModel.END element
+            } else if (ServerToClientModel.CREATE_CONTEXT == model) {
+                PonySDK.get().setContextId(binaryModel.getIntValue());
+                // Read ServerToClientModel.OPTION_FORMFIELD_TABULATION element
+                PonySDK.get().setTabindexOnlyFormField(readerBuffer.readBinaryModel().getBooleanValue());
+                PonySDK.get().setHeartBeatPeriod(readerBuffer.readBinaryModel().getIntValue());
+                readerBuffer.readBinaryModel(); // Read ServerToClientModel.END element
+            } else if (ServerToClientModel.DESTROY_CONTEXT == model) {
+                destroy();
+                readerBuffer.readBinaryModel(); // Read ServerToClientModel.END element
+            } else if (ServerToClientModel.HEARTBEAT == model) {
+                readerBuffer.readBinaryModel(); // Read ServerToClientModel.END element
+            } else {
+                final int oldCurrentWindowId = currentWindowId;
+                if (ServerToClientModel.WINDOW_ID == model) currentWindowId = binaryModel.getIntValue();
+
+                if (currentWindowId == PTWindowManager.getMainWindowId() || oldCurrentWindowId == -1) {
+                    BinaryModel binaryModel2;
+                    if (ServerToClientModel.WINDOW_ID == model) binaryModel2 = readerBuffer.readBinaryModel();
+                    else binaryModel2 = binaryModel;
+
+                    final ServerToClientModel model2 = binaryModel.getModel();
+                    if (ServerToClientModel.FRAME_ID == model2) {
+                        final int frameId = binaryModel2.getIntValue();
+                        final PTFrame frame = (PTFrame) getPTObject(frameId);
+                        frame.postMessage(readerBuffer.slice(readerBuffer.getPosition(), nextBlockPosition));
+                    } else {
+                        update(binaryModel, readerBuffer);
+                    }
+                } else {
+                    if (ServerToClientModel.WINDOW_ID != model) readerBuffer.rewind(binaryModel);
+
+                    final PTWindow window = PTWindowManager.getWindow(currentWindowId);
+                    if (window != null && window.isReady()) {
+                        final int startPosition = readerBuffer.getPosition();
+                        int endPosition = nextBlockPosition;
+
+                        // Concat multiple messages for the same window
+                        readerBuffer.setPosition(endPosition);
+                        while (readerBuffer.hasEnoughKeyBytes()) {
+                            final int nextBlockPosition1 = readerBuffer.shiftNextBlock(true);
+                            if (nextBlockPosition1 != ReaderBuffer.NOT_FULL_BUFFER_POSITION) {
+                                final BinaryModel newBinaryModel = readerBuffer.readBinaryModel();
+                                final ServerToClientModel model2 = newBinaryModel.getModel();
+                                if (ServerToClientModel.WINDOW_ID != model2 && ServerToClientModel.ROUNDTRIP_LATENCY != model2
+                                        && ServerToClientModel.CREATE_CONTEXT != model2
+                                        && ServerToClientModel.DESTROY_CONTEXT != model2) {
+                                    endPosition = nextBlockPosition1;
+                                    readerBuffer.setPosition(endPosition);
+                                } else {
+                                    break;
+                                }
+                            } else {
+                                break;
+                            }
+                        }
+
+                        window.postMessage(readerBuffer.slice(startPosition, endPosition));
+                    } else {
+                        readerBuffer.shiftNextBlock(false);
+                    }
+                }
+            }
+        }
+    }
+
+    public void updateWindowTerminal(final Uint8Array buffer) {
+        readerBuffer.init(buffer);
+
+        while (readerBuffer.hasEnoughKeyBytes()) {
+            // Detect if the message is not for the window but for a specific frame
+            final BinaryModel binaryModel = readerBuffer.readBinaryModel();
+
+            if (ServerToClientModel.FRAME_ID == binaryModel.getModel()) {
+                final int requestedId = binaryModel.getIntValue();
+                final PTFrame frame = (PTFrame) getPTObject(requestedId);
+                if (log.isLoggable(Level.FINE)) log.fine("The main terminal send the buffer to frame " + requestedId);
+                frame.postMessage(readerBuffer.slice(readerBuffer.getPosition(), readerBuffer.shiftNextBlock(true)));
+            } else {
+                update(binaryModel, readerBuffer);
+            }
+        }
+    }
+
+    public void updateFrameTerminal(final Uint8Array buffer) {
+        readerBuffer.init(buffer);
+
+        update(readerBuffer.readBinaryModel(), readerBuffer);
+    }
+
+    private void update(final BinaryModel binaryModel, final ReaderBuffer buffer) {
+        final ServerToClientModel model = binaryModel.getModel();
+
+        try {
+            if (ServerToClientModel.TYPE_CREATE == model) {
+                processCreate(buffer, binaryModel.getIntValue());
+            } else if (ServerToClientModel.TYPE_UPDATE == model) {
+                processUpdate(buffer, binaryModel.getIntValue());
+            } else if (ServerToClientModel.TYPE_ADD == model) {
+                processAdd(buffer, binaryModel.getIntValue());
+            } else if (ServerToClientModel.TYPE_GC == model) {
+                processGC(buffer, binaryModel.getIntValue());
+            } else if (ServerToClientModel.TYPE_REMOVE == model) {
+                processRemove(buffer, binaryModel.getIntValue());
+            } else if (ServerToClientModel.TYPE_ADD_HANDLER == model) {
+                processAddHandler(buffer, binaryModel.getIntValue());
+            } else if (ServerToClientModel.TYPE_REMOVE_HANDLER == model) {
+                processRemoveHandler(buffer, binaryModel.getIntValue());
+            } else if (ServerToClientModel.TYPE_HISTORY == model) {
+                processHistory(buffer, binaryModel.getStringValue());
+            } else {
+                log.log(Level.WARNING, "Unknown instruction type : " + binaryModel + " ; " + buffer.toString());
+                if (ServerToClientModel.END != model) buffer.shiftNextBlock(false);
+            }
+        } catch (final Exception e) {
+            if (ServerToClientModel.END != model) buffer.shiftNextBlock(false);
+            sendExceptionMessageToServer(e);
+        }
+    }
+
+    private void processCreate(final ReaderBuffer buffer, final int objectID) {
+        // ServerToClientModel.WIDGET_TYPE
+        final WidgetType widgetType = WidgetType.fromRawValue(buffer.readBinaryModel().getIntValue());
+
+        final PTObject ptObject = uiFactory.newUIObject(widgetType);
+        if (ptObject != null) {
+            ptObject.create(buffer, objectID, this);
+            objectByID.put(objectID, ptObject);
+
+            processUpdate(buffer, objectID);
+        } else {
+            log.warning("Cannot create PObject #" + objectID + " with widget type : " + widgetType);
+            buffer.shiftNextBlock(false);
+        }
+    }
+
+    private void processAdd(final ReaderBuffer buffer, final int objectID) {
+        final PTObject ptObject = getPTObject(objectID);
+        if (ptObject != null) {
+            // ServerToClientModel.PARENT_OBJECT_ID
+            final int parentId = buffer.readBinaryModel().getIntValue();
+            final PTObject parentObject = getPTObject(parentId);
+            if (parentObject != null) {
+                parentObject.add(buffer, ptObject);
+                buffer.readBinaryModel(); // Read ServerToClientModel.END element
+            } else {
+                log.warning("Cannot add " + ptObject + " to an garbaged parent object #" + parentId
+                        + ", so we will consume all the buffer of this object");
+                buffer.shiftNextBlock(false);
+            }
+        } else {
+            log.warning("Add a null PTObject #" + objectID + ", so we will consume all the buffer of this object");
+            buffer.shiftNextBlock(false);
+        }
+    }
+
+    private void processUpdate(final ReaderBuffer buffer, final int objectID) {
+        final PTObject ptObject = getPTObject(objectID);
+        if (ptObject != null) {
+            BinaryModel binaryModel;
+            do {
+                binaryModel = buffer.readBinaryModel();
+                if (ServerToClientModel.END.getValue() != binaryModel.getModel().getValue()) {
+                    final boolean result = ptObject.update(buffer, binaryModel);
+                    if (!result) {
+                        log.warning("Update " + ptObject.getClass().getSimpleName() + " #" + objectID + " with key : " + binaryModel
+                                + " doesn't exist");
+                        buffer.shiftNextBlock(false);
+                        break;
+                    }
+                } else {
+                    break;
+                }
+            } while (buffer.hasEnoughKeyBytes());
+        } else {
+            log.warning("Update on a null PTObject #" + objectID + ", so we will consume all the buffer of this object");
+            buffer.shiftNextBlock(false);
+        }
+    }
+
+    private void processRemove(final ReaderBuffer buffer, final int objectID) {
+        final PTObject ptObject = getPTObject(objectID);
+        if (ptObject != null) {
+            final int parentId = buffer.readBinaryModel().getIntValue();
+            final PTObject parentObject = parentId != -1 ? getPTObject(parentId) : ptObject;
+
+            if (parentObject != null) {
+                parentObject.remove(buffer, ptObject);
+                buffer.readBinaryModel(); // Read ServerToClientModel.END element
+            } else {
+                log.warning("Cannot remove " + ptObject + " on a garbaged object #" + parentId);
+                buffer.shiftNextBlock(false);
+            }
+        } else {
+            log.warning("Remove a null PTObject #" + objectID + ", so we will consume all the buffer of this object");
+            buffer.shiftNextBlock(false);
+        }
+    }
+
+    private void processAddHandler(final ReaderBuffer buffer, final int objectID) {
+        // ServerToClientModel.HANDLER_TYPE
+        final HandlerModel handlerModel = HandlerModel.fromRawValue(buffer.readBinaryModel().getIntValue());
+
+        if (HandlerModel.HANDLER_STREAM_REQUEST == handlerModel) {
+            new PTStreamResource().addHandler(buffer, handlerModel);
+            buffer.readBinaryModel(); // Read ServerToClientModel.END element
+        } else {
+            final PTObject ptObject = getPTObject(objectID);
+            if (ptObject != null) {
+                ptObject.addHandler(buffer, handlerModel);
+                buffer.readBinaryModel(); // Read ServerToClientModel.END element
+            } else {
+                log.warning("Add handler on a null PTObject #" + objectID + ", so we will consume all the buffer of this object");
+                buffer.shiftNextBlock(false);
+            }
+        }
+    }
+
+    private void processRemoveHandler(final ReaderBuffer buffer, final int objectID) {
+        final PTObject ptObject = getPTObject(objectID);
+        if (ptObject != null) {
+            // ServerToClientModel.HANDLER_TYPE
+            final HandlerModel handlerModel = HandlerModel.fromRawValue(buffer.readBinaryModel().getIntValue());
+            ptObject.removeHandler(buffer, handlerModel);
+            buffer.readBinaryModel(); // Read ServerToClientModel.END element
+        } else {
+            log.warning("Remove handler on a null PTObject #" + objectID + ", so we will consume all the buffer of this object");
+            buffer.shiftNextBlock(false);
+        }
+    }
+
+    private void processHistory(final ReaderBuffer buffer, final String token) {
+        final String oldToken = History.getToken();
+
+        // ServerToClientModel.HISTORY_FIRE_EVENTS
+        final boolean fireEvents = buffer.readBinaryModel().getBooleanValue();
+        if (oldToken != null && oldToken.equals(token)) {
+            if (fireEvents) History.fireCurrentHistoryState();
+        } else {
+            History.newItem(token, fireEvents);
+        }
+
+        buffer.readBinaryModel(); // Read ServerToClientModel.END element
+    }
+
+    private void processGC(final ReaderBuffer buffer, final int objectID) {
+        final PTObject ptObject = unregisterObject(objectID);
+        if (ptObject != null) {
+            ptObject.destroy();
+            buffer.readBinaryModel(); // Read ServerToClientModel.END element
+        } else {
+            log.warning("Cannot GC a garbaged PTObject #" + objectID);
+            buffer.shiftNextBlock(false);
+        }
+    }
+
+    private PTObject unregisterObject(final int objectID) {
+        final PTObject ptObject = objectByID.get(objectID);
+        objectByID.remove(objectID);
+        final UIObject uiObject = widgetIDByObjectID.get(objectID);
+        widgetIDByObjectID.remove(objectID);
+        if (uiObject != null) objectIDByWidget.remove(uiObject);
+        return ptObject;
+    }
+
+    private void destroy() {
+        PTWindowManager.closeAll();
+        Browser.getWindow().getLocation().reload();
+    }
+
+    public void sendDataToServer(final Widget widget, final PTInstruction instruction) {
+        if (log.isLoggable(Level.FINE)) {
+            if (widget != null) {
+                final Element source = widget.getElement();
+                if (source != null) log.fine("Action triggered, Instruction [" + instruction + "] , " + source.getInnerHTML());
+            }
+        }
+        sendDataToServer(instruction);
+    }
+
+    public void sendDataToServer(final JSONValue instruction) {
+        requestBuilder.send(instruction);
+    }
+
+    public void sendDataToServer(final JSONObject instruction) {
+        final PTInstruction requestData = new PTInstruction();
+        final JSONArray jsonArray = new JSONArray();
+        jsonArray.set(0, instruction);
+        requestData.put(ClientToServerModel.APPLICATION_INSTRUCTIONS, jsonArray);
+
+        if (log.isLoggable(Level.FINE)) log.log(Level.FINE, "Data to send " + requestData.toString());
+
+        requestBuilder.send(requestData);
+    }
+
+    public void sendExceptionMessageToServer(final Throwable t) {
+        log.log(Level.SEVERE, "PonySDK has encountered an internal error : ", t);
+        sendErrorMessageToServer(
+            t.getClass().getCanonicalName() + " : " + t.getMessage() + " : " + Arrays.toString(t.getStackTrace()));
+    }
+
+    public void sendErrorMessageToServer(final String message) {
+        final PTInstruction requestData = new PTInstruction();
+        requestData.put(ClientToServerModel.ERROR_MSG, message);
+        requestBuilder.send(requestData);
+    }
+
+    public void sendErrorMessageToServer(final String message, final int objectID) {
+        final PTInstruction requestData = new PTInstruction();
+        requestData.put(ClientToServerModel.ERROR_MSG, message);
+        requestData.put(ClientToServerModel.OBJECT_ID, objectID);
+        requestBuilder.send(requestData);
+    }
+
+    public void sendWarningMessageToServer(final String message) {
+        final PTInstruction requestData = new PTInstruction();
+        requestData.put(ClientToServerModel.WARN_MSG, message);
+        requestBuilder.send(requestData);
+    }
+
+    public void sendWarningMessageToServer(final String message, final int objectID) {
+        final PTInstruction requestData = new PTInstruction();
+        requestData.put(ClientToServerModel.WARN_MSG, message);
+        requestData.put(ClientToServerModel.OBJECT_ID, objectID);
+        requestBuilder.send(requestData);
+    }
+
+    public void sendInfoMessageToServer(final String message) {
+        final PTInstruction requestData = new PTInstruction();
+        requestData.put(ClientToServerModel.INFO_MSG, message);
+        requestBuilder.send(requestData);
+    }
+
+    public void sendInfoMessageToServer(final String message, final int objectID) {
+        final PTInstruction requestData = new PTInstruction();
+        requestData.put(ClientToServerModel.INFO_MSG, message);
+        requestData.put(ClientToServerModel.OBJECT_ID, objectID);
+        requestBuilder.send(requestData);
+    }
+
+    public PTObject getPTObject(final int id) {
+        final PTObject ptObject = objectByID.get(id);
+        if (ptObject == null) {
+            log.warning("PTObject #" + id + " not found");
+            sendWarningMessageToServer("PTObject #" + id + " not found", id);
+        }
+        return ptObject;
+    }
+
+    public PTObject getPTObject(final UIObject uiObject) {
+        final Integer objectID = objectIDByWidget.get(uiObject);
+        if (objectID != null) return getPTObject(objectID.intValue());
+        return null;
+    }
+
+    public void registerUIObject(final Integer ID, final UIObject uiObject) {
+        objectIDByWidget.put(uiObject, ID);
+        widgetIDByObjectID.put(ID, uiObject);
+    }
+
+    void registerJavascriptAddOnFactory(final String signature, final JavascriptAddOnFactory javascriptAddOnFactory) {
+        this.javascriptAddOnFactories.put(signature, javascriptAddOnFactory);
+    }
+
+    public JavascriptAddOnFactory getJavascriptAddOnFactory(final String signature) {
+        return javascriptAddOnFactories.get(signature);
+    }
+
+    void setReadyWindow(final int windowID) {
+        final PTWindow window = PTWindowManager.getWindow(windowID);
+        if (window != null) window.setReady();
+        else log.warning("Window " + windowID + " doesn't exist");
+    }
+
+    void setReadyFrame(final int frameID) {
+        final PTFrame frame = (PTFrame) getPTObject(frameID);
+        if (frame != null) frame.setReady();
+        else log.warning("Frame " + frame + " doesn't exist");
+    }
+
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/terminal/model/ReaderBuffer.java b/ponysdk/src/main/java/com/ponysdk/core/terminal/model/ReaderBuffer.java
index dd008c16..fb6cde90 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/terminal/model/ReaderBuffer.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/terminal/model/ReaderBuffer.java
@@ -240,11 +240,11 @@ public class ReaderBuffer {
         modelSize += ValueTypeModel.BYTE_SIZE;
         int stringLength = getUnsignedByte();
         boolean ascii = true;
-        if (stringLength > ValueTypeModel.STRING_ASCII_UINT8) {
+        if (stringLength > ValueTypeModel.STRING_ASCII_UINT8_MAX_LENGTH) {
             if (stringLength == ValueTypeModel.STRING_ASCII_UINT16) {
                 modelSize += ValueTypeModel.SHORT_SIZE;
                 stringLength = getUnsignedShort();
-            } else if (stringLength == ValueTypeModel.STRING_ASCII_UINT32) {
+            } else if (stringLength == ValueTypeModel.STRING_ASCII_INT32) {
                 modelSize += ValueTypeModel.INTEGER_SIZE;
                 stringLength = getInt();
             } else {
@@ -318,7 +318,7 @@ public class ReaderBuffer {
             ascii = true;
         } else if (arrayValueModel == ArrayValueModel.STRING_UTF8_UINT8_LENGTH
                 || arrayValueModel == ArrayValueModel.STRING_UTF8_UINT16_LENGTH
-                || arrayValueModel == ArrayValueModel.STRING_UTF8_UINT32_LENGTH) {
+                || arrayValueModel == ArrayValueModel.STRING_UTF8_INT32_LENGTH) {
             ascii = false;
         } else {
             throw new IllegalArgumentException("Unsupported ArrayValueModel " + arrayValueModel);
@@ -439,7 +439,7 @@ public class ReaderBuffer {
 
     private void shiftString() {
         int messageSize = getUnsignedByte();
-        if (messageSize > ValueTypeModel.STRING_ASCII_UINT8) {
+        if (messageSize > ValueTypeModel.STRING_ASCII_UINT8_MAX_LENGTH) {
             if (messageSize == ValueTypeModel.STRING_UTF8_UINT8) {
                 messageSize = getUnsignedByte();
             } else if (messageSize == ValueTypeModel.STRING_ASCII_UINT16 || messageSize == ValueTypeModel.STRING_UTF8_UINT16) {
diff --git a/ponysdk/src/main/java/com/ponysdk/core/terminal/socket/WebSocketClient.java b/ponysdk/src/main/java/com/ponysdk/core/terminal/socket/WebSocketClient.java
index 70af0fb5..fe8bb4e1 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/terminal/socket/WebSocketClient.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/terminal/socket/WebSocketClient.java
@@ -1,110 +1,110 @@
-/*
- * Copyright (c) 2011 PonySDK
- *  Owners:
- *  Luciano Broussal  <luciano.broussal AT gmail.com>
- *  Mathieu Barbier   <mathieu.barbier AT gmail.com>
- *  Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
- *
- *  WebSite:
- *  http://code.google.com/p/pony-sdk/
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-
-package com.ponysdk.core.terminal.socket;
-
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
-import com.ponysdk.core.terminal.ReconnectionChecker;
-import com.ponysdk.core.terminal.UIBuilder;
-import com.ponysdk.core.terminal.request.WebSocketRequestBuilder;
-
-import elemental.client.Browser;
-import elemental.events.CloseEvent;
-import elemental.events.MessageEvent;
-import elemental.html.ArrayBuffer;
-import elemental.html.WebSocket;
-import elemental.html.Window;
-
-public class WebSocketClient {
-
-    private static final Logger log = Logger.getLogger(WebSocketClient.class.getName());
-
-    private final Window window;
-    private final WebSocket webSocket;
-
-    private long lastMessageTime = -1;
-
-    public WebSocketClient(final String url, final UIBuilder uiBuilder, final ReconnectionChecker reconnectionChecker) {
-        this.window = Browser.getWindow();
-        this.webSocket = window.newWebSocket(url);
-        this.webSocket.setBinaryType("arraybuffer");
-
-        webSocket.setOnopen(event -> {
-            uiBuilder.init(new WebSocketRequestBuilder(WebSocketClient.this));
-            if (log.isLoggable(Level.INFO)) log.info("WebSocket connected");
-            lastMessageTime = System.currentTimeMillis();
-        });
-
-        webSocket.setOnclose(event -> {
-            if (event instanceof CloseEvent) {
-                final CloseEvent closeEvent = (CloseEvent) event;
-                final int statusCode = closeEvent.getCode();
-                if (log.isLoggable(Level.INFO)) log.info("WebSocket disconnected : " + statusCode);
-                // If it's a not normal disconnection
-                if (statusCode != 1000) reconnectionChecker.detectConnectionFailure();
-            } else {
-                log.severe("WebSocket disconnected : " + event);
-                reconnectionChecker.detectConnectionFailure();
-            }
-        });
-
-        webSocket.setOnerror(event -> {
-            log.severe("WebSocket error : " + event);
-        });
-        webSocket.setOnmessage(event -> {
-            lastMessageTime = System.currentTimeMillis();
-
-            final Object data = ((MessageEvent) event).getData();
-            if (data instanceof ArrayBuffer) {
-                final ArrayBuffer buffer = (ArrayBuffer) data; //TODO nciaravola avoid cast ?
-                try {
-                    uiBuilder.updateMainTerminal(window.newUint8Array(buffer, 0, buffer.getByteLength()));
-                } catch (final Exception e) {
-                    log.log(Level.SEVERE, "Error while processing the " + buffer, e);
-                }
-            }
-        });
-    }
-
-    public void send(final String message) {
-        webSocket.send(message);
-    }
-
-    public void close() {
-        webSocket.close();
-    }
-
-    public void close(final int code, final String reason) {
-        webSocket.close(code, reason);
-    }
-
-    /**
-     * @return the lastMessageTime
-     */
-    public long getLastMessageTime() {
-        return lastMessageTime;
-    }
-
-}
+/*
+ * Copyright (c) 2011 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *  Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *  Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.terminal.socket;
+
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+import com.ponysdk.core.terminal.ReconnectionChecker;
+import com.ponysdk.core.terminal.UIBuilder;
+import com.ponysdk.core.terminal.request.WebSocketRequestBuilder;
+
+import elemental.client.Browser;
+import elemental.events.CloseEvent;
+import elemental.events.MessageEvent;
+import elemental.html.ArrayBuffer;
+import elemental.html.WebSocket;
+import elemental.html.Window;
+
+public class WebSocketClient {
+
+    private static final Logger log = Logger.getLogger(WebSocketClient.class.getName());
+
+    private final Window window;
+    private final WebSocket webSocket;
+
+    private long lastMessageTime = -1;
+
+    public WebSocketClient(final String url, final UIBuilder uiBuilder, final ReconnectionChecker reconnectionChecker) {
+        this.window = Browser.getWindow();
+        this.webSocket = window.newWebSocket(url);
+        this.webSocket.setBinaryType("arraybuffer");
+
+        webSocket.setOnopen(event -> {
+            uiBuilder.init(new WebSocketRequestBuilder(WebSocketClient.this));
+            if (log.isLoggable(Level.INFO)) log.info("WebSocket connected");
+            lastMessageTime = System.currentTimeMillis();
+        });
+
+        webSocket.setOnclose(event -> {
+            if (event instanceof CloseEvent) {
+                final CloseEvent closeEvent = (CloseEvent) event;
+                final int statusCode = closeEvent.getCode();
+                if (log.isLoggable(Level.INFO)) log.info("WebSocket disconnected : " + statusCode);
+                // If it's a not normal disconnection
+                if (statusCode != 1000) reconnectionChecker.detectConnectionFailure();
+            } else {
+                log.severe("WebSocket disconnected : " + event);
+                reconnectionChecker.detectConnectionFailure();
+            }
+        });
+
+        webSocket.setOnerror(event -> {
+            log.severe("WebSocket error : " + event);
+        });
+        webSocket.setOnmessage(event -> {
+            lastMessageTime = System.currentTimeMillis();
+
+            final Object data = ((MessageEvent) event).getData();
+            if (data instanceof ArrayBuffer) {
+                final ArrayBuffer buffer = (ArrayBuffer) data; //TODO nciaravola avoid cast ?
+                try {
+                    uiBuilder.updateMainTerminal(window.newUint8Array(buffer, 0, buffer.getByteLength()));
+                } catch (final Exception e) {
+                    log.log(Level.SEVERE, "Error while processing the " + buffer, e);
+                }
+            }
+        });
+    }
+
+    public void send(final String message) {
+        webSocket.send(message);
+    }
+
+    public void close() {
+        webSocket.close();
+    }
+
+    public void close(final int code, final String reason) {
+        webSocket.close(code, reason);
+    }
+
+    /**
+     * @return the lastMessageTime
+     */
+    public long getLastMessageTime() {
+        return lastMessageTime;
+    }
+
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/terminal/ui/PTUIObject.java b/ponysdk/src/main/java/com/ponysdk/core/terminal/ui/PTUIObject.java
index e57096df..cbfe2833 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/terminal/ui/PTUIObject.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/terminal/ui/PTUIObject.java
@@ -96,6 +96,9 @@ public abstract class PTUIObject<T extends UIObject> extends AbstractPTObject {
             if (binaryModel.getBooleanValue()) uiObject.getElement().focus();
             else uiObject.getElement().blur();
             return true;
+        } else if (ServerToClientModel.FOCUS_PREVENT_SCROLL == model) {
+            focusPreventScroll(uiObject.getElement());
+            return true;
         } else if (ServerToClientModel.WIDGET_WIDTH == model) {
             uiObject.setWidth(binaryModel.getStringValue());
             return true;
@@ -139,4 +142,8 @@ public abstract class PTUIObject<T extends UIObject> extends AbstractPTObject {
                                                                                                nativeObject.update(data);
                                                                                                }-*/;
 
+    private native void focusPreventScroll(Element element) /*-{
+                                                            element.focus({preventScroll: true});
+                                                            }-*/;
+
 }
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/activity/ActivityMapper.java b/ponysdk/src/main/java/com/ponysdk/core/ui/activity/ActivityMapper.java
index 5b878cd3..dabe342a 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/activity/ActivityMapper.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/activity/ActivityMapper.java
@@ -35,8 +35,8 @@ public interface ActivityMapper {
     /**
      * Returns the activity to run for the given {@link Place}, or null.
      *
-     * @param place a Place
-     * @return The activity linked to the place
+     * @param place
+     *            a Place
      */
     Activity getActivity(Place place);
 }
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/Element.java b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/Element.java
index c50cc504..378a5b68 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/Element.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/Element.java
@@ -48,6 +48,7 @@ public class Element {
     public static final String E_TABLE = "table";
     public static final String E_TBODY = "tbody";
     public static final String E_THEAD = "thead";
+    public static final String E_TFOOT = "tfoot";
     public static final String E_TH = "th";
     public static final String E_TR = "tr";
     public static final String E_TD = "td";
@@ -494,6 +495,10 @@ public class Element {
         return newPElement(E_TABLE);
     }
 
+    public static final PElement newTfoot() {
+        return newPElement(E_TFOOT);
+    }
+
     public static final PElement newThead() {
         return newPElement(E_THEAD);
     }
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PAnchor.java b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PAnchor.java
index 55e688f8..fe05fd0d 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PAnchor.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PAnchor.java
@@ -23,13 +23,13 @@
 
 package com.ponysdk.core.ui.basic;
 
+import java.util.Objects;
+import java.util.stream.Collectors;
+
 import com.ponysdk.core.model.ServerToClientModel;
 import com.ponysdk.core.model.WidgetType;
 import com.ponysdk.core.writer.ModelWriter;
 
-import java.util.Objects;
-import java.util.stream.Collectors;
-
 /**
  * A widget that represents a simple &lt;a&gt; element.
  * <h3>CSS Style Rules</h3>
@@ -132,17 +132,8 @@ public class PAnchor extends PFocusWidget {
     }
 
     @Override
-    public String dumpDOM() {
-        StringBuilder DOM = new StringBuilder();
-        DOM.append("<a");
-        DOM.append(" pid=\"" + ID + "\"");
-        DOM.append(" class=\"" + getStyleNames().collect(Collectors.joining(" ")) + "\"");
-        if (href != null) DOM.append(" href=\"" + href + "\"");
-        DOM.append(">");
-        if (getText() != null) DOM.append(getText());
-        if (getHTML() != null) DOM.append(getHTML());
-        DOM.append("</a>");
-        return DOM.toString();
+    protected String dumpDOM() {
+        return "<a class=\"" + getStyleNames().collect(Collectors.joining(" ")) + "\">" + (text != null ? text : html) + "</a>";
     }
 
 }
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PButtonBase.java b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PButtonBase.java
index d3c75401..37bec8a9 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PButtonBase.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PButtonBase.java
@@ -23,12 +23,12 @@
 
 package com.ponysdk.core.ui.basic;
 
-import com.ponysdk.core.model.ServerToClientModel;
-import com.ponysdk.core.writer.ModelWriter;
-
 import java.util.Objects;
 import java.util.stream.Collectors;
 
+import com.ponysdk.core.model.ServerToClientModel;
+import com.ponysdk.core.writer.ModelWriter;
+
 /**
  * Abstract base class for {@link PButton}, {@link PCheckBox}.
  *
@@ -101,15 +101,7 @@ abstract class PButtonBase extends PFocusWidget {
     }
 
     @Override
-    public String dumpDOM() {
-        StringBuilder DOM = new StringBuilder();
-        DOM.append("<button");
-        DOM.append(" pid=\"" + ID + "\"");
-        DOM.append(" class=\"" + getStyleNames().collect(Collectors.joining(" ")) + "\"");
-        DOM.append(">");
-        if (getText() != null) DOM.append(getText());
-        if (getHTML() != null) DOM.append(getHTML());
-        DOM.append("</button>");
-        return DOM.toString();
+    protected String dumpDOM() {
+        return "<button class=\"" + getStyleNames().collect(Collectors.joining(" ")) + "\">" + text != null ? text : html + "</button>";
     }
 }
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PCellFormatter.java b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PCellFormatter.java
index 85b85e51..29f8843c 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PCellFormatter.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PCellFormatter.java
@@ -29,6 +29,8 @@ import com.ponysdk.core.model.ServerToClientModel;
 
 /**
  * This class contains methods used to format a table's cells.
+ *
+ * @ee com.google.gwt.user.client.ui.HTMLTable.CellFormatter
  */
 public class PCellFormatter {
 
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PCheckBox.java b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PCheckBox.java
index 75bda86c..6b8d6df0 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PCheckBox.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PCheckBox.java
@@ -23,6 +23,14 @@
 
 package com.ponysdk.core.ui.basic;
 
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
+import java.util.Objects;
+
+import javax.json.JsonObject;
+
 import com.ponysdk.core.model.ClientToServerModel;
 import com.ponysdk.core.model.PCheckBoxState;
 import com.ponysdk.core.model.ServerToClientModel;
@@ -30,10 +38,6 @@ import com.ponysdk.core.model.WidgetType;
 import com.ponysdk.core.ui.basic.event.PValueChangeEvent;
 import com.ponysdk.core.ui.basic.event.PValueChangeHandler;
 
-import javax.json.JsonObject;
-import java.util.*;
-import java.util.stream.Collectors;
-
 /**
  * A standard check box widget.
  * This class also serves as a base class for {@link PRadioButton}.
@@ -62,7 +66,8 @@ public class PCheckBox extends PButtonBase implements HasPValue<Boolean>, PValue
     /**
      * Creates a check box with the specified text label.
      *
-     * @param label the check box's label
+     * @param label
+     *            the check box's label
      */
     protected PCheckBox(final String label) {
         super(label);
@@ -103,7 +108,7 @@ public class PCheckBox extends PButtonBase implements HasPValue<Boolean>, PValue
      * Determines whether this check box is currently checked.
      *
      * @return <code>true</code> if the check box is checked, false otherwise.
-     * Will not return null
+     *         Will not return null
      */
     @Override
     public Boolean getValue() {
@@ -113,7 +118,8 @@ public class PCheckBox extends PButtonBase implements HasPValue<Boolean>, PValue
     /**
      * Checks or unchecks the check box.
      *
-     * @param value true to check, false to uncheck; null value implies false
+     * @param value
+     *            true to check, false to uncheck; null value implies false
      */
     @Override
     public void setValue(final Boolean value) {
@@ -133,7 +139,7 @@ public class PCheckBox extends PButtonBase implements HasPValue<Boolean>, PValue
         if (!isVisible() || !isEnabled()) return;
         if (jsonObject.containsKey(ClientToServerModel.HANDLER_BOOLEAN_VALUE_CHANGE.toStringValue())) {
             onValueChange(new PValueChangeEvent<>(this,
-                    jsonObject.getBoolean(ClientToServerModel.HANDLER_BOOLEAN_VALUE_CHANGE.toStringValue())));
+                jsonObject.getBoolean(ClientToServerModel.HANDLER_BOOLEAN_VALUE_CHANGE.toStringValue())));
         } else {
             super.onClientData(jsonObject);
         }
@@ -144,17 +150,4 @@ public class PCheckBox extends PButtonBase implements HasPValue<Boolean>, PValue
         return super.toString() + ", state=" + state;
     }
 
-    @Override
-    public String dumpDOM() {
-        StringBuilder DOM = new StringBuilder();
-        DOM.append("<input type=\"checkbox\"");
-        DOM.append(" pid=\"" + ID + "\"");
-        if (state == PCheckBoxState.CHECKED) DOM.append(" checked");
-        DOM.append(" class=\"" + getStyleNames().collect(Collectors.joining(" ")) + "\"");
-        DOM.append(">");
-        if (getText() != null) DOM.append(getText());
-        if (getHTML() != null) DOM.append(getHTML());
-        DOM.append("</input>");
-        return DOM.toString();
-    }
 }
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PComplexPanel.java b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PComplexPanel.java
index bf96c771..4d7e0ffc 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PComplexPanel.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PComplexPanel.java
@@ -23,12 +23,12 @@
 
 package com.ponysdk.core.ui.basic;
 
-import com.ponysdk.core.model.ServerToClientModel;
-import com.ponysdk.core.ui.model.ServerBinaryModel;
-
 import java.util.Collections;
 import java.util.Iterator;
 
+import com.ponysdk.core.model.ServerToClientModel;
+import com.ponysdk.core.ui.model.ServerBinaryModel;
+
 /**
  * Abstract base class for panels that can contain multiple child widgets.
  */
@@ -55,7 +55,7 @@ public abstract class PComplexPanel extends PPanel {
             return true;
         } else if (this.window != window) {
             throw new IllegalAccessError(
-                    "Widget already attached to an other window, current window : #" + this.window + ", new window : #" + window);
+                "Widget already attached to an other window, current window : #" + this.window + ", new window : #" + window);
         }
 
         return false;
@@ -78,7 +78,7 @@ public abstract class PComplexPanel extends PPanel {
         } else {
             if (initialized) {
                 throw new IllegalAccessError(
-                        "Can't attach widget " + child + " to window #" + window + " because it's already attached to window #" + child);
+                    "Can't attach widget " + child + " to window #" + window + " because it's already attached to window #" + child);
             } else {
                 throw new IllegalAccessError("Can't only attach widget " + child + " to window #" + child.getWindow()
                         + ". Need to attach the new parent to the same window before");
@@ -157,10 +157,10 @@ public abstract class PComplexPanel extends PPanel {
     }
 
     @Override
-    public String dumpDOM() {
-        String DOM = "<div pid=\"" + ID + "\">";
+    protected String dumpDOM() {
+        String DOM = "<div>";
 
-        Iterator<PWidget> iter = children.iterator();
+        final Iterator<PWidget> iter = children.iterator();
         while (iter.hasNext()) {
             DOM += iter.next().dumpDOM();
         }
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PDateBox.java b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PDateBox.java
index bfef29ca..2354831c 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PDateBox.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PDateBox.java
@@ -23,20 +23,37 @@
 
 package com.ponysdk.core.ui.basic;
 
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Date;
+import java.util.List;
+import java.util.Objects;
+
+import javax.json.JsonObject;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.ponysdk.core.model.ClientToServerModel;
 import com.ponysdk.core.model.ServerToClientModel;
 import com.ponysdk.core.model.WidgetType;
 import com.ponysdk.core.server.application.UIContext;
-import com.ponysdk.core.ui.basic.event.*;
+import com.ponysdk.core.ui.basic.event.PBlurEvent;
+import com.ponysdk.core.ui.basic.event.PBlurHandler;
+import com.ponysdk.core.ui.basic.event.PClickEvent;
+import com.ponysdk.core.ui.basic.event.PClickHandler;
+import com.ponysdk.core.ui.basic.event.PDoubleClickEvent;
+import com.ponysdk.core.ui.basic.event.PDoubleClickHandler;
+import com.ponysdk.core.ui.basic.event.PFocusEvent;
+import com.ponysdk.core.ui.basic.event.PFocusHandler;
+import com.ponysdk.core.ui.basic.event.PMouseOverEvent;
+import com.ponysdk.core.ui.basic.event.PValueChangeEvent;
+import com.ponysdk.core.ui.basic.event.PValueChangeHandler;
 import com.ponysdk.core.ui.eventbus.HandlerRegistration;
 import com.ponysdk.core.writer.ModelWriter;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import javax.json.JsonObject;
-import java.text.ParseException;
-import java.text.SimpleDateFormat;
-import java.util.*;
 
 /**
  * A text box that shows a {@link PDatePicker} when the user focuses on it.
@@ -230,7 +247,7 @@ public class PDateBox extends PWidget implements Focusable, HasPValue<Date>, PVa
     }
 
     @Override
-    public String dumpDOM() {
-        return "<input pid=\"" + ID + "\" format=\"" + dateFormat.toPattern() + "\">" + (date == null ? "" : date) + "</input>";
+    protected String dumpDOM() {
+        return "<input format=\"" + dateFormat.toPattern() + "\">" + date + "</input>";
     }
 }
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PDatePicker.java b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PDatePicker.java
index db7eb177..e830cd77 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PDatePicker.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PDatePicker.java
@@ -23,6 +23,21 @@
 
 package com.ponysdk.core.ui.basic;
 
+import java.text.DateFormat;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Date;
+import java.util.List;
+import java.util.Objects;
+
+import javax.json.JsonObject;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.ponysdk.core.model.ClientToServerModel;
 import com.ponysdk.core.model.DateConverter;
 import com.ponysdk.core.model.ServerToClientModel;
@@ -31,14 +46,6 @@ import com.ponysdk.core.ui.basic.event.PShowRangeEvent;
 import com.ponysdk.core.ui.basic.event.PShowRangeHandler;
 import com.ponysdk.core.ui.basic.event.PValueChangeEvent;
 import com.ponysdk.core.ui.basic.event.PValueChangeHandler;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import javax.json.JsonObject;
-import java.text.DateFormat;
-import java.text.ParseException;
-import java.text.SimpleDateFormat;
-import java.util.*;
 
 // FIXME Need to manipulate LocalDate instead of Date to avoid timezone issues
 public class PDatePicker extends PWidget implements HasPValue<Date>, PValueChangeHandler<Date> {
@@ -168,14 +175,12 @@ public class PDatePicker extends PWidget implements HasPValue<Date>, PValueChang
      * next time the DatePicker is refreshed.
      */
     public final void setTransientEnabledOnDates(final boolean enabled, final Collection<Date> dates) {
-        final Long[][] encodedDates = DateConverter.encode(dates);
-        if (encodedDates != null) {
-            for (final Long[] part : encodedDates) {
-                saveUpdate(writer -> {
-                    writer.write(ServerToClientModel.DATE_ENABLED, part);
-                    writer.write(ServerToClientModel.ENABLED, enabled);
-                });
-            }
+        final Long[] encodedDates = DateConverter.encode(dates);
+        if (encodedDates != null && encodedDates.length > 0) {
+            saveUpdate(writer -> {
+                writer.write(ServerToClientModel.DATE_ENABLED, encodedDates);
+                writer.write(ServerToClientModel.ENABLED, enabled);
+            });
         }
     }
 
@@ -183,14 +188,12 @@ public class PDatePicker extends PWidget implements HasPValue<Date>, PValueChang
      * Add a style name to the given dates.
      */
     public void addStyleToDates(final String styleName, final Collection<Date> dates) {
-        final Long[][] encodedDates = DateConverter.encode(dates);
-        if (encodedDates != null) {
-            for (final Long[] part : encodedDates) {
-                saveUpdate(writer -> {
-                    writer.write(ServerToClientModel.ADD_DATE_STYLE, part);
-                    writer.write(ServerToClientModel.STYLE_NAME, styleName);
-                });
-            }
+        final Long[] encodedDates = DateConverter.encode(dates);
+        if (encodedDates != null && encodedDates.length > 0) {
+            saveUpdate(writer -> {
+                writer.write(ServerToClientModel.ADD_DATE_STYLE, encodedDates);
+                writer.write(ServerToClientModel.STYLE_NAME, styleName);
+            });
         }
     }
 
@@ -198,14 +201,12 @@ public class PDatePicker extends PWidget implements HasPValue<Date>, PValueChang
      * Removes the styleName from the given dates (even if it is transient).
      */
     public void removeStyleFromDates(final String styleName, final Collection<Date> dates) {
-        final Long[][] encodedDates = DateConverter.encode(dates);
-        if (encodedDates != null) {
-            for (final Long[] part : encodedDates) {
-                saveUpdate(writer -> {
-                    writer.write(ServerToClientModel.REMOVE_DATE_STYLE, part);
-                    writer.write(ServerToClientModel.STYLE_NAME, styleName);
-                });
-            }
+        final Long[] encodedDates = DateConverter.encode(dates);
+        if (encodedDates != null && encodedDates.length > 0) {
+            saveUpdate(writer -> {
+                writer.write(ServerToClientModel.REMOVE_DATE_STYLE, encodedDates);
+                writer.write(ServerToClientModel.STYLE_NAME, styleName);
+            });
         }
     }
 
@@ -234,7 +235,7 @@ public class PDatePicker extends PWidget implements HasPValue<Date>, PValueChang
     }
 
     @Override
-    public String dumpDOM() {
-        return "<date pid=\"" + ID + "\" year=\"" + year + "\" month=\"" + month + "\" day=\"" + day + "\"></date>";
+    protected String dumpDOM() {
+        return "<date year=\"" + year + "\" month=\"" + month + "\" day=\"" + day + "\"></date>";
     }
 }
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PDisclosurePanel.java b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PDisclosurePanel.java
index 860c8296..debcd17b 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PDisclosurePanel.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PDisclosurePanel.java
@@ -23,15 +23,24 @@
 
 package com.ponysdk.core.ui.basic;
 
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Objects;
+
+import javax.json.JsonObject;
+
 import com.ponysdk.core.model.ClientToServerModel;
 import com.ponysdk.core.model.ServerToClientModel;
 import com.ponysdk.core.model.WidgetType;
-import com.ponysdk.core.ui.basic.event.*;
+import com.ponysdk.core.ui.basic.event.HasPWidgets;
+import com.ponysdk.core.ui.basic.event.PCloseEvent;
+import com.ponysdk.core.ui.basic.event.PCloseHandler;
+import com.ponysdk.core.ui.basic.event.POpenEvent;
+import com.ponysdk.core.ui.basic.event.POpenHandler;
 import com.ponysdk.core.writer.ModelWriter;
 
-import javax.json.JsonObject;
-import java.util.*;
-
 /**
  * A widget that consists of a header and a content panel that discloses the content when a user clicks on the header.
  * <h3>CSS Style Rules</h3>
@@ -157,6 +166,7 @@ public class PDisclosurePanel extends PWidget implements HasPWidgets, PAcceptsOn
     private void adopt(final PWidget child) {
         if (child.getParent() == null) child.setParent(this);
         else throw new IllegalStateException("Can't adopt an already widget attached to a parent");
+
     }
 
     public void addCloseHandler(final PCloseHandler handler) {
@@ -174,8 +184,8 @@ public class PDisclosurePanel extends PWidget implements HasPWidgets, PAcceptsOn
     public void setOpen(final boolean isOpen) {
         if (Objects.equals(this.isOpen, isOpen)) return;
         this.isOpen = isOpen;
-        if (isOpen) saveUpdate(ServerToClientModel.OPEN, true);
-        else saveUpdate(ServerToClientModel.CLOSE, false);
+        if (isOpen) saveUpdate(ServerToClientModel.OPEN, isOpen);
+        else saveUpdate(ServerToClientModel.CLOSE, isOpen);
     }
 
     public boolean isAnimationEnabled() {
@@ -189,7 +199,7 @@ public class PDisclosurePanel extends PWidget implements HasPWidgets, PAcceptsOn
     }
 
     @Override
-    public String dumpDOM() {
-        return "<div pid=\"" + ID + "\"><div>" + headerText + "</div>" + content.dumpDOM() + "</div>";
+    protected String dumpDOM() {
+        return "<div><div>" + headerText + "</div>" + content.dumpDOM() + "</div>";
     }
 }
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PElement.java b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PElement.java
index 58bf7125..25fbfe60 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PElement.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PElement.java
@@ -23,13 +23,13 @@
 
 package com.ponysdk.core.ui.basic;
 
+import java.util.Objects;
+import java.util.stream.Collectors;
+
 import com.ponysdk.core.model.ServerToClientModel;
 import com.ponysdk.core.model.WidgetType;
 import com.ponysdk.core.writer.ModelWriter;
 
-import java.util.Objects;
-import java.util.stream.Collectors;
-
 /**
  * All HTML element interfaces derive from this class.Useful to create native
  * HTML component.
@@ -84,22 +84,12 @@ public class PElement extends PComplexPanel {
     }
 
     @Override
-    public String dumpDOM() {
-        StringBuilder builder = new StringBuilder();
-        builder.append("<");
-        builder.append(tagName);
-        builder.append(" pid=\"" + ID + "\"");
-        if (!isVisible()) builder.append(" hidden");
-        builder.append(" class=\"" + getStyleNames().collect(Collectors.joining(" ")) + "\"");
-        builder.append(">");
+    protected String dumpDOM() {
         if (getWidgetCount() == 0) {
-            if (innerText != null) builder.append(innerText);
-            else builder.append(innerHTML);
+            return "<" + tagName + " class=\"" + getStyleNames().collect(Collectors.joining(" ")) + "\">" + (innerText != null ? innerText : innerHTML) + "</" + tagName + ">";
         } else {
-            builder.append(dumpChildDOM());
+            return "<" + tagName + " class=\"" + getStyleNames().collect(Collectors.joining(" ")) + "\">" + dumpChildDOM() + "</" + tagName + ">";
         }
-        builder.append("</" + tagName + ">");
-        return builder.toString();
     }
 
     private String dumpChildDOM() {
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PFileUpload.java b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PFileUpload.java
index 351a2c0f..d1fdbccc 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PFileUpload.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PFileUpload.java
@@ -23,6 +23,12 @@
 
 package com.ponysdk.core.ui.basic;
 
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Objects;
+
+import javax.json.JsonObject;
+
 import com.ponysdk.core.model.ClientToServerModel;
 import com.ponysdk.core.model.HandlerModel;
 import com.ponysdk.core.model.ServerToClientModel;
@@ -34,11 +40,6 @@ import com.ponysdk.core.ui.basic.event.PChangeHandler;
 import com.ponysdk.core.ui.basic.event.PSubmitCompleteHandler;
 import com.ponysdk.core.ui.eventbus.StreamHandler;
 
-import javax.json.JsonObject;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Objects;
-
 /**
  * A widget that wraps the HTML &lt;input type='file'&gt; element.
  */
@@ -77,9 +78,10 @@ public class PFileUpload extends PWidget implements HasPChangeHandlers {
     public void onClientData(final JsonObject jsonObject) {
         if (!isVisible()) return;
         if (jsonObject.containsKey(ClientToServerModel.HANDLER_CHANGE.toStringValue())) {
-            final String fName = jsonObject.getString(ClientToServerModel.HANDLER_CHANGE.toStringValue());
-            if (fName != null) setFileName(fName);
-            setFileSize(jsonObject.getInt(ClientToServerModel.SIZE.toStringValue()));
+            final String fileName = jsonObject.getString(ClientToServerModel.HANDLER_CHANGE.toStringValue());
+            if (fileName != null) setFileName(fileName);
+            final int fileSize = jsonObject.getInt(ClientToServerModel.SIZE.toStringValue());
+            setFileSize(fileSize);
 
             final PChangeEvent event = new PChangeEvent(this);
             changeHandlers.forEach(handler -> handler.onChange(event));
@@ -155,7 +157,7 @@ public class PFileUpload extends PWidget implements HasPChangeHandlers {
 
 
     @Override
-    public String dumpDOM() {
-        return "<upload pid=\"" + ID + "\"></upload>";
+    protected String dumpDOM() {
+        return "<upload></upload>";
     }
 }
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PFrame.java b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PFrame.java
index a356215c..20f1a43d 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PFrame.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PFrame.java
@@ -23,15 +23,16 @@
 
 package com.ponysdk.core.ui.basic;
 
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.json.JsonObject;
+
 import com.ponysdk.core.model.ClientToServerModel;
 import com.ponysdk.core.model.ServerToClientModel;
 import com.ponysdk.core.model.WidgetType;
 import com.ponysdk.core.writer.ModelWriter;
 
-import javax.json.JsonObject;
-import java.util.HashMap;
-import java.util.Map;
-
 public class PFrame extends PWidget {
 
     private final Map<String, PRootPanel> panelByZone = new HashMap<>(8);
@@ -90,8 +91,8 @@ public class PFrame extends PWidget {
         }
     }
 
-    public String dumpDOM() {
-        String DOM = "<frame pid=\"" + ID + "\">";
+    protected String dumpDOM() {
+        String DOM = "<frame>";
         for (PRootPanel panel : panelByZone.values()) {
             DOM += panel.dumpDOM();
         }
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PHTMLTable.java b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PHTMLTable.java
index b07bd191..9a582734 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PHTMLTable.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PHTMLTable.java
@@ -23,12 +23,21 @@
 
 package com.ponysdk.core.ui.basic;
 
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.Objects;
+import java.util.Set;
+import java.util.TreeMap;
+
 import com.ponysdk.core.model.ServerToClientModel;
 import com.ponysdk.core.ui.model.ServerBinaryModel;
 
-import java.util.*;
-import java.util.Map.Entry;
-
 /**
  * PHTMLTable contains the common table algorithms for {@link PGrid} and
  * {@link PFlexTable}.
@@ -243,7 +252,11 @@ public abstract class PHTMLTable<T extends PCellFormatter> extends PPanel {
         final Row irow = new Row(row);
         final Cell cell = new Cell(row, column);
         cellByWidget.put(widget, cell);
-        TreeMap<Integer, PWidget> cellByColumn = columnByRow.computeIfAbsent(irow, k -> new TreeMap<>());
+        TreeMap<Integer, PWidget> cellByColumn = columnByRow.get(irow);
+        if (cellByColumn == null) {
+            cellByColumn = new TreeMap<>();
+            columnByRow.put(irow, cellByColumn);
+        }
         cellByColumn.put(column, widget);
     }
 
@@ -300,7 +313,11 @@ public abstract class PHTMLTable<T extends PCellFormatter> extends PPanel {
         private Map<Integer, Set<String>> styleNames = new HashMap<>();
 
         public void addStyleName(final int row, final String styleName) {
-            Set<String> styles = styleNames.computeIfAbsent(row, k -> new HashSet<>());
+            Set<String> styles = styleNames.get(row);
+            if (styles == null) {
+                styles = new HashSet<>();
+                styleNames.put(row, styles);
+            }
 
             if (styles.add(styleName)) {
                 saveUpdate(writer -> {
@@ -404,8 +421,8 @@ public abstract class PHTMLTable<T extends PCellFormatter> extends PPanel {
 
 
     @Override
-    public String dumpDOM() {
-        String DOM = "<table pid=\"" + ID + "\">";
+    protected String dumpDOM() {
+        String DOM = "<table>";
 
         for (Entry<Row, TreeMap<Integer, PWidget>> entry : columnByRow.entrySet()) {
             DOM += "<tr row = \"" + entry.getKey().value + "\">";
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PHeaderPanel.java b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PHeaderPanel.java
index 53827f92..763f750c 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PHeaderPanel.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PHeaderPanel.java
@@ -23,14 +23,14 @@
 
 package com.ponysdk.core.ui.basic;
 
-import com.ponysdk.core.model.ServerToClientModel;
-import com.ponysdk.core.model.WidgetType;
-import com.ponysdk.core.ui.model.ServerBinaryModel;
-
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 
+import com.ponysdk.core.model.ServerToClientModel;
+import com.ponysdk.core.model.WidgetType;
+import com.ponysdk.core.ui.model.ServerBinaryModel;
+
 /**
  * A panel that includes a header (top), footer (bottom), and content (middle)
  * area. The header and footer areas resize naturally. The content area is
@@ -134,7 +134,7 @@ public class PHeaderPanel extends PPanel {
     }
 
     @Override
-    public String dumpDOM() {
-        return "<div pid=\"" + ID + "\">" + header.dumpDOM() + content.dumpDOM() + footer.dumpDOM() + "</div>";
+    protected String dumpDOM() {
+        return "<div>" + header.dumpDOM() + content.dumpDOM() + footer.dumpDOM() + "</div >";
     }
 }
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PImage.java b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PImage.java
index f885e5f8..58b0a393 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PImage.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PImage.java
@@ -23,6 +23,15 @@
 
 package com.ponysdk.core.ui.basic;
 
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.URL;
+import java.util.Objects;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.ponysdk.core.model.ServerToClientModel;
 import com.ponysdk.core.model.WidgetType;
 import com.ponysdk.core.server.application.UIContext;
@@ -31,15 +40,6 @@ import com.ponysdk.core.ui.basic.event.PClickHandler;
 import com.ponysdk.core.ui.eventbus.HandlerRegistration;
 import com.ponysdk.core.ui.eventbus.StreamHandler;
 import com.ponysdk.core.writer.ModelWriter;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.URL;
-import java.nio.charset.StandardCharsets;
-import java.util.Objects;
 
 /**
  * A widget that displays the image at a given URL. The image can be in 'unclipped' mode (the
@@ -154,7 +154,7 @@ public class PImage extends PWidget {
                     while (in.read(buffer) != -1) {
                         out.write(buffer);
                     }
-                    imageToBase64 = new String(out.toByteArray(), StandardCharsets.UTF_8);
+                    imageToBase64 = new String(out.toByteArray(), "UTF-8");
                 }
             } catch (final IOException e) {
                 log.error("Cannot load resource from " + this, e);
@@ -172,7 +172,7 @@ public class PImage extends PWidget {
     }
 
     @Override
-    public String dumpDOM() {
-        return "<img pid=\"" + ID + "\" url=\"" + url + "\">" + "</img>";
+    protected String dumpDOM() {
+        return "<img url=\"" + url + "\">" + "</img>";
     }
 }
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PLabel.java b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PLabel.java
index 4c63cef7..e34d54ce 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PLabel.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PLabel.java
@@ -23,16 +23,29 @@
 
 package com.ponysdk.core.ui.basic;
 
+import java.util.Objects;
+import java.util.stream.Collectors;
+
 import com.ponysdk.core.model.ServerToClientModel;
 import com.ponysdk.core.model.WidgetType;
-import com.ponysdk.core.ui.basic.event.*;
+import com.ponysdk.core.ui.basic.event.PClickEvent;
+import com.ponysdk.core.ui.basic.event.PClickHandler;
+import com.ponysdk.core.ui.basic.event.PDoubleClickEvent;
+import com.ponysdk.core.ui.basic.event.PDoubleClickHandler;
+import com.ponysdk.core.ui.basic.event.PDragEndEvent;
+import com.ponysdk.core.ui.basic.event.PDragEndHandler;
+import com.ponysdk.core.ui.basic.event.PDragEnterEvent;
+import com.ponysdk.core.ui.basic.event.PDragEnterHandler;
+import com.ponysdk.core.ui.basic.event.PDragLeaveEvent;
+import com.ponysdk.core.ui.basic.event.PDragOverEvent;
+import com.ponysdk.core.ui.basic.event.PDragStartEvent;
+import com.ponysdk.core.ui.basic.event.PDragStartHandler;
+import com.ponysdk.core.ui.basic.event.PDropEvent;
+import com.ponysdk.core.ui.basic.event.PDropHandler;
 import com.ponysdk.core.ui.eventbus.HandlerRegistration;
 import com.ponysdk.core.util.Incubation;
 import com.ponysdk.core.writer.ModelWriter;
 
-import java.util.Objects;
-import java.util.stream.Collectors;
-
 /**
  * A widget that contains arbitrary text, <i>not</i> interpreted as HTML. This widget uses a &lt;div&gt; element,
  * causing it to be displayed with block layout.
@@ -134,15 +147,7 @@ public class PLabel extends PWidget {
     }
 
     @Override
-    public String dumpDOM() {
-        StringBuilder builder = new StringBuilder();
-        builder.append("<label");
-        builder.append(" pid=\"" + ID + "\"");
-        if (!isVisible()) builder.append(" hidden");
-        builder.append(" class=\"" + getStyleNames().collect(Collectors.joining(" ")) + "\"");
-        builder.append(">");
-        builder.append(text);
-        builder.append("</label>");
-        return builder.toString();
+    protected String dumpDOM() {
+        return "<label class=\"" + getStyleNames().collect(Collectors.joining(" ")) + "\">" + text + "</label>";
     }
 }
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PListBox.java b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PListBox.java
index 1f422bb1..baf6a832 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PListBox.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PListBox.java
@@ -23,6 +23,17 @@
 
 package com.ponysdk.core.ui.basic;
 
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Objects;
+import java.util.Set;
+import java.util.TreeSet;
+import java.util.stream.Collectors;
+
+import javax.json.JsonObject;
+
 import com.ponysdk.core.model.ClientToServerModel;
 import com.ponysdk.core.model.ServerToClientModel;
 import com.ponysdk.core.model.WidgetType;
@@ -31,10 +42,6 @@ import com.ponysdk.core.ui.basic.event.HasPChangeHandlers;
 import com.ponysdk.core.ui.basic.event.PChangeEvent;
 import com.ponysdk.core.ui.basic.event.PChangeHandler;
 
-import javax.json.JsonObject;
-import java.util.*;
-import java.util.stream.Collectors;
-
 /**
  * A widget that presents a list of choices to the user, either as a list box or
  * as a drop-down list.
@@ -379,12 +386,12 @@ public class PListBox extends PFocusWidget implements HasPChangeHandlers, PChang
     }
 
     @Override
-    public String dumpDOM() {
-        String DOM = "<select pid=\"" + ID + "\">";
+    protected String dumpDOM() {
+        String DOM = "<select>";
 
         for (int i = 0; i < items.size(); i++) {
             ListItem item = items.get(0);
-            DOM += "<option value=\"" + i + "\" " + (selectedIndex == i ? "selected" : "") + ">" + item.label + "</option>";
+            DOM += "<option  value=\"" + i + "\" " + (selectedIndex == i ? "selected" : "") + ">" + item.label + "</option>";
         }
 
         DOM += "</select>";
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PMenuBar.java b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PMenuBar.java
index a5e665a2..fb671b19 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PMenuBar.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PMenuBar.java
@@ -23,16 +23,13 @@
 
 package com.ponysdk.core.ui.basic;
 
+import java.util.*;
+
 import com.ponysdk.core.model.ServerToClientModel;
 import com.ponysdk.core.model.WidgetType;
 import com.ponysdk.core.ui.model.ServerBinaryModel;
 import com.ponysdk.core.writer.ModelWriter;
 
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Objects;
-
 /**
  * A standard menu bar widget. A menu bar can contain any number of menu items,
  * each of which can either fire a {@link Runnable} or open a cascaded menu bar.
@@ -216,8 +213,8 @@ public class PMenuBar extends PWidget implements Iterable<PMenuSubElement> {
     }
 
     @Override
-    public String dumpDOM() {
-        String DOM = "<ul pid=\"" + ID + "\">";
+    protected String dumpDOM() {
+        String DOM = "<ul>";
 
         for (PMenuSubElement item : items) {
             DOM += item.dumpDOM();
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PMenuItem.java b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PMenuItem.java
index f017b15c..cf030829 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PMenuItem.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PMenuItem.java
@@ -23,15 +23,16 @@
 
 package com.ponysdk.core.ui.basic;
 
+import java.util.Objects;
+
+import javax.json.JsonObject;
+
 import com.ponysdk.core.model.ClientToServerModel;
 import com.ponysdk.core.model.HandlerModel;
 import com.ponysdk.core.model.ServerToClientModel;
 import com.ponysdk.core.model.WidgetType;
 import com.ponysdk.core.writer.ModelWriter;
 
-import javax.json.JsonObject;
-import java.util.Objects;
-
 /**
  * An entry in a {@link PMenuBar}. Menu items can either fire a {@link Runnable} when they are clicked, or open a
  * cascading sub-menu. Each menu item is assigned a unique DOM id in order to support ARIA.
@@ -157,8 +158,8 @@ public class PMenuItem extends PMenuSubElement {
     }
 
     @Override
-    public String dumpDOM() {
-        String DOM = "<li pid=\"" + ID + "\">" + (text != null ? text : html);
+    protected String dumpDOM() {
+        String DOM = "<li>" + text != null ? text : html;
 
         if (subMenu != null) {
             DOM += subMenu.dumpDOM();
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PMenuItemSeparator.java b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PMenuItemSeparator.java
index 7f0e3bf4..de6aa641 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PMenuItemSeparator.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PMenuItemSeparator.java
@@ -39,8 +39,8 @@ public class PMenuItemSeparator extends PMenuSubElement {
     }
 
     @Override
-    public String dumpDOM() {
-        return "<li pid=\"" + ID + "\" separator></li>";
+    protected String dumpDOM() {
+        return "<li separator></li>";
     }
 
 }
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PObject.java b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PObject.java
index 4624802e..caf9c21b 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PObject.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PObject.java
@@ -23,6 +23,15 @@
 
 package com.ponysdk.core.ui.basic;
 
+import java.io.IOException;
+import java.util.LinkedHashMap;
+import java.util.Set;
+
+import javax.json.JsonObject;
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
 import com.ponysdk.core.model.ClientToServerModel;
 import com.ponysdk.core.model.HandlerModel;
 import com.ponysdk.core.model.ServerToClientModel;
@@ -34,14 +43,6 @@ import com.ponysdk.core.util.SetUtils;
 import com.ponysdk.core.writer.ModelWriter;
 import com.ponysdk.core.writer.ModelWriterCallback;
 
-import javax.json.JsonObject;
-import javax.servlet.ServletException;
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
-import java.io.IOException;
-import java.util.LinkedHashMap;
-import java.util.Set;
-
 /**
  * The superclass for all PonySDK objects.
  */
@@ -157,15 +158,18 @@ public abstract class PObject {
     }
 
     /**
-     * Bind to a Terminal function, useful to link the objectID and the widget
+     * Bind to a Terminal function, usefull to link the objectID and the widget
      * reference
+     * <p>
      * <h2>Example :</h2>
+     * <p>
      *
      * <pre>
      * --- Java ---
      *
      * bindTerminalFunction("myFunction")
      * </pre>
+     * <p>
      *
      * <pre>
      * --- JavaScript ---
@@ -198,8 +202,6 @@ public abstract class PObject {
 
     /**
      * JSON received from the Terminal using pony.sendDataToServer(objectID, JSON)
-     *
-     * @param event Json received from the terminal
      */
     public void onClientData(final JsonObject event) {
         if (destroy) return;
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PRichTextArea.java b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PRichTextArea.java
index b5482313..fe6a6f34 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PRichTextArea.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PRichTextArea.java
@@ -23,12 +23,21 @@
 
 package com.ponysdk.core.ui.basic;
 
-import com.ponysdk.core.model.*;
-import com.ponysdk.core.ui.basic.event.PValueChangeEvent;
-import com.ponysdk.core.ui.basic.event.PValueChangeHandler;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
+import java.util.Objects;
 
 import javax.json.JsonObject;
-import java.util.*;
+
+import com.ponysdk.core.model.ClientToServerModel;
+import com.ponysdk.core.model.PFontSize;
+import com.ponysdk.core.model.PJustification;
+import com.ponysdk.core.model.ServerToClientModel;
+import com.ponysdk.core.model.WidgetType;
+import com.ponysdk.core.ui.basic.event.PValueChangeEvent;
+import com.ponysdk.core.ui.basic.event.PValueChangeHandler;
 
 /**
  * A rich text editor that allows complex styling and formatting.there is a formatter interface, accessed via
@@ -114,8 +123,8 @@ public class PRichTextArea extends PFocusWidget implements HasPValueChangeHandle
     }
 
     @Override
-    public String dumpDOM() {
-        return "<input pid=\"" + ID + "\">" + (text != null ? text : html) + "</input>";
+    protected String dumpDOM() {
+        return "<input>" + text != null ? text : html + "</input>";
     }
 
     public class Formatter {
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PRichTextToolbar.java b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PRichTextToolbar.java
index ead0f1c9..0ec2c139 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PRichTextToolbar.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PRichTextToolbar.java
@@ -51,7 +51,7 @@ public class PRichTextToolbar extends PWidget {
     }
 
     @Override
-    public String dumpDOM() {
+    protected String dumpDOM() {
         return richTextArea.dumpDOM();
     }
 }
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PSimplePanel.java b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PSimplePanel.java
index b09fa04a..9735b08b 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PSimplePanel.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PSimplePanel.java
@@ -23,12 +23,13 @@
 
 package com.ponysdk.core.ui.basic;
 
-import com.ponysdk.core.model.WidgetType;
+import java.util.Iterator;
+import java.util.NoSuchElementException;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import java.util.Iterator;
-import java.util.NoSuchElementException;
+import com.ponysdk.core.model.WidgetType;
 
 /**
  * Base class for panels that contain only one widget.
@@ -106,7 +107,7 @@ public class PSimplePanel extends PPanel implements PAcceptsOneWidget {
 
     @Override
     public Iterator<PWidget> iterator() {
-        return new Iterator<>() {
+        return new Iterator<PWidget>() {
 
             boolean hasElement = widget != null;
 
@@ -136,7 +137,7 @@ public class PSimplePanel extends PPanel implements PAcceptsOneWidget {
     }
 
     @Override
-    public String dumpDOM() {
-        return "<div pid=\"" + ID + "\">" + widget.dumpDOM() + "</div>";
+    protected String dumpDOM() {
+        return "<div>" + widget.dumpDOM() + "</div>";
     }
 }
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PStackLayoutPanel.java b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PStackLayoutPanel.java
index e8046acf..e243b1fb 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PStackLayoutPanel.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PStackLayoutPanel.java
@@ -23,6 +23,15 @@
 
 package com.ponysdk.core.ui.basic;
 
+import java.time.Duration;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Objects;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.ponysdk.core.model.HandlerModel;
 import com.ponysdk.core.model.PUnit;
 import com.ponysdk.core.model.ServerToClientModel;
@@ -32,14 +41,6 @@ import com.ponysdk.core.ui.basic.event.PBeforeSelectionEvent;
 import com.ponysdk.core.ui.basic.event.PSelectionHandler;
 import com.ponysdk.core.ui.model.ServerBinaryModel;
 import com.ponysdk.core.writer.ModelWriter;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.time.Duration;
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Objects;
 
 /**
  * A panel that stacks its children vertically, displaying only one at a time,
@@ -194,11 +195,12 @@ public class PStackLayoutPanel extends PWidget implements HasPWidgets, PAnimated
     }
 
     @Override
-    public String dumpDOM() {
-        String DOM = "<div pid=\"" + ID + "\">";
+    protected String dumpDOM() {
+        String DOM = "<div>";
 
-        for (PWidget child : children) {
-            DOM += child.dumpDOM();
+        Iterator<PWidget> iter = children.iterator();
+        while (iter.hasNext()) {
+            DOM += iter.next().dumpDOM();
         }
         DOM += "</div>";
         return DOM;
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PSuggestBox.java b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PSuggestBox.java
index ec9816ef..34bb80fb 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PSuggestBox.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PSuggestBox.java
@@ -23,6 +23,13 @@
 
 package com.ponysdk.core.ui.basic;
 
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+import java.util.Objects;
+
+import javax.json.JsonObject;
+
 import com.ponysdk.core.model.ClientToServerModel;
 import com.ponysdk.core.model.HandlerModel;
 import com.ponysdk.core.model.ServerToClientModel;
@@ -33,12 +40,6 @@ import com.ponysdk.core.ui.basic.event.PValueChangeEvent;
 import com.ponysdk.core.ui.basic.event.PValueChangeHandler;
 import com.ponysdk.core.writer.ModelWriter;
 
-import javax.json.JsonObject;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
-import java.util.Objects;
-
 /**
  * A {@link PSuggestBox} is a text box or text area which displays a
  * pre-configured set of selections that match the user's input. Each
@@ -50,6 +51,8 @@ import java.util.Objects;
  * its oracle. Below we show how a {@link PMultiWordSuggestOracle} can be
  * configured:
  * </p>
+ * <p>
+ *
  * <pre>
  * PMultiWordSuggestOracle oracle = new PMultiWordSuggestOracle();
  * oracle.add(&quot;Cat&quot;);
@@ -64,8 +67,6 @@ import java.util.Objects;
  * oracle will configure the suggestions with the "Cat" and "Canary"
  * suggestions. Specifically, whenever the user types a key into the text
  * widget, the value is submitted to the <code>PMultiWordSuggestOracle</code>.
- * </p>
- *
  * <h3>CSS Style Rules</h3>
  * <dl>
  * <dt>.gwt-SuggestBox</dt>
@@ -218,7 +219,7 @@ public class PSuggestBox extends PWidget
     }
 
     @Override
-    public String dumpDOM() {
+    protected String dumpDOM() {
         return textBox.dumpDOM();
     }
 
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PTabLayoutPanel.java b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PTabLayoutPanel.java
index e6ff9faf..e3a69e83 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PTabLayoutPanel.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PTabLayoutPanel.java
@@ -23,6 +23,13 @@
 
 package com.ponysdk.core.ui.basic;
 
+import java.time.Duration;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Objects;
+
+import javax.json.JsonObject;
+
 import com.ponysdk.core.model.ClientToServerModel;
 import com.ponysdk.core.model.HandlerModel;
 import com.ponysdk.core.model.ServerToClientModel;
@@ -32,12 +39,6 @@ import com.ponysdk.core.ui.basic.event.PSelectionEvent;
 import com.ponysdk.core.ui.basic.event.PSelectionHandler;
 import com.ponysdk.core.ui.model.ServerBinaryModel;
 
-import javax.json.JsonObject;
-import java.time.Duration;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Objects;
-
 /**
  * A panel that represents a tabbed set of pages, each of which contains another widget. Its child widgets are shown as
  * the user selects the various tabs associated with them. The tabs can contain arbitrary text, HTML, or widgets.
@@ -106,7 +107,7 @@ public class PTabLayoutPanel extends PComplexPanel implements PSelectionHandler<
             tabWidget.attach(window, frame);
             child.attach(window, frame);
             child.saveAdd(child.getID(), ID, new ServerBinaryModel(ServerToClientModel.TAB_WIDGET, tabWidget.getID()),
-                    new ServerBinaryModel(ServerToClientModel.BEFORE_INDEX, beforeIndex));
+                new ServerBinaryModel(ServerToClientModel.BEFORE_INDEX, beforeIndex));
         } else {
             throw new IllegalAccessError("Widget " + child + " already attached to an other window, current window : "
                     + child.getWindow() + ", new window : " + window);
@@ -123,7 +124,7 @@ public class PTabLayoutPanel extends PComplexPanel implements PSelectionHandler<
             adopt(child);
             child.attach(window, frame);
             child.saveAdd(child.getID(), ID, new ServerBinaryModel(ServerToClientModel.TAB_TEXT, tabText),
-                    new ServerBinaryModel(ServerToClientModel.BEFORE_INDEX, beforeIndex));
+                new ServerBinaryModel(ServerToClientModel.BEFORE_INDEX, beforeIndex));
         } else {
             throw new IllegalAccessError("Widget " + child + " already attached to an other window, current window : "
                     + child.getWindow() + ", new window : " + window);
@@ -180,12 +181,12 @@ public class PTabLayoutPanel extends PComplexPanel implements PSelectionHandler<
         if (instruction.containsKey(ClientToServerModel.HANDLER_SELECTION.toStringValue())) {
             for (final PSelectionHandler<Integer> handler : selectionHandlers) {
                 handler.onSelection(
-                        new PSelectionEvent<>(this, instruction.getInt(ClientToServerModel.HANDLER_SELECTION.toStringValue())));
+                    new PSelectionEvent<>(this, instruction.getInt(ClientToServerModel.HANDLER_SELECTION.toStringValue())));
             }
         } else if (instruction.containsKey(ClientToServerModel.HANDLER_BEFORE_SELECTION.toStringValue())) {
             for (final PBeforeSelectionEvent.Handler<Integer> handler : beforeSelectionHandlers) {
                 handler.onBeforeSelection(new PBeforeSelectionEvent<>(this,
-                        instruction.getInt(ClientToServerModel.HANDLER_BEFORE_SELECTION.toStringValue())));
+                    instruction.getInt(ClientToServerModel.HANDLER_BEFORE_SELECTION.toStringValue())));
             }
         } else {
             super.onClientData(instruction);
@@ -204,7 +205,8 @@ public class PTabLayoutPanel extends PComplexPanel implements PSelectionHandler<
     /**
      * Set whether or not transitions slide in vertically or horizontally.
      *
-     * @param isVertical true for vertical transitions, false for horizontal
+     * @param isVertical
+     *            true for vertical transitions, false for horizontal
      */
     public void setAnimationVertical(final boolean isVertical) {
         saveUpdate(ServerToClientModel.VERTICAL, isVertical);
@@ -221,8 +223,6 @@ public class PTabLayoutPanel extends PComplexPanel implements PSelectionHandler<
 
     /**
      * Set the duration of the animated transition between tabs.
-     *
-     * @param duration
      */
     public void setAnimationDuration(final Duration duration) {
         if (Objects.equals(this.animationDuration, duration)) return;
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PTree.java b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PTree.java
index 5e89d7fd..b67dedab 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PTree.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PTree.java
@@ -23,6 +23,15 @@
 
 package com.ponysdk.core.ui.basic;
 
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+
+import javax.json.JsonObject;
+
 import com.ponysdk.core.model.ClientToServerModel;
 import com.ponysdk.core.model.ServerToClientModel;
 import com.ponysdk.core.model.WidgetType;
@@ -30,9 +39,6 @@ import com.ponysdk.core.server.application.UIContext;
 import com.ponysdk.core.ui.basic.event.PSelectionEvent;
 import com.ponysdk.core.ui.basic.event.PSelectionHandler;
 
-import javax.json.JsonObject;
-import java.util.*;
-
 /**
  * A standard hierarchical tree widget. The tree contains a hierarchy of
  * {@link PTreeItem TreeItems} that the user can open, close, and select.
@@ -192,7 +198,7 @@ public class PTree extends PWidget implements Iterable<PTreeItem> {
     }
 
     @Override
-    public String dumpDOM() {
+    protected String dumpDOM() {
         return "<div>" + root.dumpDOM() + "</div>";
     }
 }
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PValueBoxBase.java b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PValueBoxBase.java
index db3138f1..55f42833 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PValueBoxBase.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PValueBoxBase.java
@@ -139,7 +139,7 @@ public abstract class PValueBoxBase extends PFocusWidget {
     }
 
     @Override
-    public String dumpDOM() {
-        return "<input pid=\"" + ID + "\" class=\"" + getStyleNames().collect(Collectors.joining(" ")) + "\">" + text + "</input>";
+    protected String dumpDOM() {
+        return "<input class=\"" + getStyleNames().collect(Collectors.joining(" ")) + "\">" + text + "</input>";
     }
 }
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PWidget.java b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PWidget.java
index 9ef0375b..5d6d172b 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PWidget.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PWidget.java
@@ -23,28 +23,68 @@
 
 package com.ponysdk.core.ui.basic;
 
-import com.ponysdk.core.model.*;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+import java.util.Set;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+import javax.json.JsonArray;
+import javax.json.JsonNumber;
+import javax.json.JsonObject;
+import javax.json.JsonValue;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.ponysdk.core.model.ClientToServerModel;
+import com.ponysdk.core.model.DomHandlerConverter;
+import com.ponysdk.core.model.DomHandlerType;
+import com.ponysdk.core.model.HandlerModel;
+import com.ponysdk.core.model.ServerToClientModel;
 import com.ponysdk.core.server.application.UIContext;
-import com.ponysdk.core.ui.basic.event.*;
+import com.ponysdk.core.ui.basic.event.HasPWidgets;
+import com.ponysdk.core.ui.basic.event.PBlurEvent;
+import com.ponysdk.core.ui.basic.event.PClickEvent;
+import com.ponysdk.core.ui.basic.event.PContextMenuEvent;
+import com.ponysdk.core.ui.basic.event.PDomEvent;
 import com.ponysdk.core.ui.basic.event.PDomEvent.Type;
+import com.ponysdk.core.ui.basic.event.PDoubleClickEvent;
+import com.ponysdk.core.ui.basic.event.PDragEndEvent;
+import com.ponysdk.core.ui.basic.event.PDragEnterEvent;
+import com.ponysdk.core.ui.basic.event.PDragLeaveEvent;
+import com.ponysdk.core.ui.basic.event.PDragOverEvent;
+import com.ponysdk.core.ui.basic.event.PDragStartEvent;
+import com.ponysdk.core.ui.basic.event.PDropEvent;
+import com.ponysdk.core.ui.basic.event.PFocusEvent;
+import com.ponysdk.core.ui.basic.event.PKeyDownEvent;
+import com.ponysdk.core.ui.basic.event.PKeyEvent;
+import com.ponysdk.core.ui.basic.event.PKeyPressEvent;
+import com.ponysdk.core.ui.basic.event.PKeyPressHandler;
+import com.ponysdk.core.ui.basic.event.PKeyUpEvent;
+import com.ponysdk.core.ui.basic.event.PKeyUpHandler;
+import com.ponysdk.core.ui.basic.event.PMouseDownEvent;
+import com.ponysdk.core.ui.basic.event.PMouseEvent;
+import com.ponysdk.core.ui.basic.event.PMouseOutEvent;
+import com.ponysdk.core.ui.basic.event.PMouseOverEvent;
+import com.ponysdk.core.ui.basic.event.PMouseUpEvent;
+import com.ponysdk.core.ui.basic.event.PMouseWhellEvent;
+import com.ponysdk.core.ui.basic.event.PVisibilityEvent;
 import com.ponysdk.core.ui.basic.event.PVisibilityEvent.PVisibilityHandler;
-import com.ponysdk.core.ui.eventbus.*;
+import com.ponysdk.core.ui.eventbus.Event;
+import com.ponysdk.core.ui.eventbus.EventHandler;
+import com.ponysdk.core.ui.eventbus.EventSource;
+import com.ponysdk.core.ui.eventbus.HandlerRegistration;
+import com.ponysdk.core.ui.eventbus.TinyEventSource;
 import com.ponysdk.core.ui.model.PEventType;
 import com.ponysdk.core.ui.model.ServerBinaryModel;
 import com.ponysdk.core.util.SetPool;
 import com.ponysdk.core.util.SetUtils;
 import com.ponysdk.core.writer.ModelWriter;
 import com.ponysdk.core.writer.ModelWriterCallback;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import javax.json.JsonArray;
-import javax.json.JsonNumber;
-import javax.json.JsonObject;
-import javax.json.JsonValue;
-import java.util.*;
-import java.util.stream.Collectors;
-import java.util.stream.Stream;
 
 /**
  * The base class for the majority of user-interface objects. Widget adds
@@ -217,8 +257,7 @@ public abstract class PWidget extends PObject implements IsPWidget {
     }
 
     public void removeStyleProperty(final String name) {
-        if (safeStyleProperties().remove(name) != null)
-            saveUpdate(writer -> writer.write(ServerToClientModel.REMOVE_STYLE_KEY, name));
+        if (safeStyleProperties().remove(name) != null) saveUpdate(writer -> writer.write(ServerToClientModel.REMOVE_STYLE_KEY, name));
     }
 
     public void forceDomId() {
@@ -238,18 +277,21 @@ public abstract class PWidget extends PObject implements IsPWidget {
     }
 
     public void setAttribute(final String name) {
-        setAttribute(name, "");
+        setAttribute(name, null);
     }
 
     public void setAttribute(final String name, final String value) {
         if (name == null) return;
 
-        if (!safeElementAttributes().containsKey(name)) safeElementAttributes().put(name, value);
-        else if (Objects.equals(safeElementAttributes().put(name, value), value)) return;
+        // HTML specs is the value is equals to the name if value is null or empty
+        final String newValue = value != null && !value.isEmpty() ? value : name.toLowerCase();
+
+        if (!safeElementAttributes().containsKey(name)) safeElementAttributes().put(name, newValue);
+        else if (Objects.equals(safeElementAttributes().put(name, newValue), newValue)) return;
 
         saveUpdate(writer -> {
             writer.write(ServerToClientModel.PUT_ATTRIBUTE_KEY, name);
-            writer.write(ServerToClientModel.ATTRIBUTE_VALUE, value);
+            writer.write(ServerToClientModel.ATTRIBUTE_VALUE, newValue);
         });
     }
 
@@ -263,10 +305,6 @@ public abstract class PWidget extends PObject implements IsPWidget {
         return elementProperties != null ? elementProperties.get(key) : null;
     }
 
-    public boolean hasAttribute(final String key) {
-        return elementAttributes != null ? elementAttributes.containsKey(key) : false;
-    }
-
     public String getAttribute(final String key) {
         return elementAttributes != null ? elementAttributes.get(key) : null;
     }
@@ -401,16 +439,13 @@ public abstract class PWidget extends PObject implements IsPWidget {
             final DomHandlerType domHandler = DomHandlerType.fromRawValue((byte) instruction.getInt(domHandlerType));
             switch (domHandler) {
                 case KEY_PRESS:
-                    fireKeyEvent(
-                            new PKeyPressEvent(this, instruction.getInt(ClientToServerModel.VALUE_KEY.toStringValue())));
+                    fireKeyEvent(new PKeyPressEvent(this, instruction.getInt(ClientToServerModel.VALUE_KEY.toStringValue())));
                     break;
                 case KEY_UP:
-                    fireKeyEvent(
-                            new PKeyUpEvent(this, instruction.getInt(ClientToServerModel.VALUE_KEY.toStringValue())));
+                    fireKeyEvent(new PKeyUpEvent(this, instruction.getInt(ClientToServerModel.VALUE_KEY.toStringValue())));
                     break;
                 case KEY_DOWN:
-                    fireKeyEvent(
-                            new PKeyDownEvent(this, instruction.getInt(ClientToServerModel.VALUE_KEY.toStringValue())));
+                    fireKeyEvent(new PKeyDownEvent(this, instruction.getInt(ClientToServerModel.VALUE_KEY.toStringValue())));
                     break;
                 case CLICK:
                     fireMouseEvent(instruction, new PClickEvent(this));
@@ -578,6 +613,11 @@ public abstract class PWidget extends PObject implements IsPWidget {
         focus(false);
     }
 
+    public void focusPreventScroll() {
+        this.focused = true;
+        saveUpdate(ServerToClientModel.FOCUS_PREVENT_SCROLL, null);
+    }
+
     private void focus(final boolean focused) {
         this.focused = focused;
         saveUpdate(ServerToClientModel.FOCUS, focused);
@@ -624,6 +664,6 @@ public abstract class PWidget extends PObject implements IsPWidget {
         return focused;
     }
 
-    public abstract String dumpDOM();
+    protected abstract String dumpDOM();
 
 }
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PWindow.java b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PWindow.java
index 51763ad4..2d23fbfc 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PWindow.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/basic/PWindow.java
@@ -23,21 +23,31 @@
 
 package com.ponysdk.core.ui.basic;
 
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import javax.json.JsonObject;
+
 import com.ponysdk.core.model.ClientToServerModel;
 import com.ponysdk.core.model.HandlerModel;
 import com.ponysdk.core.model.ServerToClientModel;
 import com.ponysdk.core.model.WidgetType;
 import com.ponysdk.core.server.application.UIContext;
 import com.ponysdk.core.server.stm.Txn;
-import com.ponysdk.core.ui.basic.event.*;
+import com.ponysdk.core.ui.basic.event.PCloseEvent;
+import com.ponysdk.core.ui.basic.event.PCloseHandler;
+import com.ponysdk.core.ui.basic.event.POpenEvent;
+import com.ponysdk.core.ui.basic.event.POpenHandler;
+import com.ponysdk.core.ui.basic.event.PVisibilityEvent;
 import com.ponysdk.core.ui.basic.event.PVisibilityEvent.PVisibilityHandler;
 import com.ponysdk.core.ui.formatter.TextFunction;
 import com.ponysdk.core.util.SetUtils;
 import com.ponysdk.core.writer.ModelWriter;
 
-import javax.json.JsonObject;
-import java.util.*;
-
 public class PWindow extends PObject {
 
     private static final String CANONICAL_NAME = PWindow.class.getCanonicalName();
@@ -426,7 +436,6 @@ public class PWindow extends PObject {
      * or not.
      *
      * @see <a href="https://developer.mozilla.org/fr/docs/Web/API/Document/hidden">MDN</a>
-     * @return true if the window is shown
      */
     public boolean isShown() {
         return shown;
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/AbstractFilter.java b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/AbstractFilter.java
new file mode 100644
index 00000000..d325ac08
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/AbstractFilter.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2020 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.ui.datagrid2;
+
+import java.util.function.Predicate;
+
+import com.ponysdk.core.ui.datagrid2.SimpleDataGridController.Row;
+
+/**
+ *
+ */
+public interface AbstractFilter<V> extends Predicate<Row<V>> {
+
+    abstract ColumnDefinition<V> getColumnDefinition();
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/Cell.java b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/Cell.java
new file mode 100644
index 00000000..7af113da
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/Cell.java
@@ -0,0 +1,71 @@
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.ui.datagrid2;
+
+import com.ponysdk.core.ui.basic.IsPWidget;
+import com.ponysdk.core.ui.basic.PWidget;
+
+/**
+ * {@code Cell} is a widget that will be part of a {@code DataGridView} column body. It can be recycled
+ * to be used with different model values.<br/>
+ * The {@link IsPWidget#asWidget()} method must always return the same instance of the main widget that will be used for
+ * the rendering of the value.
+ *
+ * @author mbagdouri
+ */
+public interface Cell<V> extends IsPWidget {
+
+    /**
+     * Must always return the same instance and cannot be {@code null} or the same as the main widget.
+     *
+     * @return a widget that will replace the main widget when the value for this cell is not available
+     */
+    PWidget asPendingWidget();
+
+    /**
+     * Renders the value in the main widget.
+     *
+     * @param data the value to be rendered
+     * @param renderingHelper the intermediate object supplied in {@link ColumnDefinition#getRenderingHelper(Object)}
+     */
+    void render(V data, Object renderingHelper);
+
+    /**
+     * Sets a {@link CellController} that can be used to make cell/row related actions. It will be set as soon as the
+     * {@link ColumnDefinition#createCell()} is called.
+     *
+     * @param cellController
+     */
+    void setController(CellController<V> cellController);
+
+    /**
+     * Called when the row that this cell belongs to is selected
+     */
+    void select();
+
+    /**
+     * Called when the row that this cell belongs to is unselected
+     */
+    void unselect();
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/CellController.java b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/CellController.java
new file mode 100644
index 00000000..573b93ff
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/CellController.java
@@ -0,0 +1,49 @@
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.ui.datagrid2;
+
+/**
+ * @author mbagdouri
+ */
+public interface CellController<V> {
+
+    /**
+     * Switches to an extended mode that can be used to have a richer cell not constrained by the dimensions of the
+     * original cell. The {@link ExtendedCell} can be used, for example, for the edit mode or for having a more detailed
+     * view.
+     * 
+     * @see ExtendedCellController#cancelExtendedMode()
+     */
+    void extendedMode(ExtendedCell<V> extendedCell);
+
+    /**
+     * Selects the row that this cell belongs to
+     */
+    void selectRow();
+
+    /**
+     * Unselects the row that this cell belongs to
+     */
+    void unselectRow();
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/ColumnActionListener.java b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/ColumnActionListener.java
new file mode 100644
index 00000000..ef2753d6
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/ColumnActionListener.java
@@ -0,0 +1,87 @@
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.ui.datagrid2;
+
+import java.util.function.BiPredicate;
+import java.util.function.Supplier;
+
+/**
+ * @author mbagdouri
+ */
+public interface ColumnActionListener<V> {
+
+    /**
+     * Called when a sorting criterion for this column is added/replaced
+     * 
+     * @see ColumnController#sort(boolean)
+     */
+    void onSort(boolean asc);
+
+    /**
+     * Called when a sorting criterion for this column is cancelled
+     * 
+     * @see ColumnController#clearSort()
+     */
+    void onClearSort();
+
+    /**
+     * Called when this column is filtered
+     * 
+     * @see ColumnController#filter(Object, BiPredicate, boolean)
+     */
+    void onFilter(Object key, BiPredicate<V, Supplier<Object>> filter, boolean reinforcing);
+
+    /**
+     * Called when this column's filter with {@code key} is cancelled
+     * 
+     * @see ColumnController#clearFilter(Object)
+     */
+    void onClearFilter(Object key);
+
+    /**
+     * Called when all this column filters are cleared
+     * 
+     * @see ColumnController#clearFilters()
+     */
+    void onClearFilters();
+
+    /**
+     * Called when this column is redrawn
+     * 
+     * @see ColumnController#redraw(boolean)
+     */
+    void onRedraw(boolean clearRenderingHelpers);
+
+    /**
+     * Called when this column's state is changed
+     * 
+     * @see ColumnController#setState(com.ponysdk.core.ui.datagrid2.ColumnDefinition.State)
+     */
+    void onStateChanged(ColumnDefinition.State state);
+
+    /**
+     * Called when this column's width is changed
+     */
+    void onResized(int width);
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/ColumnController.java b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/ColumnController.java
new file mode 100644
index 00000000..ac7fbc3f
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/ColumnController.java
@@ -0,0 +1,83 @@
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.ui.datagrid2;
+
+import java.util.function.BiPredicate;
+import java.util.function.Supplier;
+
+/**
+ * @author mbagdouri
+ */
+public interface ColumnController<V> {
+
+    /**
+     * Adds/replaces a sorting criterion on the view based on this column
+     *
+     * @param asc
+     */
+    void sort(boolean asc);
+
+    /**
+     * Cancels the sorting criterion of this column from the view
+     */
+    void clearSort();
+
+    /**
+     * Adds/replaces a filter that accepts only data that meet the condition of the {@link BiPredicate} {@code filter}.
+     *
+     * @param key an object that can be used to uniquely identify a filter, so that it can be replaced or removed
+     * @param filter a {@code BiPredicate} that decides whether a value is accepted or filtered. The {@code BiPredicate}
+     *            arguments are the model value and a {@code Supplier} that provides the rendering helper that was
+     *            supplied by {@link ColumnDefinition#getRenderingHelper(Object)}
+     * @param reinforcing {@code true} if the predicate is at least as intolerant as the replaced predicate of the same
+     *            key (i.e. the predicate doesn't accept any value that was not accepted by the replaced predicate),
+     *            {@code false} otherwise. This is an optimization that allows us to avoid applying the predicate on
+     *            values that we already know will not be accepted. If this filter is not replacing an existing one, the
+     *            value of the {@code reinforcing} argument has no impact.
+     */
+    void filter(Object key, BiPredicate<V, Supplier<Object>> filter, boolean reinforcing);
+
+    /**
+     * Cancels the filter, corresponding to {@code key}, from the view
+     */
+    void clearFilter(Object key);
+
+    /**
+     * Cancels all filters, corresponding to this column, from the view
+     */
+    void clearFilters();
+
+    /**
+     * Redraws all the cells of this column
+     *
+     * @param clearRenderingHelpers {@code true} if all the rendering helpers for this column must be cleared and thus
+     *            recalculated before drawing, {@code false} otherwise
+     */
+    void redraw(boolean clearRenderingHelpers);
+
+    /**
+     * Changes the current state of this column
+     */
+    void setState(ColumnDefinition.State state);
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/ColumnDefinition.java b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/ColumnDefinition.java
new file mode 100644
index 00000000..44c56900
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/ColumnDefinition.java
@@ -0,0 +1,292 @@
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.ui.datagrid2;
+
+import java.util.function.Supplier;
+
+import com.ponysdk.core.ui.basic.IsPWidget;
+
+/**
+ * Used to define and manage a column in a {@link DataGridView}.
+ * The same instance of a {@code ColumnDefinition} cannot be used for multiple {@link DataGridView} instances.
+ *
+ * @author mbagdouri
+ */
+public interface ColumnDefinition<V> extends ColumnActionListener<V> {
+
+    /**
+     * Must always return the same instance.
+     *
+     * @return the widget that will be used for the header of this column, or {@code null} if the corresponding
+     *         {@link DataGridAdapter#hasHeader()} is {@code false}
+     */
+    IsPWidget getHeader();
+
+    /**
+     * Must always return the same instance.<br/>
+     * Returns the same instance as {@link #getHeader()} if the whole header is draggable
+     *
+     * @return the sub-widget of the header that will be draggable, or {@code null} if the corresponding
+     *         {@link DataGridAdapter#hasHeader()} is {@code false} or this column is not draggable.
+     */
+    IsPWidget getDraggableHeaderElement();
+
+    /**
+     * Must always return the same instance.
+     *
+     * @return the widget that will be used for the footer of this column, or {@code null} if the corresponding
+     *         {@link DataGridAdapter#hasFooter()} is {@code false}
+     */
+    IsPWidget getFooter();
+
+    /**
+     * Must always return a new instance but of the same kind and dimensions.
+     *
+     * @return a new widget that will be used as a cell in the body of the {@link DataGridView} for this column.
+     */
+    Cell<V> createCell();
+
+    /**
+     * Returns an intermediate object that will be cached in order to be used when rendering {@code data} in a
+     * {@link Cell}.<br/>
+     * <br/>
+     * The returned object will be handed to {@link Cell#render(Object, Object)}.<br/>
+     * It can also be retrieved via a {@link Supplier} either in
+     * {@link ColumnDefinition#compare(Object, Supplier, Object, Supplier)} to be used for sorting
+     * purposes, or inside the {@code BiPredicate} argument of
+     * {@link ColumnController#filter(Object, java.util.function.BiPredicate, boolean)} to be used for
+     * filtering purposes.<br/>
+     * <br/>
+     * For example: for a date column, this method can return a formatted {@code String} of the date value, to avoid
+     * recalculating the {@code String} each time the value is rendered in a {@link Cell}.<br/>
+     * <br/>
+     * Another example: for an {@code enum}-based column, whose values are rendered differently depending on the user's
+     * language, this method can return an i18n {@code String} value of the {@code enum} value that can be used for
+     * rendering, but can also be used for sorting and filtering on this column.<br/>
+     * <br/>
+     * Can return {@code null} if no intermediate object is necessary.
+     */
+    Object getRenderingHelper(V data);
+
+    /**
+     * Compares {@code v1} and {@code v2} from the perspective of this column.<br/>
+     * Rendering helpers corresponding to both values can be retrieved via the {@link Supplier} arguments to be used for
+     * the comparison. {@code renderingHelper1} corresponds to {@code v1} while {@code renderingHelper2} corresponds to
+     * {@code v2}.<br/>
+     * Returns a negative integer, zero, or a positive integer as {@code v1} is less than, equal
+     * to, or greater than {@code v2}.<br/>
+     * Returns {@code 0} or any other arbitrary value when this column is not sortable.<br/>
+     *
+     * @see ColumnDefinition#isSortable()
+     * @see ColumnDefinition#getRenderingHelper(Object)
+     */
+    int compare(V v1, Supplier<Object> renderingHelper1, V v2, Supplier<Object> renderingHelper2);
+
+    /**
+     * Sets a {@link ColumnController} that can be used to make column related actions. It will be set as soon as the
+     * {@link DataGridAdapter} is set on the {@link DataGridView}. This {@link ColumnController}
+     * must be made available via the {@link ColumnDefinition#getController()} method.
+     */
+    void setController(ColumnController<V> columnController);
+
+    /**
+     * Returns the {@link ColumnController} that can be used to make column related actions. This
+     * {@link ColumnController} will be available immediately after that the {@link DataGridAdapter} is set on
+     * the {@link DataGridView}.
+     */
+    ColumnController<V> getController();
+
+    /**
+     * @return the default {@link State} for this column
+     */
+    State getDefaultState();
+
+    /**
+     * @return {@code true} if the visibility of this column can be switched, {@code false} otherwise
+     * @see #getDefaultState()
+     */
+    boolean isVisibilitySwitchable();
+
+    /**
+     * @return {@code true} if this column can be pinned and unpinned, {@code false} if it must remain in its default
+     *         pin state
+     * @see #getDefaultState()
+     */
+    boolean isPinSwitchable();
+
+    /**
+     * @return {@code true} if data can be filtered based on this column, {@code false} otherwise
+     * @see ColumnController#filter(Object, java.util.function.BiPredicate, boolean)
+     */
+    boolean isFilterable();
+
+    /**
+     * @return {@code true} if data can be sorted based on this column, {@code false} otherwise
+     * @see #compare(Object, Supplier, Object, Supplier)
+     */
+    boolean isSortable();
+
+    /**
+     * @return {@code true} if the width of this column can be changed, {@code false} otherwise
+     * @see #getDefaultWidth()
+     */
+    boolean isResizable();
+
+    /**
+     * @return an ID that must be unique within the corresponding {@link DataGridAdapter} and persistent
+     */
+    String getId();
+
+    /**
+     * @return the default width for this column
+     */
+    int getDefaultWidth();
+
+    /**
+     * @return the minimum width for this column
+     */
+    int getMinWidth();
+
+    /**
+     * @return the maximum width for this column
+     */
+    int getMaxWidth();
+
+    /**
+     * The state of a column regarding its visibility and pinning.<br/>
+     * <br/>
+     * There are only 3 possible states : {@link #UNPINNED_SHOWN}, {@link #UNPINNED_HIDDEN} and {@link #PINNED_SHOWN}.
+     * A column cannot be pinned and hidden.
+     */
+    public static enum State {
+        UNPINNED_SHOWN {
+
+            @Override
+            public State onHide() {
+                return UNPINNED_HIDDEN;
+            }
+
+            @Override
+            public State onShow() {
+                return UNPINNED_SHOWN;
+            }
+
+            @Override
+            public State onPin() {
+                return PINNED_SHOWN;
+            }
+
+            @Override
+            public State onUnpin() {
+                return UNPINNED_SHOWN;
+            }
+
+            @Override
+            public boolean isPinned() {
+                return false;
+            }
+
+            @Override
+            public boolean isShown() {
+                return true;
+            }
+        },
+        PINNED_SHOWN {
+
+            @Override
+            public State onHide() {
+                return PINNED_SHOWN;
+            }
+
+            @Override
+            public State onShow() {
+                return PINNED_SHOWN;
+            }
+
+            @Override
+            public State onPin() {
+                return PINNED_SHOWN;
+            }
+
+            @Override
+            public State onUnpin() {
+                return UNPINNED_SHOWN;
+            }
+
+            @Override
+            public boolean isPinned() {
+                return true;
+            }
+
+            @Override
+            public boolean isShown() {
+                return true;
+            }
+        },
+        UNPINNED_HIDDEN {
+
+            @Override
+            public State onHide() {
+                return UNPINNED_HIDDEN;
+            }
+
+            @Override
+            public State onShow() {
+                return UNPINNED_SHOWN;
+            }
+
+            @Override
+            public State onPin() {
+                return UNPINNED_HIDDEN;
+            }
+
+            @Override
+            public State onUnpin() {
+                return UNPINNED_HIDDEN;
+            }
+
+            @Override
+            public boolean isPinned() {
+                return false;
+            }
+
+            @Override
+            public boolean isShown() {
+                return false;
+            }
+        };
+
+        public abstract State onHide();
+
+        public abstract State onShow();
+
+        public abstract State onPin();
+
+        public abstract State onUnpin();
+
+        public abstract boolean isPinned();
+
+        public abstract boolean isShown();
+    }
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/ColumnFilterFooterDataGridView.java b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/ColumnFilterFooterDataGridView.java
new file mode 100644
index 00000000..90c63602
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/ColumnFilterFooterDataGridView.java
@@ -0,0 +1,250 @@
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.ui.datagrid2;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import com.ponysdk.core.server.stm.Txn;
+import com.ponysdk.core.ui.basic.Element;
+import com.ponysdk.core.ui.basic.IsPWidget;
+import com.ponysdk.core.ui.basic.PTextBox;
+import com.ponysdk.core.ui.basic.event.PValueChangeEvent;
+import com.ponysdk.core.util.StringUtils;
+
+/**
+ * @author mbagdouri
+ */
+public class ColumnFilterFooterDataGridView<K, V> extends DecoratorDataGridView<K, V> {
+
+    private static final char SEPARATOR = '\u0000';
+    private static final String SEPARATOR_STR = String.valueOf(SEPARATOR);
+    private static final String TWO_SEPARATORS = SEPARATOR_STR + SEPARATOR_STR;
+    private static final String CONFIG_KEY = ColumnFilterFooterDataGridView.class.getName();
+
+    private PTextBox disabledFooter;
+
+    private ColumnFilterFooterDataGridAdapter adapter;
+
+    public ColumnFilterFooterDataGridView(final DataGridView<K, V> view) {
+        super(view);
+    }
+
+    @Override
+    public void setAdapter(final DataGridAdapter<K, V> adapter) {
+        if (this.adapter == null) this.adapter = new ColumnFilterFooterDataGridAdapter(adapter);
+        super.setAdapter(this.adapter);
+        addDrawListener(this::enableFooter);
+    }
+
+    private void enableFooter() {
+        if (disabledFooter == null) return;
+        disabledFooter.setEnabled(true);
+        disabledFooter.focus();
+        // must be sent immediately
+        Txn.get().flush(); //FIXME use Txn.get() ???
+        disabledFooter = null;
+    }
+
+    private void checkAdapter() {
+        if (adapter == null) throw new IllegalStateException("No " + DataGridAdapter.class + " has been set yet");
+    }
+
+    @Override
+    public void setConfig(final DataGridConfig<V> config) {
+        super.setConfig(config);
+        final Map<FilterFooterColumn, String> filters = config.getCustomValue(CONFIG_KEY);
+        if (filters == null) return;
+        for (final Map.Entry<FilterFooterColumn, String> entry : filters.entrySet()) {
+            if (entry.getKey().state.isShown()) {
+                entry.getKey().footer.setText(entry.getValue());
+                entry.getKey().filter(entry.getValue());
+            }
+        }
+    }
+
+    @Override
+    public DataGridConfig<V> getConfig() {
+        final DataGridConfig<V> config = super.getConfig();
+        final Map<FilterFooterColumn, String> filters = new HashMap<>();
+        for (final ColumnDefinition<V> column : adapter.filterFooterColumns.values()) {
+            final FilterFooterColumn filterFooterColumn = (FilterFooterColumn) column;
+            if (filterFooterColumn.filter.isEmpty()) continue;
+            filters.put(filterFooterColumn, filterFooterColumn.filter);
+        }
+        if (filters.isEmpty()) return config;
+        config.setCustomValue(CONFIG_KEY, filters);
+        return config;
+    }
+
+    @Override
+    public String encodeConfigCustomValue(final String key, final Object value) {
+        if (!CONFIG_KEY.equals(key)) return super.encodeConfigCustomValue(key, value);
+        checkAdapter();
+        final Map<FilterFooterColumn, String> filters = (Map<FilterFooterColumn, String>) value;
+        final StringBuilder sb = new StringBuilder();
+        for (final Map.Entry<FilterFooterColumn, String> entry : filters.entrySet()) {
+            final String k = entry.getKey().getId().replace(SEPARATOR_STR, TWO_SEPARATORS);
+            final String v = entry.getValue().replace(SEPARATOR_STR, TWO_SEPARATORS);
+            sb.append(k).append(SEPARATOR).append(v).append(SEPARATOR);
+        }
+        return sb.toString();
+    }
+
+    @Override
+    public Object decodeConfigCustomValue(final String key, final String value) throws DecodeException {
+        if (!CONFIG_KEY.equals(key)) return super.decodeConfigCustomValue(key, value);
+        checkAdapter();
+        final Map<FilterFooterColumn, String> filters = new HashMap<>();
+        String k = null;
+        int start = 0;
+        for (int i = 0; i < value.length(); i++) {
+            final char c = value.charAt(i);
+            if (c != SEPARATOR) continue;
+            if (i + 1 < value.length() && value.charAt(i + 1) == SEPARATOR) {
+                i++;
+                continue;
+            }
+            if (k == null) k = value.substring(start, i).replace(TWO_SEPARATORS, SEPARATOR_STR);
+            else {
+                final String v = value.substring(start, i).replace(TWO_SEPARATORS, SEPARATOR_STR);
+                final FilterFooterColumn column = adapter.filterFooterColumns.get(k);
+                if (column != null) {
+                    filters.put(column, v);
+                }
+                k = null;
+            }
+            start = i + 1;
+        }
+        return filters;
+    }
+
+    private class ColumnFilterFooterDataGridAdapter extends DecoratorDataGridAdapter<K, V> {
+
+        private final List<ColumnDefinition<V>> columns;
+        private final Map<String, FilterFooterColumn> filterFooterColumns = new HashMap<>();
+
+        private ColumnFilterFooterDataGridAdapter(final DataGridAdapter<K, V> adapter) {
+            super(adapter);
+            final List<ColumnDefinition<V>> c = adapter.getColumnDefinitions();
+            columns = new ArrayList<>(c.size());
+            for (final ColumnDefinition<V> column : c) {
+                if (column.getFooter() != null) {
+                    columns.add(column);
+                } else {
+                    final FilterFooterColumn filterFooterColumn = new FilterFooterColumn(column);
+                    columns.add(filterFooterColumn);
+                    filterFooterColumns.put(filterFooterColumn.getId(), filterFooterColumn);
+                }
+            }
+        }
+
+        @Override
+        public List<ColumnDefinition<V>> getColumnDefinitions() {
+            return columns;
+        }
+
+        @Override
+        public boolean hasFooter() {
+            return true;
+        }
+    }
+
+    protected void onCreateFooterWidget(final ColumnDefinition<V> column, final PTextBox footer) {
+        footer.setWidth(column.getDefaultWidth() * 0.8 + "px");
+    }
+
+    private class FilterFooterColumn extends DecoratorColumnDefinition<V> {
+
+        private final PTextBox footer = Element.newPTextBox();
+        private State state = getDefaultState();
+        private String filter = "";
+
+        private FilterFooterColumn(final ColumnDefinition<V> column) {
+            super(column);
+            if (isFilterable()) {
+                this.footer.addValueChangeHandler(this::onValueChange);
+
+                //only to receive value change events on every key
+                this.footer.addKeyUpHandler(e -> {
+                    //do nothing
+                });
+            } else {
+                this.footer.setEnabled(false);
+            }
+            onCreateFooterWidget(column, footer);
+        }
+
+        @Override
+        public IsPWidget getFooter() {
+            return footer;
+        }
+
+        private void onValueChange(final PValueChangeEvent<String> event) {
+            footer.setEnabled(false);
+            // must be sent immediately
+            Txn.get().flush(); //FIXME use Txn.get() ???
+            disabledFooter = footer;
+            filter(event.getData());
+        }
+
+        private void filter(final String f) {
+            final String newFilter = f.trim();
+            final boolean reinforcing = newFilter.contains(filter);
+            filter = newFilter;
+            final ColumnController<V> grip = getController();
+            if (grip == null) return;
+            if (filter.isEmpty()) grip.clearFilter(FilterFooterColumn.this);
+            else grip.filter(FilterFooterColumn.this,
+                (data, helper) -> StringUtils.containsIgnoreCase(helper.get().toString(), newFilter), reinforcing);
+        }
+
+        @Override
+        public void onClearFilter(final Object key) {
+            if (key == FilterFooterColumn.this) {
+                footer.setText(filter = "");
+                return;
+            }
+            super.onClearFilter(key);
+        }
+
+        @Override
+        public void onClearFilters() {
+            footer.setText(filter = "");
+            super.onClearFilters();
+        }
+
+        @Override
+        public void onStateChanged(final State state) {
+            this.state = state;
+            if (!state.isShown()) {
+                footer.setText(filter = "");
+            }
+            super.onStateChanged(state);
+        }
+
+    }
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/ColumnVisibilitySelectorDataGridView.java b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/ColumnVisibilitySelectorDataGridView.java
new file mode 100644
index 00000000..9afe8840
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/ColumnVisibilitySelectorDataGridView.java
@@ -0,0 +1,284 @@
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.ui.datagrid2;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+import java.util.function.BiPredicate;
+import java.util.function.Supplier;
+
+import com.ponysdk.core.ui.basic.Element;
+import com.ponysdk.core.ui.basic.PButton;
+import com.ponysdk.core.ui.basic.PCheckBox;
+import com.ponysdk.core.ui.basic.PComplexPanel;
+import com.ponysdk.core.ui.basic.PTextBox;
+import com.ponysdk.core.ui.basic.PWidget;
+import com.ponysdk.core.ui.basic.event.PClickEvent;
+import com.ponysdk.core.ui.basic.event.PClickHandler;
+import com.ponysdk.core.ui.basic.event.PValueChangeEvent;
+import com.ponysdk.core.ui.basic.event.PValueChangeHandler;
+import com.ponysdk.core.ui.datagrid2.ColumnDefinition.State;
+import com.ponysdk.core.util.StringUtils;
+
+/**
+ * @author mbagdouri
+ */
+public class ColumnVisibilitySelectorDataGridView<K, V> extends WidgetDecoratorDataGridView<K, V> {
+
+    private final PWidget layout;
+    private final PComplexPanel columnsWidget;
+    private final List<ColumnHandler<V>> handlers = new ArrayList<>();
+
+    public ColumnVisibilitySelectorDataGridView(final DataGridView<K, V> view) {
+        super(view);
+        columnsWidget = createColumnsWidget();
+
+        final PWidget applyWidget = initApplyWidget();
+
+        final PWidget cancelWidget = initCancelWidget();
+
+        final PWidget restoreWidget = initRestoreWidget();
+
+        final PTextBox searchWidget = initSearchWidget();
+
+        layout = createLayout(columnsWidget, applyWidget, cancelWidget, restoreWidget, searchWidget);
+    }
+
+    private PTextBox initSearchWidget() {
+        final PTextBox searchWidget = createSearchWidget();
+        searchWidget.addValueChangeHandler(e -> {
+            for (final ColumnHandler<V> handler : handlers) {
+                handler.wrapperWidget.setVisible(StringUtils.containsIgnoreCase(handler.column.getId(), e.getData().trim()));
+            }
+        });
+        //only to receive value change events on every key
+        searchWidget.addKeyUpHandler(e -> {
+            //do nothing
+        });
+        return searchWidget;
+    }
+
+    private PWidget initRestoreWidget() {
+        final PWidget restoreWidget = createRestoreWidget();
+        restoreWidget.addDomHandler((PClickHandler) e -> {
+            clearSelection();
+            for (final ColumnHandler<V> handler : handlers) {
+                if (!handler.checkBox.isEnabled()) continue;
+                final boolean shownByDefault = handler.column.getDefaultState().isShown();
+                if (shownByDefault != handler.checkBox.getValue()) {
+                    handler.checkBox.setValue(shownByDefault);
+                    handler.valueChanged = true;
+                }
+            }
+            onRestore();
+        }, PClickEvent.TYPE);
+        return restoreWidget;
+    }
+
+    private PWidget initCancelWidget() {
+        final PWidget cancelWidget = createCancelWidget();
+        cancelWidget.addDomHandler((PClickHandler) e -> {
+            clearSelection();
+            onCancel();
+        }, PClickEvent.TYPE);
+        return cancelWidget;
+    }
+
+    private PWidget initApplyWidget() {
+        final PWidget applyWidget = createApplyWidget();
+        applyWidget.addDomHandler((PClickHandler) e -> {
+            for (final ColumnHandler<V> handler : handlers) {
+                if (!handler.valueChanged) continue;
+                try {
+                    final ColumnController<V> grip = handler.column.getController();
+                    if (grip == null) continue;
+                    if (handler.checkBox.getValue()) {
+                        grip.setState(handler.state.onShow());
+                    } else {
+                        grip.setState(handler.state.onHide());
+                    }
+                } finally {
+                    handler.valueChanged = false;
+                }
+            }
+            onApply();
+        }, PClickEvent.TYPE);
+        return applyWidget;
+    }
+
+    private void clearSelection() {
+        for (final ColumnHandler<V> handler : handlers) {
+            if (!handler.valueChanged) continue;
+            handler.checkBox.setValue(!handler.checkBox.getValue());
+            handler.valueChanged = false;
+        }
+    }
+
+    protected void onApply() {
+
+    }
+
+    protected void onCancel() {
+
+    }
+
+    protected void onRestore() {
+
+    }
+
+    protected PComplexPanel createColumnSelectorWidget(final ColumnDefinition<V> column) {
+        return Element.newLi();
+    }
+
+    protected PComplexPanel createColumnsWidget() {
+        return Element.newUl();
+    }
+
+    protected PWidget createApplyWidget() {
+        final PButton button = Element.newPButton();
+        button.setEnabledOnRequest(true);
+        button.setText("Apply");
+        return button;
+    }
+
+    protected PWidget createCancelWidget() {
+        final PButton button = Element.newPButton();
+        button.setEnabledOnRequest(true);
+        button.setText("Cancel");
+        return button;
+    }
+
+    protected PWidget createRestoreWidget() {
+        final PButton button = Element.newPButton();
+        button.setEnabledOnRequest(true);
+        button.setText("Restore default settings");
+        return button;
+    }
+
+    protected PTextBox createSearchWidget() {
+        return Element.newPTextBox();
+    }
+
+    protected PWidget createLayout(final PComplexPanel columnsWidget, final PWidget applyWidget, final PWidget cancelWidget,
+                                   final PWidget restoreWidget, final PTextBox searchWidget) {
+        final PComplexPanel div = Element.newDiv();
+        div.add(searchWidget);
+        div.add(applyWidget);
+        div.add(cancelWidget);
+        div.add(restoreWidget);
+        div.add(columnsWidget);
+        return div;
+    }
+
+    @Override
+    public final void setAdapter(final DataGridAdapter<K, V> adapter) {
+        super.setAdapter(adapter);
+        final List<ColumnDefinition<V>> columns = new ArrayList<>(adapter.getColumnDefinitions());
+        final Iterator<ColumnDefinition<V>> iterator = columns.iterator();
+        while (iterator.hasNext()) {
+            final ColumnDefinition<V> column = iterator.next();
+            if (!column.isVisibilitySwitchable()) iterator.remove();
+        }
+        columns.sort(this::compare);
+        for (final ColumnDefinition<V> column : columns) {
+            final PComplexPanel wrapperWidget = createColumnSelectorWidget(column);
+            final ColumnHandler<V> handler = new ColumnHandler<>(wrapperWidget, column);
+            handlers.add(handler);
+            addColumnActionListener(column, handler);
+            columnsWidget.add(wrapperWidget);
+        }
+    }
+
+    protected int compare(final ColumnDefinition<V> c1, final ColumnDefinition<V> c2) {
+        return c1.getId().compareTo(c2.getId());
+    }
+
+    private static class ColumnHandler<V> implements ColumnActionListener<V>, PValueChangeHandler<Boolean> {
+
+        private final ColumnDefinition<V> column;
+        private final PCheckBox checkBox;
+        private final PComplexPanel wrapperWidget;
+        private State state;
+        private boolean valueChanged = false;
+
+        ColumnHandler(final PComplexPanel wrapperWidget, final ColumnDefinition<V> column) {
+            super();
+            this.column = column;
+            this.wrapperWidget = wrapperWidget;
+            this.checkBox = Element.newPCheckBox(column.getId());
+            checkBox.addValueChangeHandler(this);
+            onStateChanged(column.getDefaultState());
+            wrapperWidget.add(checkBox);
+        }
+
+        @Override
+        public void onSort(final boolean asc) {
+        }
+
+        @Override
+        public void onClearSort() {
+        }
+
+        @Override
+        public void onFilter(final Object key, final BiPredicate<V, Supplier<Object>> filter, final boolean reinforcing) {
+        }
+
+        @Override
+        public void onClearFilter(final Object key) {
+        }
+
+        @Override
+        public void onClearFilters() {
+        }
+
+        @Override
+        public void onRedraw(final boolean clearRenderingHelpers) {
+        }
+
+        @Override
+        public void onValueChange(final PValueChangeEvent<Boolean> event) {
+            valueChanged = !valueChanged;
+        }
+
+        @Override
+        public void onStateChanged(final State state) {
+            this.state = state;
+            checkBox.setValue(state.isShown());
+            checkBox.setEnabled(!state.isPinned());
+            valueChanged = false;
+        }
+
+        @Override
+        public void onResized(final int width) {
+        }
+
+    }
+
+    @Override
+    public PWidget getDecoratorWidget() {
+        return layout;
+    }
+
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/ConfigSelectorDataGridView.java b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/ConfigSelectorDataGridView.java
new file mode 100644
index 00000000..abf12b29
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/ConfigSelectorDataGridView.java
@@ -0,0 +1,419 @@
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.ui.datagrid2;
+
+import java.nio.BufferUnderflowException;
+import java.nio.ByteBuffer;
+import java.nio.charset.StandardCharsets;
+import java.util.ArrayList;
+import java.util.Base64;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+
+import com.ponysdk.core.ui.basic.Element;
+import com.ponysdk.core.ui.basic.IsPWidget;
+import com.ponysdk.core.ui.basic.PButton;
+import com.ponysdk.core.ui.basic.PComplexPanel;
+import com.ponysdk.core.ui.basic.PWidget;
+import com.ponysdk.core.ui.datagrid2.ColumnDefinition.State;
+import com.ponysdk.core.ui.datagrid2.DataGridConfig.ColumnConfig;
+import com.ponysdk.core.ui.datagrid2.DataGridConfig.ColumnSort;
+import com.ponysdk.core.ui.datagrid2.DataGridConfig.Sort;
+
+/**
+ * @author mbagdouri
+ */
+public class ConfigSelectorDataGridView<K, V> extends WidgetDecoratorDataGridView<K, V> {
+
+    private static final byte COLUMN_SORT = 0;
+    private static final byte GENERAL_SORT = 1;
+    private final PComplexPanel layout;
+    private final String defaultKey;
+    private final LinkedHashMap<String, ConfigHandler> handlers = new LinkedHashMap<>();
+    private DataGridAdapter<K, V> adapter;
+    private ConfigHandler current;
+
+    public ConfigSelectorDataGridView(final DataGridView<K, V> view, final String defaultKey) {
+        super(view);
+        layout = createLayout();
+        this.defaultKey = defaultKey;
+    }
+
+    private void checkAdapter() {
+        if (adapter == null) throw new IllegalStateException("No " + DataGridAdapter.class + " has been set yet");
+    }
+
+    @Override
+    public void setAdapter(final DataGridAdapter<K, V> adapter) {
+        super.setAdapter(adapter);
+        this.adapter = adapter;
+        final ConfigHandler defaultHandler = new ConfigHandler(defaultKey, null);
+        handlers.put(defaultKey, defaultHandler);
+        current = defaultHandler;
+        onSelectConfigWidget(defaultKey, current.widget);
+    }
+
+    public void setConfigEntries(final List<ConfigEntry<V>> entries) {
+        checkAdapter();
+        final DataGridConfig<V> defaultConfig = handlers.get(defaultKey).getConfig();
+        layout.clear();
+        handlers.clear();
+        if (entries.size() == 0 || !defaultKey.equals(entries.get(0).getKey())) {
+            handlers.put(defaultKey, new ConfigHandler(defaultKey, defaultConfig));
+        }
+        for (final ConfigEntry<V> entry : entries) {
+            addConfigEntry(entry.getKey(), entry.getConfig());
+        }
+        current = handlers.get(defaultKey);
+        onSelectConfigWidget(defaultKey, current.widget);
+        ConfigSelectorDataGridView.super.setConfig(current.config);
+    }
+
+    public List<ConfigEntry<V>> decodeConfigEntries(final String encodedConf) throws DecodeException {
+        checkAdapter();
+        try {
+            final ByteBuffer buffer = Base64.getDecoder().decode(StandardCharsets.US_ASCII.encode(encodedConf));
+            int entriesNumber = buffer.getInt();
+            final List<ConfigEntry<V>> entries = new ArrayList<>(entriesNumber);
+            while (entriesNumber-- > 0) {
+                entries.add(decodeConfigEntry(buffer));
+            }
+            return entries;
+        } catch (final IllegalArgumentException | BufferUnderflowException e) {
+            throw new DecodeException(e);
+        }
+    }
+
+    public String encodeConfigEntries(final List<ConfigEntry<V>> entries) {
+        checkAdapter();
+        ByteBuffer buffer = ByteBuffer.allocate(4);
+        buffer = encodeInt(buffer, entries.size());
+        for (final ConfigEntry<V> entry : entries) {
+            buffer = encodeConfigEntry(buffer, entry);
+        }
+        buffer.flip();
+        return StandardCharsets.US_ASCII.decode(Base64.getEncoder().encode(buffer)).toString();
+    }
+
+    private ConfigEntry<V> decodeConfigEntry(final ByteBuffer buffer) throws DecodeException {
+        final String key = decodeString(buffer);
+        final DataGridConfig<V> config = decodeConfig(buffer);
+        return e(key, config);
+    }
+
+    private ByteBuffer encodeConfigEntry(ByteBuffer buffer, final ConfigEntry<V> entry) {
+        buffer = encodeString(buffer, entry.getKey());
+        buffer = encodeConfig(buffer, entry.getConfig());
+        return buffer;
+    }
+
+    private DataGridConfig<V> decodeConfig(final ByteBuffer buffer) throws DecodeException {
+        int sortsNumber = buffer.getInt();
+        final DataGridConfigBuilder<V> builder = new DataGridConfigBuilder<>();
+        while (sortsNumber-- > 0) {
+            final Sort<V> sort = decodeSort(buffer);
+            builder.addSort(sort);
+        }
+        int columnConfigsNumber = buffer.getInt();
+        while (columnConfigsNumber-- > 0) {
+            final ColumnConfig<V> columnConfig = decodeColumnConfig(buffer);
+            if (columnConfig == null) continue;
+            builder.addColumnConfig(columnConfig);
+        }
+        int customValuesNumber = buffer.getInt();
+        while (customValuesNumber-- > 0) {
+            decodeCustomValue(buffer, builder);
+        }
+        return builder.build();
+    }
+
+    private ByteBuffer encodeConfig(ByteBuffer buffer, final DataGridConfig<V> config) {
+        final List<Sort<V>> sorts = config.getSorts();
+        buffer = encodeInt(buffer, sorts.size());
+        for (final Sort<V> sort : sorts) {
+            buffer = encodeSort(buffer, sort);
+        }
+        final List<ColumnConfig<V>> columnConfigs = config.getColumnConfigs();
+        buffer = encodeInt(buffer, columnConfigs.size());
+        for (final ColumnConfig<V> columnConfig : columnConfigs) {
+            buffer = encodeColumnConfig(buffer, columnConfig);
+        }
+        final Map<String, Object> customValues = config.getReadOnlyCustomValues();
+        buffer = encodeInt(buffer, customValues.size());
+        for (final Map.Entry<String, Object> entry : customValues.entrySet()) {
+            buffer = encodeCustomValue(buffer, entry.getKey(), entry.getValue());
+        }
+        return buffer;
+    }
+
+    private void decodeCustomValue(final ByteBuffer buffer, final DataGridConfigBuilder<V> builder) throws DecodeException {
+        final String key = decodeString(buffer);
+        final Object value = decodeConfigCustomValue(key, decodeString(buffer));
+        if (value == null) return;
+        builder.addCustomValue(key, value);
+    }
+
+    private ByteBuffer encodeCustomValue(ByteBuffer buffer, final String key, final Object value) {
+        buffer = encodeString(buffer, key);
+        buffer = encodeString(buffer, encodeConfigCustomValue(key, value));
+        return buffer;
+    }
+
+    private static <V> ColumnConfig<V> decodeColumnConfig(final ByteBuffer buffer) {
+        final String columnId = decodeString(buffer);
+        final State state = decodeState(buffer);
+        final int width = buffer.getInt();
+        return new ColumnConfig<>(columnId, state, width);
+    }
+
+    private static <V> ByteBuffer encodeColumnConfig(ByteBuffer buffer, final ColumnConfig<V> columnConfig) {
+        buffer = encodeString(buffer, columnConfig.getColumnId());
+        buffer = encodeString(buffer, columnConfig.getState().name());
+        buffer = encodeInt(buffer, columnConfig.getWidth());
+        return buffer;
+    }
+
+    private static State decodeState(final ByteBuffer buffer) {
+        try {
+            return State.valueOf(decodeString(buffer));
+        } catch (final IllegalArgumentException e) {
+            return null;
+        }
+    }
+
+    private static <V> Sort<V> decodeSort(final ByteBuffer buffer) {
+        final byte b = buffer.get();
+        if (b == COLUMN_SORT) return new ColumnSort<>(decodeString(buffer), decodeBoolean(buffer));
+        else return null;
+    }
+
+    private static <V> ByteBuffer encodeSort(ByteBuffer buffer, final Sort<V> sort) {
+        if (sort instanceof ColumnSort) {
+            buffer = encodeByte(buffer, COLUMN_SORT);
+            final ColumnSort<V> columnSort = (ColumnSort<V>) sort;
+            buffer = encodeString(buffer, columnSort.getColumnId());
+            buffer = encodeBoolean(buffer, columnSort.isAsc());
+        } else { // sort instanceof GeneralSort
+            buffer = encodeByte(buffer, GENERAL_SORT);
+        }
+        return buffer;
+    }
+
+    private static boolean decodeBoolean(final ByteBuffer buffer) {
+        return buffer.get() != 0;
+    }
+
+    private static ByteBuffer encodeBoolean(ByteBuffer buffer, final boolean value) {
+        buffer = ensureRemaining(buffer, 1);
+        buffer.put(value ? (byte) 1 : (byte) 0);
+        return buffer;
+    }
+
+    private static ByteBuffer encodeInt(ByteBuffer buffer, final int value) {
+        buffer = ensureRemaining(buffer, 4);
+        buffer.putInt(value);
+        return buffer;
+    }
+
+    private static ByteBuffer encodeByte(ByteBuffer buffer, final byte value) {
+        buffer = ensureRemaining(buffer, 1);
+        buffer.put(value);
+        return buffer;
+    }
+
+    private static String decodeString(final ByteBuffer buffer) {
+        final int length = buffer.getInt();
+        final int limit = buffer.limit();
+        buffer.limit(buffer.position() + length);
+        final String str = StandardCharsets.UTF_8.decode(buffer).toString();
+        buffer.limit(limit);
+        return str;
+    }
+
+    private static ByteBuffer encodeString(ByteBuffer buffer, final String value) {
+        final byte[] encoded = value.getBytes(StandardCharsets.UTF_8);
+        buffer = ensureRemaining(buffer, 4 + encoded.length);
+        buffer.putInt(encoded.length);
+        buffer.put(encoded);
+        return buffer;
+    }
+
+    private static ByteBuffer ensureRemaining(final ByteBuffer buffer, final int length) {
+        if (buffer.remaining() >= length) return buffer;
+        final ByteBuffer b = ByteBuffer.allocate(Math.max(buffer.capacity() * 2, buffer.capacity() + length));
+        buffer.flip();
+        b.put(buffer);
+        return b;
+    }
+
+    public boolean addConfigEntry(final String key, final DataGridConfig<V> config) {
+        checkAdapter();
+        Objects.requireNonNull(config);
+        if (handlers.containsKey(key)) return false;
+        handlers.put(key, new ConfigHandler(key, config));
+        return true;
+    }
+
+    public DataGridConfig<V> removeConfigEntry(final String key) {
+        checkAdapter();
+        final ConfigHandler handler = handlers.get(key);
+        if (handler == null) return null;
+        final DataGridConfig<V> config = handler.getConfig();
+        handler.onRemove();
+        return config;
+    }
+
+    public DataGridConfig<V> getCurrentConfig() {
+        checkAdapter();
+        return current.getConfig();
+    }
+
+    public void selectConfig(final String key) {
+        checkAdapter();
+        final ConfigHandler handler = handlers.get(key);
+        if (handler == null) return;
+        handler.onSelect();
+    }
+
+    public List<ConfigEntry<V>> getConfigEntries() {
+        checkAdapter();
+        final List<ConfigEntry<V>> entries = new ArrayList<>(handlers.size());
+        for (final ConfigHandler handler : handlers.values()) {
+            entries.add(new SimpleConfigEntry<>(handler.key, handler.getConfig()));
+        }
+        return entries;
+    }
+
+    protected PComplexPanel createLayout() {
+        return Element.newDiv();
+    }
+
+    protected void addConfigWidget(final Object key, final PComplexPanel layout, final IsPWidget configWidget) {
+        layout.add(configWidget);
+    }
+
+    @Override
+    public PWidget getDecoratorWidget() {
+        return layout;
+    }
+
+    public static interface ConfigEntry<V> {
+
+        String getKey();
+
+        DataGridConfig<V> getConfig();
+
+    }
+
+    protected IsPWidget createWidget(final Object key, final ConfigSelectorDataGridView<?, V>.ConfigHandler handler) {
+        final PComplexPanel span = Element.newSpan();
+        final PButton select = Element.newPButton(key.toString());
+        select.addClickHandler(e -> handler.onSelect());
+        span.add(select);
+        if (!key.equals(defaultKey)) {
+            final PButton remove = Element.newPButton("X");
+            remove.addClickHandler(e -> handler.onRemove());
+            span.add(remove);
+        }
+        return span;
+    }
+
+    protected void onSelectConfigWidget(final Object key, final IsPWidget configWidget) {
+        ((PButton) ((PComplexPanel) configWidget.asWidget()).getWidget(0)).setEnabled(false);
+    }
+
+    protected void onUnselectConfigWidget(final Object key, final IsPWidget configWidget) {
+        ((PButton) ((PComplexPanel) configWidget.asWidget()).getWidget(0)).setEnabled(true);
+    }
+
+    public static <V> ConfigEntry<V> e(final String key, final DataGridConfig<V> config) {
+        return new SimpleConfigEntry<>(key, config);
+    }
+
+    protected class ConfigHandler {
+
+        private final String key;
+        private final IsPWidget widget;
+        private DataGridConfig<V> config;
+
+        private ConfigHandler(final String key, final DataGridConfig<V> config) {
+            this.key = key;
+            this.config = config;
+            widget = createWidget(key, this);
+            addConfigWidget(key, layout, widget);
+        }
+
+        public void onRemove() {
+            layout.remove(widget.asWidget());
+            if (current == null || key.equals(defaultKey)) return;
+            if (this == current) {
+                handlers.get(defaultKey).onSelect();
+            }
+            handlers.remove(key);
+        }
+
+        public void onSelect() {
+            if (current == null || this == current) return;
+            current.config = getView().getConfig();
+            onUnselectConfigWidget(key, current.widget);
+            current = this;
+            ConfigSelectorDataGridView.super.setConfig(config);
+            onSelectConfigWidget(key, widget);
+        }
+
+        private DataGridConfig<V> getConfig() {
+            if (this == current) {
+                config = getView().getConfig();
+            }
+            return config;
+        }
+
+    }
+
+    public static class SimpleConfigEntry<V> implements ConfigEntry<V> {
+
+        private final String key;
+        private final DataGridConfig<V> config;
+
+        public SimpleConfigEntry(final String key, final DataGridConfig<V> config) {
+            super();
+            this.key = key;
+            this.config = config;
+        }
+
+        @Override
+        public String getKey() {
+            return key;
+        }
+
+        @Override
+        public DataGridConfig<V> getConfig() {
+            return config;
+        }
+
+    }
+
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DataGridAdapter.java b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DataGridAdapter.java
new file mode 100644
index 00000000..df8a9a2d
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DataGridAdapter.java
@@ -0,0 +1,117 @@
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.ui.datagrid2;
+
+import java.util.List;
+
+import com.ponysdk.core.ui.basic.IsPWidget;
+
+/**
+ * {@code DataGridAdapter} is used to set up and initialize the {@link DataGridView}.
+ *
+ * @see DataGridView#setAdapter(DataGridAdapter)
+ * @author mbagdouri
+ */
+public interface DataGridAdapter<K, V> {
+
+    /**
+     * Must always return the same immutable instance.
+     *
+     * @return the list of column definitions for this adapter.
+     */
+    List<ColumnDefinition<V>> getColumnDefinitions();
+
+    /**
+     * Defines how to retrieve the key from the value.
+     * Must always return the same key for the same instance of the value.
+     */
+    K getKey(V v);
+
+    /**
+     * When two values are considered equal regarding all other criteria of comparison, they will be compared according
+     * to a last criterion, which is the order of insertion in the model. When we resort to this criterion, this method
+     * determines whether data will be sorted in ascending or descending (insertion) order.
+     *
+     * @see #compareDefault(Object, Object)
+     * @see DataGridView#addSort(Object, java.util.Comparator)
+     * @see ColumnController#sort(boolean)
+     */
+    boolean isAscendingSortByInsertionOrder();
+
+    /**
+     * Returns a negative integer, zero, or a positive integer as {@code v1} is less than, equal
+     * to, or greater than {@code v2}.<br/>
+     * Returns always zero if there is no default criterion of comparison.
+     */
+    int compareDefault(V v1, V v2);
+
+    /**
+     * If {@link #hasHeader()} is {@code true}, this method is called when the header row widget of the
+     * {@link DataGridView} is created
+     */
+    void onCreateHeaderRow(IsPWidget rowWidget);
+
+    /**
+     * If {@link #hasFooter()} is {@code true}, this method is called when the footer row widget of the
+     * {@link DataGridView} is created
+     */
+    void onCreateFooterRow(IsPWidget rowWidget);
+
+    /**
+     * Called when a row widget is created in the {@link DataGridView}
+     */
+    void onCreateRow(IsPWidget rowWidget);
+
+    /**
+     * Called when a row is selected in the {@link DataGridView}
+     */
+    void onSelectRow(IsPWidget rowWidget);
+
+    /**
+     * Called when a row is unselected in the {@link DataGridView}
+     */
+    void onUnselectRow(IsPWidget rowWidget);
+
+    /**
+     * Called when a column resizer is created in the {@link DataGridView}
+     */
+    void onCreateColumnResizer(IsPWidget resizer);
+
+    /**
+     * @return the widget that will cover the {@link DataGridView} when it is loading data (cannot be {@code null})
+     */
+    IsPWidget createLoadingDataWidget();
+
+    /**
+     * <i>N.B. The columns of a {@link DataGridView} without a header cannot be resized nor dragged</i>
+     *
+     * @return {@code true} if the {@link DataGridView} must have a header, {@code false} otherwise
+     */
+    boolean hasHeader();
+
+    /**
+     * @return {@code true} if the {@link DataGridView} must have a footer, {@code false} otherwise
+     */
+    boolean hasFooter();
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DataGridConfig.java b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DataGridConfig.java
new file mode 100644
index 00000000..9afd77b5
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DataGridConfig.java
@@ -0,0 +1,129 @@
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.ui.datagrid2;
+
+import java.util.Comparator;
+import java.util.List;
+import java.util.Map;
+
+import com.ponysdk.core.ui.datagrid2.ColumnDefinition.State;
+
+/**
+ * {@code DataGridConfig} is a configuration of the {@link DataGridView} that can be changed multiple times on the view
+ *
+ * @author mbagdouri
+ */
+public interface DataGridConfig<V> {
+
+    public abstract List<Sort<V>> getSorts();
+
+    public abstract List<ColumnConfig<V>> getColumnConfigs();
+
+    public abstract Map<String, Object> getReadOnlyCustomValues();
+
+    public abstract <T> T getCustomValue(String key);
+
+    public abstract void setCustomValue(String key, Object value);
+
+    public static class ColumnConfig<V> {
+
+        private final String columnId;
+        private final State state;
+        private final int width;
+
+        public ColumnConfig(final String columnId, final State state, final int width) {
+            super();
+            this.columnId = columnId;
+            this.state = state;
+            this.width = width;
+        }
+
+        public ColumnConfig(final ColumnDefinition<V> column) {
+            this(column.getId(), column.getDefaultState(), column.getDefaultWidth());
+        }
+
+        public int getWidth() {
+            return width;
+        }
+
+        public String getColumnId() {
+            return columnId;
+        }
+
+        public State getState() {
+            return state;
+        }
+
+    }
+
+    public static class Sort<V> {
+
+        private Sort() {
+
+        }
+
+    }
+
+    public final static class ColumnSort<V> extends Sort<V> {
+
+        private final String columnId;
+        private final boolean asc;
+
+        public ColumnSort(final String columnId, final boolean asc) {
+            super();
+            this.columnId = columnId;
+            this.asc = asc;
+        }
+
+        public String getColumnId() {
+            return columnId;
+        }
+
+        public boolean isAsc() {
+            return asc;
+        }
+
+    }
+
+    public final static class GeneralSort<V> extends Sort<V> {
+
+        private final Object key;
+        private final Comparator<V> comparator;
+
+        public GeneralSort(final Object key, final Comparator<V> comparator) {
+            super();
+            this.key = key;
+            this.comparator = comparator;
+        }
+
+        public Object getKey() {
+            return key;
+        }
+
+        public Comparator<V> getComparator() {
+            return comparator;
+        }
+
+    }
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DataGridConfigBuilder.java b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DataGridConfigBuilder.java
new file mode 100644
index 00000000..fb469146
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DataGridConfigBuilder.java
@@ -0,0 +1,118 @@
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.ui.datagrid2;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import com.ponysdk.core.ui.datagrid2.DataGridConfig.ColumnConfig;
+import com.ponysdk.core.ui.datagrid2.DataGridConfig.Sort;
+
+/**
+ * @author mbagdouri
+ */
+public class DataGridConfigBuilder<V> {
+
+    private boolean built = false;
+    private final List<Sort<V>> sorts = new ArrayList<>();
+    private final List<ColumnConfig<V>> columnConfigs = new ArrayList<>();
+    private final Map<String, Object> customValues = new HashMap<>();
+
+    public DataGridConfigBuilder() {
+    }
+
+    void checkBuilt() {
+        if (built)
+            throw new IllegalArgumentException("A " + DataGridConfig.class + " object has already been built using this builder");
+    }
+
+    public DataGridConfig<V> build() {
+        checkBuilt();
+        built = true;
+        return new BuilderDataGridConfig<>(sorts, columnConfigs, customValues);
+    }
+
+    public DataGridConfigBuilder<V> addSort(final Sort<V> sort) {
+        checkBuilt();
+        sorts.add(sort);
+        return this;
+    }
+
+    public DataGridConfigBuilder<V> addColumnConfig(final ColumnConfig<V> config) {
+        checkBuilt();
+        columnConfigs.add(config);
+        return this;
+    }
+
+    public DataGridConfigBuilder<V> addCustomValue(final String key, final Object value) {
+        checkBuilt();
+        customValues.put(key, value);
+        return this;
+    }
+
+    private static class BuilderDataGridConfig<V> implements DataGridConfig<V> {
+
+        private final List<Sort<V>> sorts;
+        private final List<ColumnConfig<V>> columnConfigs;
+        private final Map<String, Object> customValues;
+        private final Map<String, Object> unmodifiableCustomValues;
+
+        private BuilderDataGridConfig(final List<Sort<V>> sorts, final List<ColumnConfig<V>> columnConfigs,
+                final Map<String, Object> customValues) {
+            this.sorts = Collections.unmodifiableList(sorts);
+            this.columnConfigs = Collections.unmodifiableList(columnConfigs);
+            this.customValues = customValues;
+            this.unmodifiableCustomValues = Collections.unmodifiableMap(customValues);
+        }
+
+        @Override
+        public List<Sort<V>> getSorts() {
+            return sorts;
+        }
+
+        @Override
+        public void setCustomValue(final String key, final Object value) {
+            customValues.put(key, value);
+        }
+
+        @Override
+        public Map<String, Object> getReadOnlyCustomValues() {
+            return unmodifiableCustomValues;
+        }
+
+        @Override
+        public List<ColumnConfig<V>> getColumnConfigs() {
+            return columnConfigs;
+        }
+
+        @Override
+        public <T> T getCustomValue(final String key) {
+            return (T) customValues.get(key);
+        }
+
+    }
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DataGridController.java b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DataGridController.java
new file mode 100644
index 00000000..cc354140
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DataGridController.java
@@ -0,0 +1,92 @@
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.ui.datagrid2;
+
+import java.util.Collection;
+import java.util.Comparator;
+import java.util.function.BiPredicate;
+import java.util.function.Predicate;
+import java.util.function.Supplier;
+
+/**
+ * @author mbagdouri
+ */
+interface DataGridController<K, V> {
+
+    void renderCell(ColumnDefinition<V> column, int row, Cell<V> widget);
+
+    void setValueOnExtendedCell(int row, ExtendedCell<V> widget);
+
+    V getRowData(int row);
+
+    boolean isSelected(K k);
+
+    Collection<V> getLiveSelectedData();
+
+    void select(K k);
+
+    void unselect(K k);
+
+    void selectAllLiveData();
+
+    void unselectAllData();
+
+    void addSort(ColumnDefinition<V> column, boolean asc);
+
+    void addSort(Object key, Comparator<V> comparator);
+
+    void clearSort(Object key);
+
+    void clearSort(ColumnDefinition<V> column);
+
+    void clearSorts();
+
+    void setFilter(Object key, ColumnDefinition<V> column, BiPredicate<V, Supplier<Object>> filter, boolean reinforcing);
+
+    void setFilter(Object key, String id, Predicate<V> filter, boolean reinforcing);
+
+    void clearFilter(Object key);
+
+    void clearFilters(ColumnDefinition<V> column);
+
+    void clearFilters();
+
+    void setConfig(DataGridConfig<V> config);
+
+    void setAdapter(DataGridAdapter<K, V> adapter);
+
+    DataGridModel<K, V> getModel();
+
+    void setListener(DataGridControllerListener<V> listener);
+
+    void clearRenderingHelpers(ColumnDefinition<V> column);
+
+    Collection<V> getLiveData();
+
+    int getRowCount();
+
+    void enrichConfigBuilder(DataGridConfigBuilder<V> builder);
+
+    void prepareLiveDataOnScreen(int rowIndex, int size, boolean isHorizontalScroll);
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DataGridControllerListener.java b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DataGridControllerListener.java
new file mode 100644
index 00000000..2965b6a2
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DataGridControllerListener.java
@@ -0,0 +1,32 @@
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.ui.datagrid2;
+
+/**
+ * @author mbagdouri
+ */
+interface DataGridControllerListener<V> {
+
+    void onUpdateRows(int from, int to);
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DataGridModel.java b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DataGridModel.java
new file mode 100644
index 00000000..0ab006aa
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DataGridModel.java
@@ -0,0 +1,100 @@
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.ui.datagrid2;
+
+import java.util.Collection;
+import java.util.Map;
+import java.util.function.Consumer;
+
+/**
+ * The data model for the {@link DataGridView}. It can be used to update/read the data available for the view.
+ * The keys used in the model must be immutable.
+ * The values used in the model can be mutable BUT should be only mutated via the
+ * {@link DataGridModel#updateData(Object, Consumer)}, {@link DataGridModel#updateData(Map)} methods, and must
+ * always be identifiable by the same key.
+ *
+ * @author mbagdouri
+ */
+public interface DataGridModel<K, V> {
+
+    /**
+     * Insert or replace the value
+     */
+    void setData(V v);
+
+    /**
+     * Insert or replace the collection of values
+     *
+     * @param c
+     */
+    void setData(Collection<V> c);
+
+    /**
+     * Update an existing value identified by key {@code k}, if it is present, using the {@code updater}
+     */
+    void updateData(K k, Consumer<V> updater);
+
+    /**
+     * Update existing values identified by the key, if they are present, using the {@code updaters}
+     */
+    void updateData(Map<K, Consumer<V>> updaters);
+
+    /**
+     * Returns the value to which the specified key is mapped,
+     * or {@code null} if this model contains no mapping for the key.
+     */
+    V getData(K k);
+    //    Row<V> getData(K k);
+
+    /**
+     * Removes the value identified by the key {@code k} from this model if it is present
+     */
+    V removeData(K k);
+
+    /**
+     * Performs the given action for each entry in this map until all entries
+     * have been processed or the action throws an exception. There is no guarantee on the order of elements
+     */
+    //    void forEach(BiConsumer<K, V> action);
+
+    /**
+     * @return the number of key-value mappings in this model
+     */
+    //    int size();
+
+    /**
+     * If {@code bound} is true (default), the view is notified when the model is updated. Otherwise, the view is not
+     * notified but it will continue to see the most recent version of the model
+     *
+     * @param bound
+     */
+    void setBound(boolean bound);
+
+    /**
+     * Whether the model is bound to the view.
+     *
+     * @see {@link DataGridModel#setBound(boolean)}
+     */
+    boolean getBound();
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DataGridSource.java b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DataGridSource.java
new file mode 100644
index 00000000..71477216
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DataGridSource.java
@@ -0,0 +1,179 @@
+/*
+ * Copyright (c) 2020 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.ui.datagrid2;
+
+import java.util.Collection;
+import java.util.Comparator;
+import java.util.List;
+import java.util.Map.Entry;
+import java.util.Set;
+import java.util.function.BiConsumer;
+import java.util.function.Consumer;
+
+import com.ponysdk.core.ui.datagrid2.SimpleDataGridController.Column;
+import com.ponysdk.core.ui.datagrid2.SimpleDataGridController.ColumnControllerSort;
+import com.ponysdk.core.ui.datagrid2.SimpleDataGridController.Interval;
+import com.ponysdk.core.ui.datagrid2.SimpleDataGridController.RenderingHelpersCache;
+import com.ponysdk.core.ui.datagrid2.SimpleDataGridController.Row;
+
+/**
+ *
+ */
+public interface DataGridSource<K, V> {
+
+    /**
+     * @param k
+     * @return the value to which the specified key is mapped
+     *         or {@code null} if it doesn't exist in the dataSource
+     */
+    Row<V> getRow(final K k);
+
+    /**
+     * @return all rows in the dataSource
+     */
+    Collection<Row<V>> getRows();
+
+    /**
+     * @return the needed rows for the view
+     */
+    List<Row<V>> getRows(int index, int size);
+
+    /**
+     * Returns the total number of rows that could be drawn in the view
+     * after applying filters
+     */
+    int getRowCount();
+
+    /**
+     * Returns liveSelecteData
+     */
+    List<Row<V>> getLiveSelectedData();
+
+    /**
+     * Adapter setter
+     */
+    void setAdapter(DataGridAdapter<K, V> adapter);
+
+    /**
+     * RenderingHelpersCache setter
+     */
+    void setRenderingHelpersCache(final RenderingHelpersCache<V> renderingHelpersCache);
+
+    /**
+     * Sorts our data when necessary
+     */
+    void sort();
+
+    /**
+     * Adds a sort
+     */
+    void addSort(final Column<V> column, final ColumnControllerSort colSort, final boolean asc);
+
+    void addSort(Object key, Comparator<Row<V>> comparator);
+
+    /**
+     * Removes a sort
+     */
+    Comparator<Row<V>> clearSort(Column<V> column);
+
+    Comparator<Row<V>> clearSort(Object key);
+
+    /**
+     * Clears all sorting
+     */
+    void clearSorts();
+
+    /**
+     * Get sorts entry set
+     */
+    Set<Entry<Object, Comparator<Row<V>>>> getSortsEntry();
+
+    /**
+     * Sets a filter
+     */
+    void setFilter(final Object key, String id, final boolean reinforcing, final AbstractFilter<V> filter);
+
+    /**
+     * Clears a filter
+     */
+    AbstractFilter<V> clearFilter(Object key);
+
+    void clearFilters(ColumnDefinition<V> column);
+
+    /**
+     * Clears all filters
+     */
+    void clearFilters();
+
+    /**
+     * Performs the given action for each entry in this map until all entries
+     * have been processed or the action throws an exception. There is no guarantee on the order of elements
+     */
+    void forEach(BiConsumer<K, V> action);
+
+    /**
+     * Insert or updates data in cash and liveData
+     */
+    Interval setData(final V v);
+
+    /**
+     * Updates data in cash and liveData
+     */
+    Interval updateData(final K k, final Consumer<V> updater);
+
+    /**
+     * Removes data from cash and liveData
+     */
+    V removeData(final K k);
+
+    /**
+     * Clears and resets liveData content
+     */
+    void resetLiveData();
+
+    /**
+     * Selects a row from the view
+     */
+    void select(final K k);
+
+    /**
+     * Unselects a row from the view
+     */
+    void unselect(final K k);
+
+    /**
+     * Selects all rows in the dataGrid
+     */
+    void selectAllLiveData();
+
+    /**
+     * Unselects all rows in the dataGrid
+     */
+    void unselectAllData();
+
+    /**
+     * Returns if a row is selcted or not
+     */
+    boolean isSelected(final K k);
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DataGridView.java b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DataGridView.java
new file mode 100644
index 00000000..a00cafd4
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DataGridView.java
@@ -0,0 +1,214 @@
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.ui.datagrid2;
+
+import java.util.Collection;
+import java.util.Comparator;
+import java.util.function.Predicate;
+
+import com.ponysdk.core.ui.basic.IsPWidget;
+
+/**
+ * @author mbagdouri
+ */
+public interface DataGridView<K, V> extends IsPWidget {
+
+    /**
+     * @return the {@code DataGridModel} corresponding to this view
+     */
+    DataGridModel<K, V> getModel();
+
+    /**
+     * Sets a {@link DataGridAdapter} on this view
+     */
+    void setAdapter(DataGridAdapter<K, V> adapter);
+
+    //ADDED
+    void setDataSource(DataGridSource src);
+
+    /**
+     * Sets the delay (in milliseconds) that will be used between consecutive draws of the view.<br/>
+     * This delay is only respected for draws triggered by an update in the {@link DataGridModel}. For draws that are
+     * triggered by a user action, this delay is not respected and the draw is immediate.<br/>
+     * This delay can be useful for throttling draw instructions sent to the terminal.<br/>
+     * This delay can be changed multiple times during the life-cycle of this view.<br/>
+     * The default value of this delay is 0 (no delay).<br/>
+     */
+    void setPollingDelayMillis(long pollingDelayMillis);
+
+    /**
+     * Returns an immutable {@link Collection} view of the data as it is shown to the user (i.e. sorting and filters are
+     * taken into account). The collection is backed by the view, so changes to the view are reflected in the
+     * collection.
+     */
+    Collection<V> getLiveData();
+
+    /**
+     * Returns an immutable {@link Collection} view of the selected data that is shown to the user (i.e. sorting and
+     * filters are taken into account). The collection is backed by the view, so changes to the view are reflected
+     * in the collection.
+     */
+    Collection<V> getLiveSelectedData();
+
+    /**
+     * Unselects all data of the model.
+     */
+    void unselectAllData();
+
+    /**
+     * Selects all unfiltered data of the model.
+     */
+    void selectAllLiveData();
+
+    /**
+     * Adds/replaces a filter that accepts only data that meet the condition of the {@link Predicate} {@code filter}.
+     *
+     * @param key an object that can be used to uniquely identify a filter, so that it can be replaced or removed
+     * @param filter a predicate that decides whether a value is accepted or filtered
+     * @param reinforcing {@code true} if the predicate is at least as intolerant as the replaced predicate of the same
+     *            key (i.e. the predicate doesn't accept any value that was not accepted by the replaced predicate),
+     *            {@code false} otherwise. This is an optimization that allows us to avoid applying the predicate on
+     *            values that we already know will not be accepted. If this filter is not replacing an existing one, the
+     *            value of the {@code reinforcing} argument has no impact.
+     */
+    void setFilter(Object key, String id, Predicate<V> filter, boolean reinforcing);
+
+    //ADDED
+    //    void setFilter(Object key, final String id, final Predicate<V> filter, final boolean reinforcing);
+
+    /**
+     * Adds/replaces a sorting criterion for the view.
+     *
+     * @param key an object that can be used to uniquely identify a sorting criterion, so that it can be replaced or
+     *            removed
+     * @param comparator compares two values of the model
+     */
+    void addSort(Object key, Comparator<V> comparator);
+
+    /**
+     * Cancels the sorting criterion, corresponding to {@code key}, from the view
+     */
+    void clearSort(Object key);
+
+    /**
+     * Cancels the filter, corresponding to {@code key}, from the view
+     */
+    void clearFilter(Object key);
+
+    /**
+     * Cancels all filters from the view
+     */
+    void clearFilters();
+
+    /**
+     * Cancels all sort criteria from the view, except for {@link DataGridAdapter#compareDefault(Object, Object)} and
+     * insertion order)
+     */
+    void clearSorts();
+
+    /**
+     * Adds/replaces a {@link RowAction}, identified by {@code key}, that will be applied to all rows that meet its
+     * condition
+     */
+    void addRowAction(Object key, RowAction<V> rowAction);
+
+    /**
+     * Cancels the {@link RowAction}, corresponding to {@code key}, from the view
+     */
+    void clearRowAction(Object key);
+
+    /**
+     * Add a listener to column related actions for this {@code column}
+     */
+    void addColumnActionListener(ColumnDefinition<V> column, ColumnActionListener<V> listener);
+
+    /**
+     * Remove a listener to column related actions for this {@code column}
+     */
+    void removeColumnActionListener(ColumnDefinition<V> column, ColumnActionListener<V> listener);
+
+    /**
+     * @return the current configuration of the view
+     */
+    DataGridConfig<V> getConfig();
+
+    /**
+     * Sets a new configuration on the view
+     */
+    void setConfig(DataGridConfig<V> config);
+
+    /**
+     * @return a String representation of a custom value of a {@link DataGridConfig} identified by {@code key}, that
+     *         will be used for the serialization of the configuration, or {@code null} if it doesn't recognize the
+     *         {@code key} or fails to encode
+     */
+    String encodeConfigCustomValue(String key, Object value);
+
+    /**
+     * @return a deserialized object built from the String value, or {@code null} if it doesn't recognize the
+     *         {@code key}
+     * @throws DecodeException if it fails to decode the value
+     */
+    Object decodeConfigCustomValue(String key, String value) throws DecodeException;
+
+    /**
+     * Adds a {@link DrawListener} that will be called after each time, grid draw instructions are sent to the terminal
+     */
+    void addDrawListener(DrawListener drawListener);
+
+    /**
+     * Removes a {@link DrawListener}
+     */
+    void removeDrawListener(DrawListener drawListener);
+
+    public static class DecodeException extends Exception {
+
+        public DecodeException(final Throwable cause) {
+            super(cause);
+        }
+
+        public DecodeException() {
+            super();
+        }
+
+        public DecodeException(final String message, final Throwable cause, final boolean enableSuppression,
+                final boolean writableStackTrace) {
+            super(message, cause, enableSuppression, writableStackTrace);
+        }
+
+        public DecodeException(final String message, final Throwable cause) {
+            super(message, cause);
+        }
+
+        public DecodeException(final String message) {
+            super(message);
+        }
+
+    }
+
+    public interface DrawListener {
+
+        void onDraw();
+    }
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DecoratorCell.java b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DecoratorCell.java
new file mode 100644
index 00000000..b3f13828
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DecoratorCell.java
@@ -0,0 +1,73 @@
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.ui.datagrid2;
+
+import com.ponysdk.core.ui.basic.PWidget;
+
+/**
+ * @author mbagdouri
+ */
+public class DecoratorCell<V> implements Cell<V> {
+
+    private final Cell<V> cell;
+
+    public DecoratorCell(final Cell<V> cell) {
+        super();
+        this.cell = cell;
+    }
+
+    @Override
+    public PWidget asWidget() {
+        return cell.asWidget();
+    }
+
+    @Override
+    public PWidget asPendingWidget() {
+        return cell.asPendingWidget();
+    }
+
+    @Override
+    public void render(final V data, final Object renderingHelper) {
+        cell.render(data, renderingHelper);
+    }
+
+    @Override
+    public void setController(final CellController<V> cellController) {
+        cell.setController(cellController);
+    }
+
+    @Override
+    public void select() {
+        cell.select();
+    }
+
+    @Override
+    public void unselect() {
+        cell.unselect();
+    }
+
+    protected Cell<V> getCell() {
+        return cell;
+    }
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DecoratorColumnDefinition.java b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DecoratorColumnDefinition.java
new file mode 100644
index 00000000..85983d7c
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DecoratorColumnDefinition.java
@@ -0,0 +1,177 @@
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.ui.datagrid2;
+
+import java.util.function.BiPredicate;
+import java.util.function.Supplier;
+
+import com.ponysdk.core.ui.basic.IsPWidget;
+
+/**
+ * @author mbagdouri
+ */
+public class DecoratorColumnDefinition<V> implements ColumnDefinition<V> {
+
+    private final ColumnDefinition<V> column;
+
+    protected DecoratorColumnDefinition(final ColumnDefinition<V> column) {
+        super();
+        this.column = column;
+    }
+
+    protected ColumnDefinition<V> getColumn() {
+        return column;
+    }
+
+    @Override
+    public void onSort(final boolean asc) {
+        column.onSort(asc);
+    }
+
+    @Override
+    public void onClearSort() {
+        column.onClearSort();
+    }
+
+    @Override
+    public void onFilter(final Object key, final BiPredicate<V, Supplier<Object>> filter, final boolean reinforcing) {
+        column.onFilter(key, filter, reinforcing);
+    }
+
+    @Override
+    public void onClearFilter(final Object key) {
+        column.onClearFilter(key);
+    }
+
+    @Override
+    public void onClearFilters() {
+        column.onClearFilters();
+    }
+
+    @Override
+    public void onRedraw(final boolean clearRenderingHelpers) {
+        column.onRedraw(clearRenderingHelpers);
+    }
+
+    @Override
+    public void onStateChanged(final State state) {
+        column.onStateChanged(state);
+    }
+
+    @Override
+    public IsPWidget getHeader() {
+        return column.getHeader();
+    }
+
+    @Override
+    public IsPWidget getFooter() {
+        return column.getFooter();
+    }
+
+    @Override
+    public Cell<V> createCell() {
+        return column.createCell();
+    }
+
+    @Override
+    public Object getRenderingHelper(final V data) {
+        return column.getRenderingHelper(data);
+    }
+
+    @Override
+    public int compare(final V v1, final Supplier<Object> renderingHelper1, final V v2, final Supplier<Object> renderingHelper2) {
+        return column.compare(v1, renderingHelper1, v2, renderingHelper2);
+    }
+
+    @Override
+    public State getDefaultState() {
+        return column.getDefaultState();
+    }
+
+    @Override
+    public boolean isVisibilitySwitchable() {
+        return column.isVisibilitySwitchable();
+    }
+
+    @Override
+    public boolean isPinSwitchable() {
+        return column.isPinSwitchable();
+    }
+
+    @Override
+    public boolean isFilterable() {
+        return column.isFilterable();
+    }
+
+    @Override
+    public String getId() {
+        return column.getId();
+    }
+
+    @Override
+    public int getDefaultWidth() {
+        return column.getDefaultWidth();
+    }
+
+    @Override
+    public void setController(final ColumnController<V> columnController) {
+        column.setController(columnController);
+    }
+
+    @Override
+    public ColumnController<V> getController() {
+        return column.getController();
+    }
+
+    @Override
+    public boolean isSortable() {
+        return column.isSortable();
+    }
+
+    @Override
+    public void onResized(final int width) {
+        column.onResized(width);
+    }
+
+    @Override
+    public boolean isResizable() {
+        return column.isResizable();
+    }
+
+    @Override
+    public int getMinWidth() {
+        return column.getMinWidth();
+    }
+
+    @Override
+    public int getMaxWidth() {
+        return column.getMaxWidth();
+    }
+
+    @Override
+    public IsPWidget getDraggableHeaderElement() {
+        return column.getDraggableHeaderElement();
+    }
+
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DecoratorDataGridAdapter.java b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DecoratorDataGridAdapter.java
new file mode 100644
index 00000000..4352237c
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DecoratorDataGridAdapter.java
@@ -0,0 +1,112 @@
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.ui.datagrid2;
+
+import java.util.List;
+import java.util.Objects;
+
+import com.ponysdk.core.ui.basic.IsPWidget;
+
+/**
+ * @author mbagdouri
+ */
+public class DecoratorDataGridAdapter<K, V> implements DataGridAdapter<K, V> {
+
+    private final DataGridAdapter<K, V> adapter;
+
+    protected DecoratorDataGridAdapter(final DataGridAdapter<K, V> adapter) {
+        super();
+        Objects.requireNonNull(adapter);
+        this.adapter = adapter;
+    }
+
+    @Override
+    public List<ColumnDefinition<V>> getColumnDefinitions() {
+        return adapter.getColumnDefinitions();
+    }
+
+    @Override
+    public K getKey(final V v) {
+        return adapter.getKey(v);
+    }
+
+    @Override
+    public boolean isAscendingSortByInsertionOrder() {
+        return adapter.isAscendingSortByInsertionOrder();
+    }
+
+    @Override
+    public int compareDefault(final V v1, final V v2) {
+        return adapter.compareDefault(v1, v2);
+    }
+
+    @Override
+    public void onCreateHeaderRow(final IsPWidget rowWidget) {
+        adapter.onCreateHeaderRow(rowWidget);
+    }
+
+    @Override
+    public void onCreateFooterRow(final IsPWidget rowWidget) {
+        adapter.onCreateFooterRow(rowWidget);
+    }
+
+    @Override
+    public void onCreateRow(final IsPWidget rowWidget) {
+        adapter.onCreateRow(rowWidget);
+    }
+
+    @Override
+    public void onSelectRow(final IsPWidget rowWidget) {
+        adapter.onSelectRow(rowWidget);
+    }
+
+    @Override
+    public void onUnselectRow(final IsPWidget rowWidget) {
+        adapter.onUnselectRow(rowWidget);
+    }
+
+    @Override
+    public boolean hasHeader() {
+        return adapter.hasHeader();
+    }
+
+    @Override
+    public boolean hasFooter() {
+        return adapter.hasFooter();
+    }
+
+    protected DataGridAdapter<K, V> getAdapter() {
+        return adapter;
+    }
+
+    @Override
+    public IsPWidget createLoadingDataWidget() {
+        return adapter.createLoadingDataWidget();
+    }
+
+    @Override
+    public void onCreateColumnResizer(final IsPWidget resizer) {
+        adapter.onCreateColumnResizer(resizer);
+    }
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DecoratorDataGridConfig.java b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DecoratorDataGridConfig.java
new file mode 100644
index 00000000..c258b45b
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DecoratorDataGridConfig.java
@@ -0,0 +1,65 @@
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.ui.datagrid2;
+
+import java.util.List;
+import java.util.Map;
+
+/**
+ * @author mbagdouri
+ */
+public class DecoratorDataGridConfig<V> implements DataGridConfig<V> {
+
+    private final DataGridConfig<V> config;
+
+    protected DecoratorDataGridConfig(final DataGridConfig<V> config) {
+        super();
+        this.config = config;
+    }
+
+    @Override
+    public List<Sort<V>> getSorts() {
+        return config.getSorts();
+    }
+
+    @Override
+    public List<ColumnConfig<V>> getColumnConfigs() {
+        return config.getColumnConfigs();
+    }
+
+    @Override
+    public void setCustomValue(final String key, final Object value) {
+        config.setCustomValue(key, value);
+    }
+
+    @Override
+    public Map<String, Object> getReadOnlyCustomValues() {
+        return config.getReadOnlyCustomValues();
+    }
+
+    @Override
+    public <T> T getCustomValue(final String key) {
+        return config.getCustomValue(key);
+    }
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DecoratorDataGridView.java b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DecoratorDataGridView.java
new file mode 100644
index 00000000..8c5e2c26
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/DecoratorDataGridView.java
@@ -0,0 +1,182 @@
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.ui.datagrid2;
+
+import java.util.Collection;
+import java.util.Comparator;
+import java.util.Objects;
+import java.util.function.Predicate;
+
+import com.ponysdk.core.ui.basic.PWidget;
+
+/**
+ * @author mbagdouri
+ */
+public class DecoratorDataGridView<K, V> implements DataGridView<K, V> {
+
+    private final DataGridView<K, V> view;
+
+    protected DecoratorDataGridView(final DataGridView<K, V> view) {
+        super();
+        Objects.requireNonNull(view);
+        this.view = view;
+    }
+
+    protected final DataGridView<K, V> getView() {
+        return view;
+    }
+
+    @Override
+    public PWidget asWidget() {
+        return view.asWidget();
+    }
+
+    @Override
+    public DataGridModel<K, V> getModel() {
+        return view.getModel();
+    }
+
+    @Override
+    public void setAdapter(final DataGridAdapter<K, V> adapter) {
+        view.setAdapter(adapter);
+    }
+
+    @Override
+    public void setPollingDelayMillis(final long pollingDelayMillis) {
+        view.setPollingDelayMillis(pollingDelayMillis);
+    }
+
+    @Override
+    public Collection<V> getLiveData() {
+        return view.getLiveData();
+    }
+
+    @Override
+    public Collection<V> getLiveSelectedData() {
+        return view.getLiveSelectedData();
+    }
+
+    @Override
+    public void unselectAllData() {
+        view.unselectAllData();
+    }
+
+    @Override
+    public void selectAllLiveData() {
+        view.selectAllLiveData();
+    }
+
+    @Override
+    public void setFilter(final Object key, final String id, final Predicate<V> filter, final boolean reinforcing) {
+        view.setFilter(key, id, filter, reinforcing);
+    }
+
+    @Override
+    public void clearFilter(final Object key) {
+        view.clearFilter(key);
+    }
+
+    @Override
+    public void clearFilters() {
+        view.clearFilters();
+    }
+
+    @Override
+    public void clearSorts() {
+        view.clearSorts();
+    }
+
+    @Override
+    public void addColumnActionListener(final ColumnDefinition<V> column, final ColumnActionListener<V> listener) {
+        view.addColumnActionListener(column, listener);
+    }
+
+    @Override
+    public void removeColumnActionListener(final ColumnDefinition<V> column, final ColumnActionListener<V> listener) {
+        view.removeColumnActionListener(column, listener);
+    }
+
+    @Override
+    public String encodeConfigCustomValue(final String key, final Object value) {
+        return view.encodeConfigCustomValue(key, value);
+    }
+
+    @Override
+    public Object decodeConfigCustomValue(final String key, final String value) throws DecodeException {
+        return view.decodeConfigCustomValue(key, value);
+    }
+
+    @Override
+    public DataGridConfig<V> getConfig() {
+        return view.getConfig();
+    }
+
+    @Override
+    public void setConfig(final DataGridConfig<V> config) {
+        view.setConfig(config);
+    }
+
+    @Override
+    public void addDrawListener(final DrawListener drawListener) {
+        view.addDrawListener(drawListener);
+    }
+
+    @Override
+    public void addSort(final Object key, final Comparator<V> comparator) {
+        view.addSort(key, comparator);
+    }
+
+    @Override
+    public void clearSort(final Object key) {
+        view.clearSort(key);
+    }
+
+    @Override
+    public void addRowAction(final Object key, final RowAction<V> rowHighlighter) {
+        view.addRowAction(key, rowHighlighter);
+    }
+
+    @Override
+    public void clearRowAction(final Object key) {
+        view.clearRowAction(key);
+    }
+
+    @Override
+    public void removeDrawListener(final DrawListener drawListener) {
+        view.removeDrawListener(drawListener);
+    }
+
+    //ADDED
+    @Override
+    public void setDataSource(final DataGridSource src) {
+        view.setDataSource(src);
+    }
+
+    //ADDED
+    //    @Override
+    //    public void setFilter(final Object key, final String id, final Predicate<V> filter, final boolean reinforcing) {
+    //        view.setFilter(key, id, filter, reinforcing);
+    //    }
+
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/ExtendedCell.java b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/ExtendedCell.java
new file mode 100644
index 00000000..d913b8b7
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/ExtendedCell.java
@@ -0,0 +1,73 @@
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.ui.datagrid2;
+
+import com.ponysdk.core.ui.basic.IsPWidget;
+
+/**
+ * {@code ExtendedCell} is created when a {@link Cell} is switched to mode extended. {@code ExtendedCell} will be always
+ * bound to the same key, but its data might change in case the model is updated.<br/>
+ * The {@link IsPWidget#asWidget()} method must always return the same instance of the main widget that will be used for
+ * the rendering of the value.
+ *
+ * @author mbagdouri
+ * @see CellController#extendedMode(ExtendedCell)
+ */
+public interface ExtendedCell<V> extends IsPWidget {
+
+    /**
+     * Sets the most recent value on this cell. This value can be the same as the value previously set
+     * (i.e. when this method is called, it is not guaranteed that the value has changed)
+     */
+    void setValue(V v);
+
+    /**
+     * Sets a {@link ExtendedCellController} that can be used to make cell/row related actions. It will be set as soon
+     * as the
+     * {@link ColumnDefinition#createCell()} is called.
+     *
+     * @param cellController
+     */
+    void setController(ExtendedCellController<V> extendedCellController);
+
+    /**
+     * Called when the row that this cell belongs to is selected
+     */
+    void select();
+
+    /**
+     * Called when the row that this cell belongs to is unselected
+     */
+    void unselect();
+
+    /**
+     * Called before each time this cell is removed from its parent
+     */
+    void beforeRemove();
+
+    /**
+     * Called after each time this cell is added to a parent widget
+     */
+    void afterAdd();
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/ExtendedCellController.java b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/ExtendedCellController.java
new file mode 100644
index 00000000..6b75ec4e
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/ExtendedCellController.java
@@ -0,0 +1,62 @@
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.ui.datagrid2;
+
+import java.util.function.Consumer;
+
+/**
+ * @author mbagdouri
+ */
+public interface ExtendedCellController<V> {
+
+    /**
+     * Switched back from extended mode to normal mode and removes the {@link ExtendedCell} from the view
+     *
+     * @see CellController#extendedMode(ExtendedCell)
+     */
+    void cancelExtendedMode();
+
+    /**
+     * Selects the row that this cell belongs to
+     */
+    void selectRow();
+
+    /**
+     * Selects the row that this cell belongs to
+     */
+    void unselectRow();
+
+    /**
+     * Replaces the value in the model, corresponding to this cell's key, with {@code newV}. <br/>
+     * Can be useful for an editable {@link ExtendedCell}.
+     */
+    void updateValue(V newV);
+
+    /**
+     * Updates the value corresponding to this cell using the {@code updater}. <br/>
+     * Can be useful for an editable {@link ExtendedCell}.
+     */
+    void updateValue(Consumer<V> updater);
+
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/LabelCell.java b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/LabelCell.java
new file mode 100644
index 00000000..ced63ac2
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/LabelCell.java
@@ -0,0 +1,75 @@
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.ui.datagrid2;
+
+import java.util.function.BiConsumer;
+
+import com.ponysdk.core.ui.basic.Element;
+import com.ponysdk.core.ui.basic.PLabel;
+import com.ponysdk.core.ui.basic.PWidget;
+
+/**
+ * @author mbagdouri
+ */
+public class LabelCell<V> implements Cell<V> {
+
+    private final PLabel label = Element.newPLabel();
+    private final PLabel pendingLabel = Element.newPLabel("...");
+    private CellController<V> cellController;
+
+    public LabelCell(final BiConsumer<V, String> columnEditFn, final int width) {
+        label.addDoubleClickHandler(e -> {
+            if (cellController != null) cellController.extendedMode(new TextBoxExtendedCell<>(label.getText(), columnEditFn, width));
+        });
+    }
+
+    @Override
+    public PLabel asWidget() {
+        return label;
+    }
+
+    @Override
+    public PWidget asPendingWidget() {
+        return pendingLabel;
+    }
+
+    @Override
+    public void render(final V data, final Object renderingHelper) {
+        label.setText(renderingHelper.toString());
+    }
+
+    @Override
+    public void setController(final CellController<V> cellController) {
+        this.cellController = cellController;
+    }
+
+    @Override
+    public void select() {
+    }
+
+    @Override
+    public void unselect() {
+    }
+
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/RowAction.java b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/RowAction.java
new file mode 100644
index 00000000..5dbdab06
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/RowAction.java
@@ -0,0 +1,53 @@
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.ui.datagrid2;
+
+import com.ponysdk.core.ui.basic.IsPWidget;
+
+/**
+ * An action that will be applied to all rows that meet the condition of the predicate on the value and the index
+ *
+ * @author mbagdouri
+ */
+public interface RowAction<V> {
+
+    /**
+     * @param value the value associated to the row
+     * @param index the index of the row in the table
+     * @return {@code true} if the action is to be applied on the row, {@code false} otherwise
+     */
+    boolean testRow(V value, int index);
+
+    /**
+     * Applies an action on the {@code row} widget.<br/>
+     * <b>MUST NOT modify the dimensions (width or height) of the row since they can be dynamically
+     * calculated.</b>
+     */
+    void apply(IsPWidget row);
+
+    /**
+     * Reverts the changes applied by {@link #apply(IsPWidget)} on the {@code row} widget.<br/>
+     */
+    void cancel(IsPWidget row);
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/RowSelectorColumnDataGridView.java b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/RowSelectorColumnDataGridView.java
new file mode 100644
index 00000000..91353311
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/RowSelectorColumnDataGridView.java
@@ -0,0 +1,316 @@
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.ui.datagrid2;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.List;
+import java.util.function.BiPredicate;
+import java.util.function.Supplier;
+
+import com.ponysdk.core.model.PCheckBoxState;
+import com.ponysdk.core.ui.basic.Element;
+import com.ponysdk.core.ui.basic.IsPWidget;
+import com.ponysdk.core.ui.basic.PCheckBox;
+import com.ponysdk.core.ui.basic.PWidget;
+import com.ponysdk.core.ui.basic.event.PValueChangeEvent;
+import com.ponysdk.core.ui.datagrid2.DataGridConfig.ColumnConfig;
+
+/**
+ * @author mbagdouri
+ */
+public class RowSelectorColumnDataGridView<K, V> extends DecoratorDataGridView<K, V> {
+
+    private static final String COLUMN_ID = RowSelectorColumnDataGridView.RowSelectorColumnDefinition.class.getName();
+
+    private RowSelectorColumnDataGridAdapter decoratorAdapter;
+
+    public RowSelectorColumnDataGridView(final DataGridView<K, V> view) {
+        super(view);
+    }
+
+    @Override
+    public void setAdapter(final DataGridAdapter<K, V> adapter) {
+        decoratorAdapter = new RowSelectorColumnDataGridAdapter(adapter);
+        super.setAdapter(decoratorAdapter);
+        decoratorAdapter.addColumnActionListeners();
+        addDrawListener(() -> decoratorAdapter.rowSelectorColumn.refreshHeader());
+    }
+
+    @Override
+    public void setConfig(final DataGridConfig<V> config) {
+        if (decoratorAdapter == null
+                || config.getColumnConfigs().size() > 0 && config.getColumnConfigs().get(0).getColumnId().equals(COLUMN_ID)) {
+            super.setConfig(config);
+            return;
+        }
+        final List<ColumnConfig<V>> copy = new ArrayList<>(config.getColumnConfigs());
+        final Iterator<ColumnConfig<V>> iterator = copy.iterator();
+        ColumnConfig<V> columnConfig = null;
+        while (iterator.hasNext()) {
+            final ColumnConfig<V> c = iterator.next();
+            if (c.getColumnId().equals(COLUMN_ID)) {
+                iterator.remove();
+                columnConfig = c;
+                break;
+            }
+        }
+        if (columnConfig == null) columnConfig = new ColumnConfig<>(decoratorAdapter.columns.get(0));
+        copy.add(0, columnConfig);
+        final List<ColumnConfig<V>> cc = Collections.unmodifiableList(copy);
+        super.setConfig(new DecoratorDataGridConfig<>(config) {
+
+            @Override
+            public List<ColumnConfig<V>> getColumnConfigs() {
+                return cc;
+            }
+
+        });
+    }
+
+    private class RowSelectorColumnDataGridAdapter extends DecoratorDataGridAdapter<K, V> {
+
+        private final List<ColumnDefinition<V>> columns;
+        private final RowSelectorColumnDefinition rowSelectorColumn;
+
+        RowSelectorColumnDataGridAdapter(final DataGridAdapter<K, V> adapter) {
+            super(adapter);
+            final List<ColumnDefinition<V>> c = adapter.getColumnDefinitions();
+            columns = new ArrayList<>(c.size() + 1);
+            rowSelectorColumn = new RowSelectorColumnDefinition(adapter);
+            columns.add(rowSelectorColumn);
+            columns.addAll(c);
+        }
+
+        @Override
+        public List<ColumnDefinition<V>> getColumnDefinitions() {
+            return columns;
+        }
+
+        private void addColumnActionListeners() {
+            for (final ColumnDefinition<V> column : getColumnDefinitions()) {
+                addColumnActionListener(column, rowSelectorColumn);
+            }
+        }
+
+    }
+
+    private class RowSelectorColumnDefinition implements ColumnDefinition<V> {
+
+        private final PCheckBox header;
+        private final PCheckBox footer;
+
+        private ColumnController<V> columnController;
+
+        RowSelectorColumnDefinition(final DataGridAdapter<K, V> adapter) {
+            header = adapter.hasHeader() ? Element.newPCheckBox() : null;
+            if (header != null) {
+                header.addValueChangeHandler(this::onValueChange);
+            }
+
+            footer = adapter.hasFooter() ? Element.newPCheckBox() : null;
+            if (footer != null) {
+                footer.setStyleProperty("visibility", "hidden");
+            }
+        }
+
+        private void refreshHeader() {
+            if (header == null) return;
+            final int selected = getView().getLiveSelectedData().size();
+            if (selected == 0) header.setState(PCheckBoxState.UNCHECKED);
+            else if (selected == getView().getLiveData().size()) header.setState(PCheckBoxState.CHECKED);
+            else header.setState(PCheckBoxState.INDETERMINATE);
+        }
+
+        @Override
+        public void onSort(final boolean asc) {
+        }
+
+        @Override
+        public void onClearSort() {
+        }
+
+        @Override
+        public void onFilter(final Object key, final BiPredicate<V, Supplier<Object>> filter, final boolean reinforcing) {
+        }
+
+        @Override
+        public void onClearFilter(final Object key) {
+        }
+
+        @Override
+        public void onClearFilters() {
+        }
+
+        @Override
+        public void onRedraw(final boolean clearRenderingHelpers) {
+        }
+
+        @Override
+        public IsPWidget getHeader() {
+            return header;
+        }
+
+        @Override
+        public IsPWidget getFooter() {
+            return footer;
+        }
+
+        @Override
+        public Cell<V> createCell() {
+            return new RowSelectorColumnCell();
+        }
+
+        @Override
+        public Object getRenderingHelper(final V data) {
+            return null;
+        }
+
+        @Override
+        public int compare(final V v1, final Supplier<Object> renderingHelper1, final V v2, final Supplier<Object> renderingHelper2) {
+            return 0;
+        }
+
+        @Override
+        public void setController(final ColumnController<V> columnController) {
+            this.columnController = columnController;
+        }
+
+        @Override
+        public ColumnController<V> getController() {
+            return columnController;
+        }
+
+        @Override
+        public boolean isVisibilitySwitchable() {
+            return false;
+        }
+
+        @Override
+        public boolean isPinSwitchable() {
+            return false;
+        }
+
+        @Override
+        public boolean isFilterable() {
+            return false;
+        }
+
+        @Override
+        public String getId() {
+            return COLUMN_ID;
+        }
+
+        @Override
+        public int getDefaultWidth() {
+            return 20;
+        }
+
+        @Override
+        public int getMinWidth() {
+            return 20;
+        }
+
+        @Override
+        public int getMaxWidth() {
+            return 20;
+        }
+
+        @Override
+        public void onStateChanged(final State state) {
+        }
+
+        @Override
+        public State getDefaultState() {
+            return State.PINNED_SHOWN;
+        }
+
+        @Override
+        public boolean isSortable() {
+            return false;
+        }
+
+        @Override
+        public void onResized(final int width) {
+        }
+
+        @Override
+        public boolean isResizable() {
+            return false;
+        }
+
+        private void onValueChange(final PValueChangeEvent<Boolean> event) {
+            if (event.getData()) {
+                getView().selectAllLiveData();
+            } else {
+                getView().unselectAllData();
+            }
+            refreshHeader();
+        }
+
+        private class RowSelectorColumnCell implements Cell<V> {
+
+            private final PCheckBox checkBox = Element.newPCheckBox();
+            private final PWidget pending = Element.newSpan();
+
+            @Override
+            public PWidget asWidget() {
+                return checkBox;
+            }
+
+            @Override
+            public void render(final V data, final Object renderingHelper) {
+            }
+
+            @Override
+            public void setController(final CellController<V> cellController) {
+            }
+
+            @Override
+            public void select() {
+                checkBox.setValue(true);
+                refreshHeader();
+            }
+
+            @Override
+            public void unselect() {
+                checkBox.setValue(false);
+                refreshHeader();
+            }
+
+            @Override
+            public PWidget asPendingWidget() {
+                return pending;
+            }
+        }
+
+        @Override
+        public IsPWidget getDraggableHeaderElement() {
+            return null;
+        }
+
+    }
+
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/SimpleCacheDataSource.java b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/SimpleCacheDataSource.java
new file mode 100644
index 00000000..f5fb9b35
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/SimpleCacheDataSource.java
@@ -0,0 +1,289 @@
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *  Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *  Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.ui.datagrid2;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+import java.util.function.BiConsumer;
+import java.util.function.Consumer;
+
+import com.ponysdk.core.ui.datagrid2.SimpleDataGridController.Interval;
+import com.ponysdk.core.ui.datagrid2.SimpleDataGridController.Row;
+
+/**
+ *
+ */
+public class SimpleCacheDataSource<K, V> extends SimpleDataSource<K, V> {
+
+    protected final Map<K, Row<V>> cache = new HashMap<>();
+    private final List<Row<V>> liveData = new ArrayList<>();
+
+    //----------------------------------------------------------------------------------------------------------//
+    //------------------------------------------ Row Getters --------------------------------------------------//
+    //----------------------------------------------------------------------------------------------------------//
+
+    @Override
+    public Row<V> getRow(final K k) {
+        return cache.get(k);
+    }
+
+    @Override
+    public Collection<Row<V>> getRows() {
+        return cache.values();
+    }
+
+    @Override
+    public List<Row<V>> getRows(final int index, int size) {
+        // Reset size so that it doesn't exceed boundaries
+        size = index + size > liveData.size() ? liveData.size() - index : size;
+        final List<Row<V>> tmp = new ArrayList<>();
+        for (int i = index; i < index + size; i++) {
+            tmp.add(liveData.get(i));
+        }
+        return tmp;
+    }
+
+    @Override
+    public int getRowCount() {
+        return liveData.size();
+    }
+
+    //----------------------------------------------------------------------------------------------------------//
+    //-------------------------------------- Gestion de cahce, liveData ----------------------------------------//
+    //----------------------------------------------------------------------------------------------------------//
+
+    // Insert data in the cache or update it if it already exists
+    @Override
+    public Interval setData(final V v) {
+        Objects.requireNonNull(v);
+        final K k = adapter.getKey(v);
+        final Row<V> row = cache.get(k);
+        Interval interval;
+        if (row != null) {
+            if (row.data == v) return null;
+            interval = updateData(k, row, v);
+        } else {
+            interval = insertData(k, v);
+        }
+        return interval;
+    }
+
+    // Rows are updated when they already exist
+    private Interval updateData(final K k, final Row<V> row, final V newV) {
+        if (row.accepted) {
+            final int oldLiveDataSize = liveData.size();
+            final int oldRowIndex = removeRow(liveData, row);
+            final boolean selected = selectedKeys.contains(k);
+            if (selected) removeRow(liveSelectedData, row);
+            row.data = newV;
+            return onWasAcceptedAndRemoved(selected, row, oldLiveDataSize, oldRowIndex);
+        } else {
+            row.data = newV;
+            return onWasNotAccepted(k, row);
+        }
+    }
+
+    @Override
+    public Interval updateData(final K k, final Consumer<V> updater) {
+        final Row<V> row = cache.get(k);
+        if (row == null) return null;
+        if (row.accepted) {
+            final int oldLiveDataSize = liveData.size();
+            final int oldRowIndex = removeRow(liveData, row);
+            final boolean selected = selectedKeys.contains(k);
+            if (selected) removeRow(liveSelectedData, row);
+            updater.accept(row.data);
+            return onWasAcceptedAndRemoved(selected, row, oldLiveDataSize, oldRowIndex);
+        } else {
+            updater.accept(row.data);
+            return onWasNotAccepted(k, row);
+        }
+    }
+
+    @Override
+    public V removeData(final K k) {
+
+        final Row<V> row = cache.remove(k);
+        final boolean selected = selectedKeys.remove(k);
+        if (row.accepted) {
+            //            final int oldLiveDataSize = liveData.size();
+            //            final int rowIndex = removeRow(liveData, row);
+            if (selected) {
+                removeRow(liveSelectedData, row);
+            }
+            //            refreshRows(rowIndex, oldLiveDataSize);
+        }
+        return row.data;
+    }
+
+    // Here rows are created and inserted in liveData
+    private Interval insertData(final K k, final V data) {
+        final Row<V> row = new Row<>(rowCounter++, data);
+        row.accepted = accept(row);
+        cache.put(k, row);
+        if (!row.accepted) return null;
+        final int rowIndex = insertRow(liveData, row);
+        return new Interval(rowIndex, liveData.size());
+    }
+
+    private Interval onWasAcceptedAndRemoved(final boolean selected, final Row<V> row, final int oldLiveDataSize,
+                                             final int oldRowIndex) {
+        clearRenderingHelpers(row);
+        if (accept(row)) {
+            final int rowIndex = insertRow(liveData, row);
+            if (selected) insertRow(liveSelectedData, row);
+            if (oldRowIndex <= rowIndex) {
+                return new Interval(oldRowIndex, rowIndex + 1);
+            } else {
+                return new Interval(rowIndex, oldRowIndex + 1);
+            }
+        } else {
+            row.accepted = false;
+            return new Interval(oldRowIndex, oldLiveDataSize);
+        }
+    }
+
+    private Interval onWasNotAccepted(final K k, final Row<V> row) {
+        clearRenderingHelpers(row);
+        if (accept(row)) {
+            row.accepted = true;
+            final int rowIndex = insertRow(liveData, row);
+            if (selectedKeys.contains(k)) insertRow(liveSelectedData, row);
+            return new Interval(rowIndex, liveData.size());
+        } //else do nothing
+        return null;
+    }
+
+    private void clearRenderingHelpers(final Row<V> row) {
+        renderingHelpersCache.remove(row);
+    }
+
+    @Override
+    public void resetLiveData() {
+        liveSelectedData.clear();
+        liveData.clear();
+        for (final Row<V> row : cache.values()) {
+            row.accepted = accept(row);
+            if (row.accepted) {
+                insertRow(liveData, row);
+                if (selectedKeys.contains(adapter.getKey(row.data))) {
+                    insertRow(liveSelectedData, row);
+                }
+            }
+        }
+    }
+
+    //----------------------------------------------------------------------------------------------------------//
+    //------------------------------------------------ Sorting -------------------------------------------------//
+    //----------------------------------------------------------------------------------------------------------//
+
+    @Override
+    public void sort() {
+        super.sort();
+        liveData.sort(this::compare);
+    }
+
+    @Override
+    public String toString() {
+        return cache.toString();
+    }
+
+    @Override
+    public void forEach(final BiConsumer<K, V> action) {
+        cache.forEach((k, r) -> action.accept(k, r.data));
+    }
+
+    @Override
+    public void selectAllLiveData() {
+        liveSelectedData.clear();
+        for (final Row<V> row : liveData) {
+            liveSelectedData.add(row);
+            selectedKeys.add(adapter.getKey(row.data));
+        }
+    }
+
+    //----------------------------------------------------------------------------------------------------------//
+    //----------------------------------------------- Filtering ------------------------------------------------//
+    //----------------------------------------------------------------------------------------------------------//
+
+    @Override
+    public void setFilter(Object key, final String id, final boolean reinforcing, final AbstractFilter<V> filter) {
+        key = key.toString();
+        final AbstractFilter<V> oldFilter = filters.put(key, filter);
+        if (oldFilter == null || reinforcing) {
+            //            final int oldLiveDataSize = liveData.size();
+            //            final int from = reinforceFilter(liveData, filter);
+            reinforceFilter(liveData, filter);
+            reinforceFilter(liveSelectedData, filter);
+            //            if (from >= 0) {
+            //                refreshRows(from, oldLiveDataSize);
+            //            }
+        } else {
+            resetLiveData();
+        }
+    }
+
+    private int reinforceFilter(final List<Row<V>> rows, final AbstractFilter<V> filter) {
+        final Iterator<Row<V>> iterator = rows.iterator();
+        int from = -1;
+        for (int i = 0; iterator.hasNext(); i++) {
+            final Row<V> row = iterator.next();
+            if (!filter.test(row)) {
+                row.accepted = false;
+                iterator.remove();
+                if (from < 0) from = i;
+            }
+        }
+        return from;
+    }
+
+    private boolean accept(final Row<V> row) {
+        for (final AbstractFilter<V> filter : filters.values()) {
+            if (!filter.test(row)) return false;
+        }
+        return true;
+    }
+
+    //----------------------------------------------------------------------------------------------------------//
+    //----------------------------------------------- Selecting ------------------------------------------------//
+    //----------------------------------------------------------------------------------------------------------//
+    @Override
+    public void select(final K k) {
+        final Row<V> row = cache.get(k);
+        if (row == null || !selectedKeys.add(k) || !row.accepted) return;
+        insertRow(liveSelectedData, row);
+    }
+
+    @Override
+    public void unselect(final K k) {
+        final Row<V> row = cache.get(k);
+        if (row == null || !selectedKeys.remove(k) || !row.accepted) return;
+        removeRow(liveSelectedData, row);
+    }
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/SimpleColumnDefinition.java b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/SimpleColumnDefinition.java
new file mode 100644
index 00000000..b9c95e1a
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/SimpleColumnDefinition.java
@@ -0,0 +1,222 @@
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.ui.datagrid2;
+
+import java.util.function.BiConsumer;
+import java.util.function.BiPredicate;
+import java.util.function.Function;
+import java.util.function.Supplier;
+
+import com.ponysdk.core.ui.basic.Element;
+import com.ponysdk.core.ui.basic.IsPWidget;
+import com.ponysdk.core.ui.basic.PComplexPanel;
+import com.ponysdk.core.ui.basic.PLabel;
+
+/**
+ * @author mbagdouri
+ */
+public class SimpleColumnDefinition<V> implements ColumnDefinition<V> {
+
+    private final String columnName;
+    private final Function<V, Object> columnValueFn;
+    private final BiConsumer<V, String> columnEditFn;
+    private final PComplexPanel header = Element.newDiv();
+    private final PLabel columnNameLabel = Element.newPLabel();
+    private final PLabel pinLabel = Element.newPLabel();
+    private final PLabel hideLabel = Element.newPLabel();
+    private ColumnController<V> columnController;
+    private Boolean sort;
+    private State state = getDefaultState();
+
+    public SimpleColumnDefinition(final String columnName, final Function<V, Object> columnValueFn,
+            final BiConsumer<V, String> columnEditFn) {
+        super();
+        this.columnName = columnName;
+        this.columnValueFn = columnValueFn;
+        this.columnEditFn = columnEditFn;
+        initHeader();
+    }
+
+    private void initHeader() {
+        columnNameLabel.setText(columnName);
+        columnNameLabel.addClickHandler(e -> {
+            if (columnController == null) return;
+            columnController.sort(sort == null || !sort);
+        });
+        this.header.add(columnNameLabel);
+
+        if (isPinSwitchable()) {
+            this.pinLabel.setText(state.isPinned() ? "[unpin me]" : "[pin me]");
+            this.pinLabel.addClickHandler(e -> {
+                if (columnController == null) return;
+                columnController.setState(state.isPinned() ? state.onUnpin() : state.onPin());
+            });
+        }
+        this.header.add(pinLabel);
+
+        if (isVisibilitySwitchable()) {
+            this.hideLabel.setText("[hide me]");
+            this.hideLabel.addClickHandler(e -> {
+                if (columnController == null) return;
+                columnController.setState(state.isShown() ? state.onHide() : state.onShow());
+            });
+        }
+        this.header.add(hideLabel);
+    }
+
+    @Override
+    public PComplexPanel getHeader() {
+        return header;
+    }
+
+    @Override
+    public Cell<V> createCell() {
+        return new LabelCell<>(columnEditFn, (int) (getDefaultWidth() * 0.8));
+    }
+
+    @Override
+    public Object getRenderingHelper(final V data) {
+        return columnValueFn.apply(data).toString();
+    }
+
+    @Override
+    public int compare(final V v1, final Supplier<Object> renderingHelper1, final V v2, final Supplier<Object> renderingHelper2) {
+        return renderingHelper1.get().toString().compareTo(renderingHelper2.get().toString());
+    }
+
+    @Override
+    public String toString() {
+        return "SimpleColumnDefinition [columnName=" + columnName + "]";
+    }
+
+    @Override
+    public void setController(final ColumnController<V> columnController) {
+        this.columnController = columnController;
+    }
+
+    @Override
+    public ColumnController<V> getController() {
+        return columnController;
+    }
+
+    @Override
+    public IsPWidget getFooter() {
+        return null;
+    }
+
+    @Override
+    public boolean isVisibilitySwitchable() {
+        return true;
+    }
+
+    @Override
+    public String getId() {
+        return columnName;
+    }
+
+    @Override
+    public void onSort(final boolean asc) {
+        sort = asc;
+
+    }
+
+    @Override
+    public void onClearSort() {
+        sort = null;
+    }
+
+    @Override
+    public void onFilter(final Object key, final BiPredicate<V, Supplier<Object>> filter, final boolean reinforcing) {
+    }
+
+    @Override
+    public void onClearFilter(final Object key) {
+        if (key != this) return;
+        onClearFilters();
+    }
+
+    @Override
+    public void onClearFilters() {
+    }
+
+    @Override
+    public void onRedraw(final boolean clearRenderingHelpers) {
+    }
+
+    @Override
+    public boolean isPinSwitchable() {
+        return true;
+    }
+
+    @Override
+    public boolean isFilterable() {
+        return true;
+    }
+
+    @Override
+    public int getDefaultWidth() {
+        return 140;
+    }
+
+    @Override
+    public void onStateChanged(final State state) {
+        this.state = state;
+        pinLabel.setText(state.isPinned() ? "[unpin me]" : "[pin me]");
+    }
+
+    @Override
+    public State getDefaultState() {
+        return State.UNPINNED_SHOWN;
+    }
+
+    @Override
+    public boolean isSortable() {
+        return true;
+    }
+
+    @Override
+    public void onResized(final int width) {
+    }
+
+    @Override
+    public boolean isResizable() {
+        return true;
+    }
+
+    @Override
+    public int getMinWidth() {
+        return 50;
+    }
+
+    @Override
+    public int getMaxWidth() {
+        return Integer.MAX_VALUE;
+    }
+
+    @Override
+    public IsPWidget getDraggableHeaderElement() {
+        return columnNameLabel;
+    }
+
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/SimpleDataGridController.java b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/SimpleDataGridController.java
new file mode 100644
index 00000000..0e0ab2b1
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/SimpleDataGridController.java
@@ -0,0 +1,650 @@
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.ui.datagrid2;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Comparator;
+import java.util.HashMap;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.Objects;
+import java.util.function.BiPredicate;
+import java.util.function.Consumer;
+import java.util.function.Predicate;
+import java.util.function.Supplier;
+
+import com.ponysdk.core.ui.datagrid2.DataGridConfig.ColumnSort;
+import com.ponysdk.core.ui.datagrid2.DataGridConfig.GeneralSort;
+import com.ponysdk.core.ui.datagrid2.DataGridConfig.Sort;
+import com.ponysdk.core.util.MappedList;
+
+/**
+ * @author mbagdouri
+ */
+
+public class SimpleDataGridController<K, V> implements DataGridController<K, V>, DataGridModel<K, V> {
+
+    private static final Object NO_RENDERING_HELPER = new Object();
+    private static final int RENDERING_HELPERS_CACHE_CAPACITY = 512;
+    private int columnCounter = 0;
+    private final RenderingHelpersCache<V> renderingHelpersCache = new RenderingHelpersCache<>();
+    private final List<Row<V>> liveDataOnScreen = new ArrayList<>();
+    private final Map<ColumnDefinition<V>, Column<V>> columns = new HashMap<>();
+    private DataGridControllerListener<V> listener;
+    private DataGridAdapter<K, V> adapter;
+    private boolean bound = true;
+    private int from = Integer.MAX_VALUE;
+    private int to = 0;
+    private final RenderingHelperSupplier renderingHelperSupplier1 = new RenderingHelperSupplier();
+    private final RenderingHelperSupplier renderingHelperSupplier2 = new RenderingHelperSupplier();
+    private int absoluteIndex = 0; //Represents the position index of liveDataOnScreen in the overall dataGrid
+    private DataGridSource<K, V> dataSource = new SimpleCacheDataSource<>(); // ToDo datasource has to be injected by spring
+
+    SimpleDataGridController() {
+        super();
+        setDataSource(dataSource);
+    }
+
+    public void setDataSource(final DataGridSource<K, V> dataSrc) {
+        dataSource = dataSrc;
+        dataSource.setRenderingHelpersCache(renderingHelpersCache);
+    }
+
+    // The adapter is used to set up and initialize the DataGridView
+    @Override
+    public void setAdapter(final DataGridAdapter<K, V> adapter) {
+        if (this.adapter != null) throw new IllegalStateException("DataGridAdapter is already set");
+        this.adapter = adapter;
+        dataSource.setAdapter(adapter);
+        for (final ColumnDefinition<V> column : adapter.getColumnDefinitions()) {
+            columns.put(column, new Column<>(columnCounter++, column));
+        }
+    }
+
+    private void checkAdapter() {
+        if (adapter == null) throw new IllegalStateException("A DataGridAdapter must be set");
+    }
+
+    private Column<V> getColumn(final ColumnDefinition<V> colDef) {
+        final Column<V> column = columns.get(colDef);
+        if (column == null) throw new IllegalArgumentException("Unknown ColumnDefinition " + colDef);
+        return column;
+    }
+
+    private Column<V> getColumn(final String columnId) {
+        for (final Column<V> column : columns.values()) {
+            if (columnId.equals(column.def.getId())) return column;
+        }
+        return null;
+    }
+
+    // To prevent recalculating on some data we stock them in renderingHelpersCache
+    private Object getRenderingHelper(final Row<V> row, final Column<V> column) {
+        final Object[] renderingHelpers = renderingHelpersCache.computeIfAbsent(row, r -> new Object[columns.size()]);
+        Object helper = renderingHelpers[column.id];
+        if (helper == NO_RENDERING_HELPER) return null;
+        if (helper == null) {
+            helper = column.def.getRenderingHelper(row.data);
+            renderingHelpers[column.id] = helper == null ? NO_RENDERING_HELPER : helper;
+        }
+        return helper;
+    }
+
+    private void clearRenderingHelpers(final Row<V> row) {
+        renderingHelpersCache.remove(row);
+    }
+
+    private void clearRenderingHelper(final Row<V> row, final Column<V> column) {
+        final Object[] renderingHelpers = renderingHelpersCache.get(row);
+        if (renderingHelpers == null) return;
+        renderingHelpers[column.id] = null;
+    }
+
+    // clears the Map filters then resets data
+    @Override
+    public void clearFilters(final ColumnDefinition<V> column) {
+        checkAdapter();
+        Objects.requireNonNull(column);
+        dataSource.clearFilters(column);
+        resetLiveData();
+    }
+
+    @Override
+    public final void clearFilters() {
+        checkAdapter();
+        dataSource.clearFilters();
+        resetLiveData();
+    }
+
+    private void refreshRows(final int from, final int to) {
+        this.from = Math.min(this.from, from);
+        this.to = Math.max(this.to, to);
+        if (bound) doRefreshRows();
+    }
+
+    private void doRefreshRows() {
+        try {
+            if (listener != null) listener.onUpdateRows(from, to);
+        } finally {
+            from = Integer.MAX_VALUE;
+            to = 0;
+        }
+    }
+
+    @Override
+    public final void setData(final V v) {
+        final Interval interval = dataSource.setData(v);
+        if (interval != null) refreshRows(interval.from, interval.to);
+    }
+
+    @Override
+    public void setData(final Collection<V> c) {
+        int from = Integer.MAX_VALUE;
+        int to = 0;
+        for (final V v : c) {
+            final Interval interval = dataSource.setData(v);
+            if (interval == null) continue;
+            from = Math.min(from, interval.from);
+            to = Math.max(to, interval.to);
+        }
+        if (from < to) refreshRows(from, to);
+    }
+
+    @Override
+    public void updateData(final Map<K, Consumer<V>> updaters) {
+        int from = Integer.MAX_VALUE;
+        int to = 0;
+        for (final Map.Entry<K, Consumer<V>> entry : updaters.entrySet()) {
+            final Row<V> row = dataSource.getRow(entry.getKey());
+            clearRenderingHelpers(row);
+            final Interval interval = dataSource.updateData(entry.getKey(), entry.getValue());
+            if (interval == null) continue;
+            from = Math.min(from, interval.from);
+            to = Math.max(to, interval.to);
+        }
+        if (from < to) refreshRows(from, to);
+    }
+
+    @Override
+    public void updateData(final K k, final Consumer<V> updater) {
+        final Row<V> row = dataSource.getRow(k);
+        clearRenderingHelpers(row);
+        final Interval interval = dataSource.updateData(k, updater);
+        if (interval != null) refreshRows(interval.from, interval.to);
+    }
+
+    private void resetLiveData() {
+        final int oldLiveDataSize = dataSource.getRowCount();
+        dataSource.resetLiveData();
+        refreshRows(0, Math.max(oldLiveDataSize, dataSource.getRowCount()));
+    }
+
+    @Override
+    public final V removeData(final K k) {
+        final Row<V> row = dataSource.getRow(k);
+        if (row == null) return null;
+        renderingHelpersCache.remove(row);
+        final V v = dataSource.removeData(k);
+        refreshRows(0, dataSource.getRowCount());
+        return v;
+    }
+
+    @Override
+    public final V getData(final K k) {
+        final Row<V> row = dataSource.getRow(k);
+        if (row == null) return null;
+        return row.data;
+    }
+
+    @Override
+    public void renderCell(final ColumnDefinition<V> colDef, final int row, final Cell<V> cell) {
+        checkAdapter();
+        final Column<V> column = getColumn(colDef);
+        final Row<V> r = liveDataOnScreen.get(row);
+        cell.render(r.data, getRenderingHelper(r, column));
+    }
+
+    @Override
+    public void setValueOnExtendedCell(final int row, final ExtendedCell<V> extendedCell) {
+        checkAdapter();
+        final Row<V> r = liveDataOnScreen.get(row);
+        extendedCell.setValue(r.data);
+    }
+
+    @Override
+    public void addSort(final ColumnDefinition<V> colDef, final boolean asc) {
+
+        checkAdapter();
+        final Column<V> column = getColumn(colDef);
+        dataSource.addSort(column, new ColumnControllerSort(column, asc), asc);
+        refreshRows(0, dataSource.getRowCount());
+    }
+
+    @Override
+    public void addSort(final Object key, final Comparator<V> comparator) {
+        checkAdapter();
+        dataSource.addSort(key, new GeneralControllerSort(comparator));
+        refreshRows(0, dataSource.getRowCount());
+    }
+
+    @Override
+    public void clearSort(final ColumnDefinition<V> colDef) {
+        checkAdapter();
+        final Column<V> column = getColumn(colDef);
+        if (dataSource.clearSort(column) == null) return;
+        dataSource.sort();
+        refreshRows(0, dataSource.getRowCount());
+    }
+
+    @Override
+    public void clearSorts() {
+        checkAdapter();
+        dataSource.clearSorts();
+        refreshRows(0, dataSource.getRowCount());
+    }
+
+    @Override
+    public void setFilter(final Object key, final ColumnDefinition<V> colDef, final BiPredicate<V, Supplier<Object>> biPredicate,
+                          final boolean reinforcing) {
+        final int oldLiveDataSize = dataSource.getRowCount();
+        checkAdapter();
+        dataSource.setFilter(key, null, reinforcing, new ColumnFilter(colDef, biPredicate));
+        refreshRows(0, oldLiveDataSize);
+    }
+
+    @Override
+    public void setFilter(final Object key, final String id, final Predicate<V> predicate, final boolean reinforcing) {
+        checkAdapter();
+        final int oldLiveDataSize = dataSource.getRowCount();
+        dataSource.setFilter(key, id, reinforcing, new GeneralFilter(predicate));
+        refreshRows(0, oldLiveDataSize);
+    }
+
+    @Override
+    public void clearFilter(final Object key) {
+        checkAdapter();
+        final AbstractFilter<V> oldFilter = dataSource.clearFilter(key);
+        if (oldFilter == null) return;
+        resetLiveData();
+    }
+
+    @Override
+    public void clearSort(final Object key) {
+        checkAdapter();
+        if (dataSource.clearSort(key) == null) return;
+        dataSource.sort();
+        refreshRows(0, dataSource.getRowCount());
+    }
+
+    @Override
+    public void prepareLiveDataOnScreen(final int rowIndex, final int size, final boolean isHorizontalScroll) {
+        /*
+         * If we have already the data in liveDataOnScreen then return
+         * Use Case: Horizontal Scroll / Pin / Unpin / Delete-Move column
+         */
+        if (absoluteIndex == rowIndex && size == liveDataOnScreen.size() && isHorizontalScroll) {
+            System.out.println("#-Ctrl-# We prepare nothing");
+            return;
+        }
+        //Commented because it's a problem for the DB
+        /*
+         * If we have already some of the data then ask only for what we don't have
+         * Use Case: Window resize
+         */
+        //        if (absoluteIndex == rowIndex && size > liveDataOnScreen.size() && !liveDataOnScreen.isEmpty()) {
+        //            System.out.println("#-Ctrl-# We prepare in+ -> row: " + (rowIndex + liveDataOnScreen.size()) + "   size: "
+        //                    + (size - liveDataOnScreen.size()));
+        //            final List<Row<V>> tmp = dataSource.getRows(rowIndex + liveDataOnScreen.size(), size - liveDataOnScreen.size());
+        //            liveDataOnScreen.addAll(tmp);
+        //            absoluteIndex = rowIndex;
+        //            return;
+        //        }
+        /*
+         * If the demanded data is different from what we have then overwite it with the new data
+         * Use Case: Sort / Filter / Scroll Vertical
+         */
+        if (liveDataOnScreen != null) {
+            liveDataOnScreen.clear();
+            System.out.println("#-Ctrl-# We clean then prepare -> row: " + (rowIndex + liveDataOnScreen.size()) + "   size: "
+                    + (size - liveDataOnScreen.size()));
+            liveDataOnScreen.addAll(dataSource.getRows(rowIndex, size));
+            absoluteIndex = rowIndex;
+            return;
+        }
+    }
+
+    @Override
+    public V getRowData(final int rowIndex) {
+        checkAdapter();
+        final V v = rowIndex < liveDataOnScreen.size() ? liveDataOnScreen.get(rowIndex).getData() : null;
+        if (v == null) {
+            System.out.println("Row " + rowIndex + " is null ! ");
+        }
+        return v;
+    }
+
+    @Override
+    public DataGridModel<K, V> getModel() {
+        return this;
+    }
+
+    @Override
+    public void setListener(final DataGridControllerListener<V> listener) {
+        this.listener = listener;
+    }
+
+    @Override
+    public void clearRenderingHelpers(final ColumnDefinition<V> colDef) {
+        checkAdapter();
+        final Column<V> column = getColumn(colDef);
+        for (final Row<V> row : dataSource.getRows()) {
+            clearRenderingHelper(row, column);
+        }
+    }
+
+    @Override
+    public int getRowCount() {
+        return dataSource.getRowCount();
+    }
+
+    @Override
+    public String toString() {
+        return "DefaultDataGridController liveDataOnScreen=" + liveDataOnScreen + "]";
+    }
+
+    @Override
+    public Collection<V> getLiveData() {
+        return new MappedList<>(liveDataOnScreen, Row::getData);
+    }
+
+    @Override
+    public void setConfig(final DataGridConfig<V> config) {
+        checkAdapter();
+
+        dataSource.clearSorts();
+        dataSource.clearFilters();
+
+        for (final Sort<V> s : config.getSorts()) {
+            if (s == null) continue;
+            if (s instanceof ColumnSort) {
+                final ColumnSort<V> sort = (ColumnSort<V>) s;
+                final Column<V> column = getColumn(sort.getColumnId());
+                if (column == null) continue;
+                dataSource.addSort(column, new ColumnControllerSort(column, sort.isAsc()));
+
+            } else { // s instanceof GeneralSort
+                final GeneralSort<V> sort = (GeneralSort<V>) s;
+                dataSource.addSort(sort.getKey(), new GeneralControllerSort(sort.getComparator()));
+            }
+        }
+        resetLiveData();
+    }
+
+    @Override
+    public void enrichConfigBuilder(final DataGridConfigBuilder<V> builder) {
+        checkAdapter();
+        for (final Map.Entry<Object, Comparator<Row<V>>> entry : dataSource.getSortsEntry()) {
+            if (entry.getValue() instanceof SimpleDataGridController.ColumnControllerSort) {
+                final ColumnControllerSort sort = (ColumnControllerSort) entry.getValue();
+                builder.addSort(new ColumnSort<>(sort.column.def.getId(), sort.asc));
+            } else { // instanceof GeneralControllerSort
+                final GeneralControllerSort sort = (GeneralControllerSort) entry.getValue();
+                builder.addSort(new GeneralSort<>(entry.getKey(), sort.comparator));
+            }
+        }
+    }
+
+    @Override
+    public void setBound(final boolean bound) {
+        if (this.bound == bound) return;
+        this.bound = bound;
+        if (!bound || from >= to) return;
+        doRefreshRows();
+    }
+
+    @Override
+    public boolean getBound() {
+        return bound;
+    }
+
+    @Override
+    public boolean isSelected(final K k) {
+        return dataSource.isSelected(k);
+    }
+
+    @Override
+    public Collection<V> getLiveSelectedData() {
+        final List<Row<V>> liveSelectedData = dataSource.getLiveSelectedData();
+        return new MappedList<>(liveSelectedData, Row::getData);
+    }
+
+    @Override
+    public void select(final K k) {
+        dataSource.select(k);
+    }
+
+    @Override
+    public void unselect(final K k) {
+        dataSource.unselect(k);
+    }
+
+    @Override
+    public void selectAllLiveData() {
+        dataSource.selectAllLiveData();
+    }
+
+    @Override
+    public void unselectAllData() {
+        dataSource.unselectAllData();
+    }
+
+    ///////////////////////////////////////////////////////////////////////////////////////////////////
+    ////////////////////////////////////// Nested Classes /////////////////////////////////////////////
+    ///////////////////////////////////////////////////////////////////////////////////////////////////
+    //FIXME : modified accessors
+
+    public static class Interval {
+
+        private final int from;
+        private final int to;
+
+        Interval(final int from, final int to) {
+            super();
+            this.from = from;
+            this.to = to;
+        }
+    }
+
+    private class RenderingHelperSupplier implements Supplier<Object> {
+
+        private Row<V> row;
+        private Column<V> column;
+
+        private void set(final Row<V> row, final Column<V> column) {
+            this.row = row;
+            this.column = column;
+        }
+
+        private void clear() {
+            this.row = null;
+            this.column = null;
+        }
+
+        @Override
+        public Object get() {
+            return getRenderingHelper(row, column);
+        }
+
+    }
+
+    public static class RenderingHelpersCache<V> extends LinkedHashMap<Row<V>, Object[]> {
+
+        @Override
+        protected boolean removeEldestEntry(final Entry<Row<V>, Object[]> eldest) {
+            return size() > RENDERING_HELPERS_CACHE_CAPACITY;
+        }
+    }
+
+    public static class Column<V> {
+
+        private final ColumnDefinition<V> def;
+        private final int id;
+
+        private Column(final int id, final ColumnDefinition<V> def) {
+            super();
+            this.id = id;
+            this.def = def;
+        }
+
+        //Added
+        public ColumnDefinition<V> getColDef() {
+            return def;
+        }
+
+    }
+
+    public static class Row<V> {
+
+        final int id;
+        public V data;
+        public boolean accepted;
+
+        public Row(final int id, final V data) {
+            super();
+            this.id = id;
+            this.data = data;
+        }
+
+        V getData() {
+            return data;
+        }
+
+        @Override
+        public int hashCode() {
+            return id;
+        }
+
+        @Override
+        public String toString() {
+            return "Row [id=" + id + ", data=" + data + ", accepted=" + accepted + "]";
+        }
+
+    }
+
+    private class GeneralControllerSort implements Comparator<Row<V>> {
+
+        private final Comparator<V> comparator;
+
+        public GeneralControllerSort(final Comparator<V> comparator) {
+            super();
+            this.comparator = comparator;
+        }
+
+        @Override
+        public int compare(final Row<V> r1, final Row<V> r2) {
+            return comparator.compare(r1.data, r2.data);
+        }
+    }
+
+    public class ColumnControllerSort implements Comparator<Row<V>> {
+
+        private final Column<V> column;
+        public final boolean asc;
+
+        public ColumnControllerSort(final Column<V> column, final boolean asc) {
+            super();
+            this.column = column;
+            this.asc = asc;
+        }
+
+        @Override
+        public int compare(final Row<V> r1, final Row<V> r2) {
+            try {
+                renderingHelperSupplier1.set(r1, column);
+                renderingHelperSupplier2.set(r2, column);
+                final int diff = asc ? column.def.compare(r1.data, renderingHelperSupplier1, r2.data, renderingHelperSupplier2)
+                        : column.def.compare(r2.data, renderingHelperSupplier2, r1.data, renderingHelperSupplier1);
+                return diff;
+            } finally {
+                renderingHelperSupplier1.clear();
+                renderingHelperSupplier2.clear();
+            }
+        }
+
+        public boolean getSortAsc() {
+            return asc;
+        }
+
+    }
+
+    public class GeneralFilter implements AbstractFilter<V> {
+
+        private final Predicate<V> filter;
+
+        public GeneralFilter(final Predicate<V> filter) {
+            super();
+            this.filter = filter;
+        }
+
+        @Override
+        public boolean test(final Row<V> row) {
+            return filter.test(row.data);
+        }
+
+        @Override
+        public ColumnDefinition<V> getColumnDefinition() {
+            return null;
+        }
+    }
+
+    public class ColumnFilter implements AbstractFilter<V> {
+
+        private final Column<V> column;
+        private final BiPredicate<V, Supplier<Object>> filter;
+
+        ColumnFilter(final ColumnDefinition<V> colDef, final BiPredicate<V, Supplier<Object>> filter) {
+            super();
+            this.column = getColumn(colDef);
+            this.filter = filter;
+        }
+
+        @Override
+        public boolean test(final Row<V> row) {
+            try {
+                renderingHelperSupplier1.set(row, column);
+                return filter.test(row.data, renderingHelperSupplier1);
+            } finally {
+                renderingHelperSupplier1.clear();
+            }
+        }
+
+        @Override
+        public ColumnDefinition<V> getColumnDefinition() {
+            return column.def;
+        }
+    }
+}
\ No newline at end of file
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/SimpleDataGridView.java b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/SimpleDataGridView.java
new file mode 100644
index 00000000..1ff008f9
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/SimpleDataGridView.java
@@ -0,0 +1,1492 @@
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.ui.datagrid2;
+
+import java.time.Duration;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Comparator;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.function.BiPredicate;
+import java.util.function.Consumer;
+import java.util.function.Predicate;
+import java.util.function.Supplier;
+
+import javax.json.JsonArray;
+import javax.json.JsonObject;
+
+import com.ponysdk.core.server.concurrent.PScheduler;
+import com.ponysdk.core.server.concurrent.PScheduler.UIRunnable;
+import com.ponysdk.core.server.stm.Txn;
+import com.ponysdk.core.ui.basic.Element;
+import com.ponysdk.core.ui.basic.IsPWidget;
+import com.ponysdk.core.ui.basic.PAddOnComposite;
+import com.ponysdk.core.ui.basic.PComplexPanel;
+import com.ponysdk.core.ui.basic.PWidget;
+import com.ponysdk.core.ui.basic.event.PClickEvent;
+import com.ponysdk.core.ui.basic.event.PClickHandler;
+import com.ponysdk.core.ui.datagrid2.ColumnDefinition.State;
+import com.ponysdk.core.ui.datagrid2.DataGridConfig.ColumnConfig;
+import com.ponysdk.core.ui.datagrid2.DataGridConfig.ColumnSort;
+import com.ponysdk.core.ui.datagrid2.DataGridConfig.GeneralSort;
+import com.ponysdk.core.ui.datagrid2.DataGridConfig.Sort;
+import com.ponysdk.core.util.SetUtils;
+
+/**
+ * @author mbagdouri
+ */
+public final class SimpleDataGridView<K, V> implements DataGridView<K, V> {
+
+    //Addon
+    private static final String ADDON_ROW_KEY = "row";
+    private static final String ADDON_ROW_COUNT_KEY = "rc";
+    private static final String ADDON_COLUMN_ID = "col";
+    private static final String ADDON_COLUMN_WIDTH = "cw";
+    private static final String ADDON_COLUMN_VISIBILITY = "cv";
+    private static final String ADDON_COLUMN_TO = "to";
+
+    //HTML Attributes
+    /**
+     * Set on a row widget when it is selected
+     */
+    public static final String SELECTED_ATTRIBUTE = "pony-selected";
+    /**
+     * Set on a cell (header, body, and footer) widget when its column is pinned
+     */
+    public static final String PINNED_ATTRIBUTE = "pony-pinned";
+    /**
+     * Set on a cell widget of the body of the grid when it is in pending state
+     */
+    public static final String PENDING_ATTRIBUTE = "pony-pending";
+    /**
+     * Set on a cell widget of the body of the grid when it is in extended mode
+     */
+    public static final String EXTENDED_ATTRIBUTE = "pony-extended";
+    /**
+     * Set on a row widget when it is hovered
+     */
+    public static final String HOVERED_ATTRIBUTE = "pony-hovered";
+
+    //State
+    private static final int MIN_RELATIVE_ROW_COUNT = 9;
+    private int columnViewSequence = 0;
+    private final PComplexPanel root = Element.newDiv();
+    private final PComplexPanel loadingDataDiv;
+    private final PinnedTable pinnedTable;
+    private final UnpinnedTable unpinnedTable;
+    private Addon addon;
+    private final List<Row> rows = new ArrayList<>();
+    private final DataGridController<K, V> controller = new SimpleDataGridController<>();
+    private DataGridAdapter<K, V> adapter;
+    private long pollingDelayMillis;
+    private UIRunnable delayedDrawRunnable;
+    private int from = Integer.MAX_VALUE;
+    private int to = 0;
+    private final Set<DrawListener> drawListeners = SetUtils.newArraySet();
+    private final Collection<V> dataView = controller.getLiveData();
+    private final Collection<V> selectedDataView = controller.getLiveSelectedData();
+    private final Map<ColumnDefinition<V>, ColumnView> columnViews = new HashMap<>();
+    private final DataGridModelWrapper modelWrapper = new DataGridModelWrapper(controller.getModel());
+    private final LinkedHashMap<Object, RowAction<V>> rowActions = new LinkedHashMap<>();
+    private int firstRowIndex = 0;
+    private boolean isHorizontalScroll = false;
+
+    public SimpleDataGridView() {
+        new HideScrollBarAddon(root);
+        controller.setListener(this::onUpdateRows);
+
+        root.addStyleName("pony-grid");
+        root.setStyleProperty("display", "flex");
+        root.setStyleProperty("flex-direction", "column");
+        root.setStyleProperty("position", "relative");
+
+        final PComplexPanel headerPinnedDiv = Element.newDiv();
+        final PComplexPanel headerUnpinnedDiv = Element.newDiv();
+        final PComplexPanel headerDiv = prepareHeaderDiv(headerPinnedDiv, headerUnpinnedDiv);
+        root.add(headerDiv);
+
+        final PComplexPanel bodyPinnedDiv = Element.newDiv();
+        final PComplexPanel bodyUnpinnedDiv = Element.newDiv();
+        final PComplexPanel subBodyDiv = prepareSubBodyDiv(bodyPinnedDiv, bodyUnpinnedDiv);
+        loadingDataDiv = prepareLoadingDataDiv();
+
+        final PComplexPanel bodyDiv = prepareBodyDiv(subBodyDiv);
+        root.add(bodyDiv);
+
+        final PComplexPanel footerPinnedDiv = Element.newDiv();
+        final PComplexPanel footerUnpinnedDiv = Element.newDiv();
+        final PComplexPanel footerDiv = prepareFooterDiv(footerPinnedDiv, footerUnpinnedDiv);
+        root.add(footerDiv);
+
+        pinnedTable = new PinnedTable(headerPinnedDiv, bodyPinnedDiv, footerPinnedDiv);
+        unpinnedTable = new UnpinnedTable(headerUnpinnedDiv, bodyUnpinnedDiv, footerUnpinnedDiv);
+    }
+
+    //ADDED
+
+    public DataGridAdapter<K, V> getAdapter() {
+        return adapter;
+    }
+
+    //---------//
+
+    //FIXME : to be injected via spring and not setted
+    @Override
+    public void setDataSource(final DataGridSource dataSrc) {
+        ((SimpleDataGridController<K, V>) controller).setDataSource(dataSrc);
+    }
+
+    private PComplexPanel prepareBodyDiv(final PComplexPanel subBodyDiv) {
+        final PComplexPanel bodyDiv = Element.newDiv();
+        bodyDiv.setStyleProperty("flex", "auto");
+        bodyDiv.setStyleProperty("overflow-x", "hidden");
+        bodyDiv.addStyleName("pony-grid-body");
+        bodyDiv.add(subBodyDiv);
+        bodyDiv.add(loadingDataDiv);
+        return bodyDiv;
+    }
+
+    private PComplexPanel prepareSubBodyDiv(final PComplexPanel bodyPinnedDiv, final PComplexPanel bodyUnpinnedDiv) {
+        final PComplexPanel subBodyDiv = Element.newDiv();
+        subBodyDiv.setStyleProperty("display", "flex");
+        subBodyDiv.addStyleName("pony-grid-sub-body");
+        subBodyDiv.add(bodyPinnedDiv);
+        subBodyDiv.add(bodyUnpinnedDiv);
+        return subBodyDiv;
+    }
+
+    private static PComplexPanel prepareFooterDiv(final PComplexPanel footerPinnedDiv, final PComplexPanel footerUnpinnedDiv) {
+        final PComplexPanel footerDiv = Element.newDiv();
+        footerDiv.addStyleName("pony-grid-footer");
+        footerDiv.setStyleProperty("flex", "initial");
+        footerDiv.setStyleProperty("display", "flex");
+        footerDiv.add(footerPinnedDiv);
+        footerDiv.add(footerUnpinnedDiv);
+        return footerDiv;
+    }
+
+    private static PComplexPanel prepareHeaderDiv(final PComplexPanel headerPinnedDiv, final PComplexPanel headerUnpinnedDiv) {
+        final PComplexPanel headerDiv = Element.newDiv();
+        headerDiv.setStyleProperty("flex", "initial");
+        headerDiv.setStyleProperty("display", "flex");
+        headerDiv.addStyleName("pony-grid-header");
+        headerDiv.add(headerPinnedDiv);
+        headerDiv.add(headerUnpinnedDiv);
+        return headerDiv;
+    }
+
+    private static PComplexPanel prepareLoadingDataDiv() {
+        final PComplexPanel loadingDataDiv = Element.newDiv();
+        loadingDataDiv.addStyleName("pony-grid-loading-data");
+        loadingDataDiv.setStyleProperty("position", "absolute");
+        loadingDataDiv.setStyleProperty("top", "0px");
+        loadingDataDiv.setStyleProperty("left", "0px");
+        loadingDataDiv.setStyleProperty("width", "100%");
+        loadingDataDiv.setStyleProperty("height", "100%");
+        return loadingDataDiv;
+    }
+
+    @Override
+    public PWidget asWidget() {
+        return root;
+    }
+
+    @Override
+    public DataGridModel<K, V> getModel() {
+        return modelWrapper;
+    }
+
+    private void onScroll(final int row) {
+        showLoadingDataView();
+        firstRowIndex = row;
+        onUpdateRows(0, controller.getRowCount());
+        draw();
+    }
+
+    private void onRelativeRowCountUpdated(int relRowCount) {
+        showLoadingDataView();
+        final int mod = relRowCount % 3;
+        relRowCount = Math.max(mod == 0 ? relRowCount : relRowCount - mod + 3, MIN_RELATIVE_ROW_COUNT);
+        if (this.rows.size() == relRowCount) return;
+        if (this.rows.size() < relRowCount) {
+            for (int i = this.rows.size(); i < relRowCount; i++) {
+                rows.add(new Row(i));
+            }
+        } else do {
+            rows.get(rows.size() - 1).destroy();
+        } while (rows.size() > relRowCount);
+        onUpdateRows(0, controller.getRowCount());
+        draw();
+        addon.checkPosition();
+    }
+
+    private void onColumnVisibilityChanged(final JsonArray columns, final JsonArray visiblity) {
+        for (int i = 0; i < columns.size(); i++) {
+            final int column = columns.getInt(i);
+            final boolean visible = visiblity.getBoolean(i);
+            final ColumnDefinition<V> c = adapter.getColumnDefinitions().get(column);
+            final ColumnView columnView = getColumnView(c);
+            columnView.visible = visible;
+        }
+        onUpdateRows(0, controller.getRowCount());
+        //        controller.setHorizontalScroll(true);
+        isHorizontalScroll = true;
+        draw();
+        isHorizontalScroll = false;
+        //        controller.setHorizontalScroll(false);
+    }
+
+    private void onColumnResized(final int column, final int width) {
+        final ColumnDefinition<V> c = adapter.getColumnDefinitions().get(column);
+        if (!c.isResizable()) return;
+        final ColumnView columnView = getColumnView(c);
+        if (columnView.width == width) return;
+        final int oldWidth = columnView.width;
+        columnView.width = Math.min(Math.max(width, columnView.column.getMinWidth()), columnView.column.getMaxWidth());
+        if (columnView.width == oldWidth) return;
+        int index = pinnedTable.columns.indexOf(columnView);
+        final String widthAsString = columnView.getWidthAsString();
+        if (index >= 0) {
+            pinnedTable.width += columnView.width - oldWidth;
+            pinnedTable.refreshWidth();
+            pinnedTable.header.getWidget(index).setWidth(widthAsString);
+            final String rowWidth = pinnedTable.width + "px";
+            for (final Row row : rows) {
+                row.pinnedRow.getWidget(index).setWidth(widthAsString);
+                row.pinnedRow.setWidth(rowWidth);
+            }
+            pinnedTable.footer.getWidget(index).setWidth(widthAsString);
+        } else {
+            unpinnedTable.width += columnView.width - oldWidth;
+            unpinnedTable.refreshWidth();
+            index = unpinnedTable.columns.indexOf(columnView);
+            unpinnedTable.header.getWidget(index).setWidth(widthAsString);
+            final String rowWidth = unpinnedTable.width + "px";
+            for (final Row row : rows) {
+                row.unpinnedRow.getWidget(index).setWidth(widthAsString);
+                row.unpinnedRow.setWidth(rowWidth);
+            }
+            unpinnedTable.footer.getWidget(index).setWidth(widthAsString);
+        }
+        columnView.notifyResizedListeners();
+    }
+
+    private void onColumnMoved(final int from, final int to) {
+        if (from == to) return;
+
+        final ColumnDefinition<V> fromCol = adapter.getColumnDefinitions().get(from);
+        if (fromCol.getDraggableHeaderElement() == null) return;
+        final ColumnView fromColumnView = getColumnView(fromCol);
+        final int fromIndex = unpinnedTable.columns.indexOf(fromColumnView);
+        if (fromIndex < 0) return;
+
+        final ColumnDefinition<V> toCol = adapter.getColumnDefinitions().get(to);
+        if (toCol.getDraggableHeaderElement() == null) return;
+        final ColumnView toColumnView = getColumnView(toCol);
+        final int toIndex = unpinnedTable.columns.indexOf(toColumnView);
+        if (toIndex < 0) return;
+
+        unpinnedTable.columns.remove(fromIndex);
+        unpinnedTable.columns.add(toIndex, fromColumnView);
+
+        final PWidget header = unpinnedTable.header.getWidget(fromIndex);
+        unpinnedTable.header.remove(fromIndex);
+        unpinnedTable.header.insert(header, toIndex);
+
+        final PWidget footer = unpinnedTable.footer.getWidget(fromIndex);
+        unpinnedTable.footer.remove(fromIndex);
+        unpinnedTable.footer.insert(footer, toIndex);
+
+        for (final Row row : rows) {
+            row.unpinnedCells.add(toIndex, row.unpinnedCells.remove(fromIndex));
+            final PWidget widget = row.unpinnedRow.getWidget(fromIndex);
+            row.unpinnedRow.remove(fromIndex);
+            row.unpinnedRow.insert(widget, toIndex);
+        }
+    }
+
+    /**
+     * Updates the indexes of the rows that must be redrawn
+     */
+    private void onUpdateRows(final int from, final int to) {
+        if (from >= to) return;
+        this.from = Math.min(this.from, from);
+        this.to = Math.max(this.to, to);
+    }
+
+    /**
+     * Draws rows from index {@code from} to index {@code to}
+     */
+    private void draw() {
+        try {
+            if (from >= to) return;
+            final int absoluteRowCount = controller.getRowCount();
+            int start;
+            if (firstRowIndex > absoluteRowCount - rows.size()) {
+                firstRowIndex = Math.max(0, absoluteRowCount - rows.size());
+                start = 0;
+            } else {
+                start = Math.max(0, from - firstRowIndex);
+            }
+
+            final int size = unpinnedTable.body.getWidgetCount();
+            System.out.println();
+            System.out.println();
+            System.out.println("#-View-# Prepare onDraw -> row : " + firstRowIndex + "   size : " + size);
+            controller.prepareLiveDataOnScreen(firstRowIndex, size, isHorizontalScroll);
+
+            for (int i = start; i < size; i++) {
+                updateRow(rows.get(i), absoluteRowCount);
+            }
+            addon.onDataUpdated(absoluteRowCount, this.rows.size(), firstRowIndex);
+        } finally {
+            from = Integer.MAX_VALUE;
+            to = 0;
+            for (final DrawListener drawListener : drawListeners) {
+                drawListener.onDraw();
+            }
+            hideLoadingDataView();
+        }
+    }
+
+    private void updateRow(final Row row, final int absoluteRowCount) {
+        if (row.getAbsoluteIndex() >= absoluteRowCount) {
+            row.hide();
+            row.key = null;
+            return;
+        }
+        final boolean mustUpdateRowHeight = row.extended || !row.isShown();
+        row.show();
+        final K previousKey = row.key;
+        //        final int absoluteIndex = row.getAbsoluteIndex();
+        //        final V rowData = controller.getRowData(absoluteIndex);
+        final V rowData = controller.getRowData(row.getRelativeIndex());
+
+        row.key = adapter.getKey(rowData);
+        final boolean selected = controller.isSelected(row.key);
+        row.extended = false;
+
+        updateRowCells(row, row.unpinnedCells, unpinnedTable.columns, selected, previousKey);
+        updateRowCells(row, row.pinnedCells, pinnedTable.columns, selected, previousKey);
+
+        if (row.extended) addon.updateExtendedRowHeight(row.relativeIndex);
+        else if (mustUpdateRowHeight) addon.updateRowHeight(row.relativeIndex);
+
+        if (selected) {
+            adapter.onSelectRow(row.unpinnedRow);
+            row.unpinnedRow.setAttribute(SELECTED_ATTRIBUTE);
+            adapter.onSelectRow(row.pinnedRow);
+            row.pinnedRow.setAttribute(SELECTED_ATTRIBUTE);
+        } else {
+            adapter.onUnselectRow(row.unpinnedRow);
+            row.unpinnedRow.removeAttribute(SELECTED_ATTRIBUTE);
+            adapter.onUnselectRow(row.pinnedRow);
+            row.pinnedRow.removeAttribute(SELECTED_ATTRIBUTE);
+        }
+
+        applyRowActions(row, rowData);
+    }
+
+    private void applyRowActions(final Row row, final V rowData) {
+        for (final RowAction<V> rowAction : rowActions.values()) {
+            if (rowAction.testRow(rowData, row.getAbsoluteIndex())) {
+                rowAction.apply(row.pinnedRow);
+                rowAction.apply(row.unpinnedRow);
+            } else {
+                rowAction.cancel(row.pinnedRow);
+                rowAction.cancel(row.unpinnedRow);
+            }
+        }
+    }
+
+    private void updateRowCells(final Row row, final List<Cell<V>> cells, final List<ColumnView> columns, final boolean selected,
+                                final K previousKey) {
+        for (int c = 0; c < cells.size(); c++) {
+            final Cell<V> cell = cells.get(c);
+            final ColumnView column = columns.get(c);
+            updateRowCell(row, cell, column, selected, previousKey);
+        }
+    }
+
+    private void updateRowCell(final Row row, final Cell<V> cell, final ColumnView columnView, final boolean selected,
+                               final K previousKey) {
+        final PComplexPanel td = (PComplexPanel) cell.asWidget().getParent();
+        final ExtendedCellHandler extendedCellHandler = columnView.extendedCells.get(row.key);
+        if (!columnView.visible && extendedCellHandler == null) {
+            showPendingWidget(cell, selected, td);
+        } else {
+            td.removeAttribute(PENDING_ATTRIBUTE);
+            cell.asPendingWidget().setVisible(false);
+            if (extendedCellHandler == null) {
+                showCellWidget(row, cell, columnView, selected, previousKey, td);
+            } else {
+                showExtendedCellWidget(row, cell, td, extendedCellHandler);
+            }
+        }
+
+    }
+
+    private void showExtendedCellWidget(final Row row, final Cell<V> cell, final PComplexPanel td,
+                                        final ExtendedCellHandler extendedCellHandler) {
+        td.setAttribute(EXTENDED_ATTRIBUTE);
+        extendedCellHandler.row = row;
+        row.extended = true;
+        cell.asWidget().setVisible(false);
+        if (extendedCellHandler.cell.asWidget().getParent() != td) {
+            if (extendedCellHandler.cell.asWidget().getParent() != null) {
+                extendedCellHandler.cell.beforeRemove();
+                extendedCellHandler.cell.asWidget().removeFromParent();
+            }
+            td.add(extendedCellHandler.cell);
+            extendedCellHandler.cell.afterAdd();
+        }
+        controller.setValueOnExtendedCell(row.getAbsoluteIndex(), extendedCellHandler.cell);
+    }
+
+    private void showCellWidget(final Row row, final Cell<V> cell, final ColumnView columnView, final boolean selected,
+                                final K previousKey, final PComplexPanel td) {
+        td.removeAttribute(EXTENDED_ATTRIBUTE);
+        cell.asWidget().setVisible(true);
+        //        controller.renderCell(columnView.column, row.getAbsoluteIndex(), cell);
+        controller.renderCell(columnView.column, row.getRelativeIndex(), cell);
+        if (td.getWidgetCount() > 2) {
+            final ExtendedCellHandler previousExtendedCellHandler = columnView.extendedCells.get(previousKey);
+            if (previousExtendedCellHandler != null && previousExtendedCellHandler.cell.asWidget().getParent() != null) {
+                previousExtendedCellHandler.cell.beforeRemove();
+            }
+            td.remove(2);
+        }
+        if (selected) cell.select();
+        else cell.unselect();
+    }
+
+    private void showPendingWidget(final Cell<V> cell, final boolean selected, final PComplexPanel td) {
+        td.setAttribute(PENDING_ATTRIBUTE);
+        td.removeAttribute(EXTENDED_ATTRIBUTE);
+        cell.asPendingWidget().setVisible(true);
+        cell.asWidget().setVisible(false);
+        if (td.getWidgetCount() > 2) td.remove(2);
+        if (selected) cell.select();
+        else cell.unselect();
+    }
+
+    @Override
+    public void setAdapter(final DataGridAdapter<K, V> adapter) {
+        if (this.adapter != null) throw new IllegalStateException("DataGridAdapter is already set");
+        controller.setAdapter(adapter);
+        this.adapter = adapter;
+        if (adapter.hasHeader()) {
+            adapter.onCreateHeaderRow(pinnedTable.header);
+            adapter.onCreateHeaderRow(unpinnedTable.header);
+        } else {
+            pinnedTable.header.setHeight("0px");
+            unpinnedTable.header.setHeight("0px");
+        }
+        if (adapter.hasFooter()) {
+            adapter.onCreateFooterRow(pinnedTable.footer);
+            adapter.onCreateFooterRow(unpinnedTable.footer);
+        }
+        loadingDataDiv.add(adapter.createLoadingDataWidget());
+        for (final ColumnDefinition<V> column : adapter.getColumnDefinitions()) {
+            final ColumnView columnView = columnViews.computeIfAbsent(column, ColumnView::new);
+            column.setController(new SimpleColumnController(columnView));
+            addColumnActionListener(column, column);
+            if (column.getDefaultState().isShown()) {
+                final Table table = column.getDefaultState().isPinned() ? pinnedTable : unpinnedTable;
+                table.addColumn(getColumnView(column));
+            }
+        }
+        pinnedTable.refreshWidth();
+        unpinnedTable.refreshWidth();
+        for (int i = 0; i < MIN_RELATIVE_ROW_COUNT; i++) {
+            rows.add(new Row(i));
+        }
+        addon = new Addon();
+        for (final ColumnView columnView : columnViews.values()) {
+            addon.onColumnAdded(columnView.id, columnView.column.getMinWidth(), columnView.column.getMaxWidth(),
+                columnView.state.isPinned());
+        }
+    }
+
+    private void pin(final ColumnView columnView) {
+        final int index = unpinnedTable.columns.indexOf(columnView);
+        unpinnedTable.columns.remove(index);
+        unpinnedTable.width -= columnView.width;
+        pinnedTable.columns.add(columnView);
+        pinnedTable.width += columnView.width;
+        {
+            final PWidget widget = unpinnedTable.header.getWidget(index);
+            unpinnedTable.header.remove(index);
+            pinnedTable.header.add(widget);
+            widget.setAttribute(PINNED_ATTRIBUTE);
+        }
+        {
+            final PWidget widget = unpinnedTable.footer.getWidget(index);
+            unpinnedTable.footer.remove(index);
+            pinnedTable.footer.add(widget);
+            widget.setAttribute(PINNED_ATTRIBUTE);
+        }
+        pinnedTable.refreshWidth();
+        unpinnedTable.refreshWidth();
+        final String pinnedRowWidth = pinnedTable.width + "px";
+        final String unpinnedRowWidth = unpinnedTable.width + "px";
+        for (final Row row : rows) {
+            row.pinnedCells.add(row.unpinnedCells.remove(index));
+            final PWidget widget = row.unpinnedRow.getWidget(index);
+            row.unpinnedRow.remove(index);
+            row.pinnedRow.add(widget);
+            row.pinnedRow.setWidth(pinnedRowWidth);
+            row.unpinnedRow.setWidth(unpinnedRowWidth);
+            widget.setAttribute(PINNED_ATTRIBUTE);
+        }
+    }
+
+    private void unpin(final ColumnView columnView) {
+        final int index = pinnedTable.columns.indexOf(columnView);
+        pinnedTable.columns.remove(index);
+        pinnedTable.width -= columnView.width;
+        unpinnedTable.columns.add(0, columnView);
+        unpinnedTable.width += columnView.width;
+        {
+            final PWidget widget = pinnedTable.header.getWidget(index);
+            pinnedTable.header.remove(index);
+            unpinnedTable.header.insert(widget, 0);
+            widget.removeAttribute(PINNED_ATTRIBUTE);
+        }
+        {
+            final PWidget widget = pinnedTable.footer.getWidget(index);
+            pinnedTable.footer.remove(index);
+            unpinnedTable.footer.insert(widget, 0);
+            widget.removeAttribute(PINNED_ATTRIBUTE);
+        }
+        pinnedTable.refreshWidth();
+        unpinnedTable.refreshWidth();
+        final String pinnedRowWidth = pinnedTable.width + "px";
+        final String unpinnedRowWidth = unpinnedTable.width + "px";
+        for (final Row row : rows) {
+            row.unpinnedCells.add(0, row.pinnedCells.remove(index));
+            final PWidget widget = row.pinnedRow.getWidget(index);
+            row.pinnedRow.remove(index);
+            row.unpinnedRow.insert(widget, 0);
+            row.pinnedRow.setWidth(pinnedRowWidth);
+            row.unpinnedRow.setWidth(unpinnedRowWidth);
+            widget.removeAttribute(PINNED_ATTRIBUTE);
+        }
+    }
+
+    private void show(final ColumnView columnView) {
+        unpinnedTable.addColumn(columnView);
+        unpinnedTable.refreshWidth();
+        final String unpinnedRowWidth = unpinnedTable.width + "px";
+        for (final Row row : rows) {
+            row.addCell(row.unpinnedRow, row.unpinnedCells, columnView);
+            row.unpinnedRow.setWidth(unpinnedRowWidth);
+        }
+        onUpdateRows(0, rows.size());
+    }
+
+    private void hide(final ColumnView columnView) {
+        final int index = unpinnedTable.columns.indexOf(columnView);
+        unpinnedTable.removeColumn(index);
+        unpinnedTable.refreshWidth();
+        final String unpinnedRowWidth = unpinnedTable.width + "px";
+        for (final Row row : rows) {
+            row.unpinnedCells.remove(index);
+            row.unpinnedRow.remove(index);
+            row.unpinnedRow.setWidth(unpinnedRowWidth);
+        }
+    }
+
+    @Override
+    public void setPollingDelayMillis(final long pollingDelayMillis) {
+        checkAdapter();
+        if (this.pollingDelayMillis == pollingDelayMillis) return;
+        this.pollingDelayMillis = pollingDelayMillis;
+        if (delayedDrawRunnable != null) delayedDrawRunnable.cancel();
+        if (pollingDelayMillis == 0L) {
+            delayedDrawRunnable = null;
+            draw();
+        } else delayedDrawRunnable = PScheduler.scheduleAtFixedRate(this::draw, Duration.ofMillis(pollingDelayMillis));
+    }
+
+    @Override
+    public Collection<V> getLiveData() {
+        return dataView;
+    }
+
+    @Override
+    public void setFilter(final Object key, final String id, final Predicate<V> filter, final boolean reinforcing) {
+        showLoadingDataView();
+        controller.setFilter(key, id, filter, reinforcing);
+        draw();
+    }
+
+    @Override
+    public void clearFilter(final Object key) {
+        showLoadingDataView();
+        controller.clearFilter(key);
+        draw();
+    }
+
+    @Override
+    public void clearFilters() {
+        showLoadingDataView();
+        controller.clearFilters();
+        draw();
+    }
+
+    @Override
+    public void clearSorts() {
+        showLoadingDataView();
+        controller.clearSorts();
+        draw();
+        for (final ColumnView columnView : columnViews.values()) {
+            for (final ColumnActionListener<V> listener : columnView.listeners) {
+                listener.onClearSort();
+            }
+        }
+    }
+
+    private void checkAdapter() {
+        if (adapter == null) throw new IllegalStateException("A DataGridAdapter must be set");
+    }
+
+    @Override
+    public Collection<V> getLiveSelectedData() {
+        checkAdapter();
+        return selectedDataView;
+    }
+
+    @Override
+    public void selectAllLiveData() {
+        checkAdapter();
+        controller.selectAllLiveData();
+        for (final SimpleDataGridView<K, V>.Row row : rows) {
+            if (row.pinnedRow.isVisible()) row.select();
+        }
+        for (final ColumnView column : columnViews.values()) {
+            for (final Map.Entry<K, ExtendedCellHandler> entry : column.extendedCells.entrySet()) {
+                if (controller.isSelected(entry.getKey())) entry.getValue().cell.select();
+            }
+        }
+    }
+
+    @Override
+    public void unselectAllData() {
+        checkAdapter();
+        controller.unselectAllData();
+        for (final SimpleDataGridView<K, V>.Row row : rows) {
+            row.unselect();
+        }
+        for (final ColumnView column : columnViews.values()) {
+            for (final ExtendedCellHandler handler : column.extendedCells.values()) {
+                handler.cell.unselect();
+            }
+        }
+    }
+
+    @Override
+    public void addColumnActionListener(final ColumnDefinition<V> column, final ColumnActionListener<V> listener) {
+        getColumnView(column).listeners.add(listener);
+    }
+
+    @Override
+    public void removeColumnActionListener(final ColumnDefinition<V> column, final ColumnActionListener<V> listener) {
+        final ColumnView columnView = columnViews.get(column);
+        if (columnView == null) return;
+        columnView.listeners.remove(listener);
+    }
+
+    @Override
+    public String encodeConfigCustomValue(final String key, final Object value) {
+        return null;
+    }
+
+    @Override
+    public Object decodeConfigCustomValue(final String key, final String value) {
+        return null;
+    }
+
+    @Override
+    public DataGridConfig<V> getConfig() {
+        checkAdapter();
+        final DataGridConfigBuilder<V> builder = new DataGridConfigBuilder<>();
+        final Set<ColumnView> hiddenColumns = new HashSet<>(columnViews.values());
+        for (final ColumnView columnView : pinnedTable.columns) {
+            builder.addColumnConfig(new ColumnConfig<>(columnView.column.getId(), columnView.state, columnView.width));
+            hiddenColumns.remove(columnView);
+        }
+        for (final ColumnView columnView : unpinnedTable.columns) {
+            builder.addColumnConfig(new ColumnConfig<>(columnView.column.getId(), columnView.state, columnView.width));
+            hiddenColumns.remove(columnView);
+        }
+        for (final ColumnView columnView : hiddenColumns) {
+            builder.addColumnConfig(new ColumnConfig<>(columnView.column.getId(), columnView.state, columnView.width));
+        }
+        controller.enrichConfigBuilder(builder);
+        return builder.build();
+    }
+
+    private ColumnView getColumnView(final ColumnDefinition<V> column) {
+        return columnViews.get(column);
+    }
+
+    @Override
+    public void setConfig(final DataGridConfig<V> config) {
+        checkAdapter();
+        showLoadingDataView();
+        final int relativeRowCount = rows.size();
+        rows.clear();
+        pinnedTable.clear();
+        unpinnedTable.clear();
+
+        final Map<String, ColumnDefinition<V>> columnById = setColumnConfigs(config);
+
+        pinnedTable.refreshWidth();
+        unpinnedTable.refreshWidth();
+        this.controller.setConfig(config);
+        for (int i = 0; i < relativeRowCount; i++) {
+            rows.add(new Row(i));
+        }
+        onUpdateRows(0, controller.getRowCount());
+        addon.scrollToTop();
+        draw();
+
+        notifyListeners(config, columnById);
+    }
+
+    private Map<String, ColumnDefinition<V>> setColumnConfigs(final DataGridConfig<V> config) {
+        final List<ColumnDefinition<V>> remainingColumns = new ArrayList<>(adapter.getColumnDefinitions());
+        final Map<String, ColumnDefinition<V>> columnById = new HashMap<>();
+        for (final ColumnDefinition<V> column : adapter.getColumnDefinitions()) {
+            columnById.put(column.getId(), column);
+        }
+        for (final ColumnConfig<V> columnConfig : config.getColumnConfigs()) {
+            final ColumnDefinition<V> column = columnById.get(columnConfig.getColumnId());
+            if (column == null || !remainingColumns.remove(column)) continue;
+            setColumnConfig(column, columnConfig.getState(), columnConfig.getWidth());
+        }
+        for (final ColumnDefinition<V> column : remainingColumns) {
+            setColumnConfig(column, column.getDefaultState(), column.getDefaultWidth());
+        }
+        return columnById;
+    }
+
+    private void notifyListeners(final DataGridConfig<V> config, final Map<String, ColumnDefinition<V>> columnById) {
+        for (final ColumnDefinition<V> column : adapter.getColumnDefinitions()) {
+            final ColumnView columnView = getColumnView(column);
+            for (final ColumnActionListener<V> listener : columnView.listeners) {
+                listener.onClearSort();
+                listener.onClearFilters();
+            }
+        }
+
+        for (final Sort<V> sort : config.getSorts()) {
+            if (sort == null || sort instanceof GeneralSort) continue;
+            final ColumnSort<V> columnSort = (ColumnSort<V>) sort;
+            final ColumnDefinition<V> column = columnById.get(columnSort.getColumnId());
+            if (column == null) continue;
+            final ColumnView columnView = getColumnView(column);
+            for (final ColumnActionListener<V> listener : columnView.listeners) {
+                listener.onSort(columnSort.isAsc());
+            }
+        }
+    }
+
+    private void setColumnConfig(final ColumnDefinition<V> column, State state, final int width) {
+        if (state == null) state = column.getDefaultState();
+        final ColumnView columnView = getColumnView(column);
+        columnView.width = width;
+        if (state.isShown()) {
+            final Table table = state.isPinned() ? pinnedTable : unpinnedTable;
+            table.addColumn(columnView);
+        }
+        if (columnView.state != state) {
+            columnView.state = state;
+            columnView.notifyStateChangedListeners();
+        }
+        if (columnView.width != width) {
+            columnView.width = width;
+            columnView.notifyResizedListeners();
+        }
+
+    }
+
+    private void showLoadingDataView() {
+        loadingDataDiv.setVisible(true);
+        // must be sent immediately
+        Txn.get().flush(); //FIXME use Txn.get() ???
+    }
+
+    private void hideLoadingDataView() {
+        loadingDataDiv.setVisible(false);
+        // must be sent immediately
+        Txn.get().flush(); //FIXME use Txn.get() ???
+    }
+
+    @Override
+    public void addRowAction(final Object key, final RowAction<V> rowAction) {
+        final RowAction<V> old = rowActions.put(key, rowAction);
+        removeRowAction(old);
+        for (final Row row : rows) {
+            if (row.key == null) continue;
+            final int absoluteIndex = row.getAbsoluteIndex();
+            final V data = controller.getRowData(absoluteIndex);
+            if (data == null || !rowAction.testRow(data, absoluteIndex)) continue;
+            rowAction.apply(row.pinnedRow);
+            rowAction.apply(row.unpinnedRow);
+        }
+    }
+
+    @Override
+    public void clearRowAction(final Object key) {
+        removeRowAction(rowActions.remove(key));
+    }
+
+    private void removeRowAction(final RowAction<V> old) {
+        if (old == null) return;
+        for (final Row row : rows) {
+            if (row.key == null) continue;
+            final int absoluteIndex = row.getAbsoluteIndex();
+            //            final V data = controller.getRowData(absoluteIndex, 0, 0, null);
+            final V data = controller.getRowData(absoluteIndex);
+            if (data == null || !old.testRow(data, absoluteIndex)) continue;
+            old.cancel(row.pinnedRow);
+            old.cancel(row.unpinnedRow);
+        }
+    }
+
+    @Override
+    public void addDrawListener(final DrawListener drawListener) {
+        drawListeners.add(drawListener);
+    }
+
+    @Override
+    public void removeDrawListener(final DrawListener drawListener) {
+        drawListeners.remove(drawListener);
+    }
+
+    @Override
+    public void addSort(final Object key, final Comparator<V> comparator) {
+        showLoadingDataView();
+        controller.addSort(key, comparator);
+        draw();
+    }
+
+    @Override
+    public void clearSort(final Object key) {
+        showLoadingDataView();
+        controller.clearSort(key);
+        draw();
+    }
+
+    private class Row {
+
+        private final int relativeIndex;
+        private K key;
+        private final PComplexPanel unpinnedRow = Element.newDiv();
+        private final PComplexPanel pinnedRow = Element.newDiv();
+        private final List<Cell<V>> unpinnedCells = new ArrayList<>(unpinnedTable.columns.size());
+        private final List<Cell<V>> pinnedCells = new ArrayList<>(pinnedTable.columns.size());
+        private boolean extended = false;
+
+        Row(final int index) {
+            this.relativeIndex = index;
+            init(unpinnedTable, unpinnedRow, unpinnedCells, false);
+            init(pinnedTable, pinnedRow, pinnedCells, true);
+            hide();
+        }
+
+        int getRelativeIndex() {
+            return relativeIndex;
+        }
+
+        void init(final Table table, final PComplexPanel row, final List<Cell<V>> cells, final boolean pinned) {
+            row.addStyleName("pony-grid-row");
+            row.setStyleProperty("white-space", "nowrap");
+            for (final ColumnView column : table.columns) {
+                final PComplexPanel div = addCell(row, cells, column);
+                if (pinned) div.setAttribute(PINNED_ATTRIBUTE);
+            }
+            row.addDomHandler((PClickHandler) event -> {
+                if (key == null) return;
+                if (controller.isSelected(key)) {
+                    unselect();
+                } else {
+                    select();
+                }
+            }, PClickEvent.TYPE);
+            adapter.onCreateRow(row);
+            table.body.add(row);
+            row.setWidth(table.width + "px");
+        }
+
+        void destroy() {
+            if (relativeIndex != rows.size() - 1) return;
+            rows.remove(relativeIndex);
+            pinnedTable.body.remove(relativeIndex);
+            unpinnedTable.body.remove(relativeIndex);
+        }
+
+        private PComplexPanel addCell(final PComplexPanel row, final List<Cell<V>> cells, final ColumnView columnView) {
+            final PComplexPanel div = Element.newDiv();
+            div.setWidth(columnView.getWidthAsString());
+            div.setStyleProperty("height", "100%");
+            div.setStyleProperty("display", "inline-block");
+            div.setStyleProperty("vertical-align", "top");
+
+            final Cell<V> cell = columnView.column.createCell();
+            cell.setController(new SimpleCellController(this, columnView));
+            div.add(cell);
+            cell.asWidget().setVisible(columnView.visible);
+
+            div.add(cell.asPendingWidget());
+            cell.asPendingWidget().setVisible(!columnView.visible);
+
+            cells.add(cell);
+            row.add(div);
+            return div;
+        }
+
+        int getAbsoluteIndex() {
+            return relativeIndex + firstRowIndex;
+        }
+
+        boolean isShown() {
+            return unpinnedRow.isVisible();
+        }
+
+        void show() {
+            unpinnedRow.setVisible(true);
+            pinnedRow.setVisible(true);
+        }
+
+        void hide() {
+            unpinnedRow.setVisible(false);
+            pinnedRow.setVisible(false);
+        }
+
+        void select() {
+            if (key == null) return;
+            controller.select(key);
+            adapter.onSelectRow(unpinnedRow);
+            unpinnedRow.setAttribute(SELECTED_ATTRIBUTE);
+            adapter.onSelectRow(pinnedRow);
+            pinnedRow.setAttribute(SELECTED_ATTRIBUTE);
+            for (final Cell<V> cell : pinnedCells) {
+                cell.select();
+            }
+            for (final Cell<V> cell : unpinnedCells) {
+                cell.select();
+            }
+            if (extended) {
+                for (final ColumnView column : columnViews.values()) {
+                    final ExtendedCellHandler handler = column.extendedCells.get(key);
+                    if (handler == null) continue;
+                    handler.cell.select();
+                }
+            }
+        }
+
+        void unselect() {
+            if (key == null) return;
+            controller.unselect(key);
+            adapter.onUnselectRow(unpinnedRow);
+            unpinnedRow.removeAttribute(SELECTED_ATTRIBUTE);
+            adapter.onUnselectRow(pinnedRow);
+            pinnedRow.removeAttribute(SELECTED_ATTRIBUTE);
+            for (final Cell<V> cell : pinnedCells) {
+                cell.unselect();
+            }
+            for (final Cell<V> cell : unpinnedCells) {
+                cell.unselect();
+            }
+            if (extended) {
+                for (final ColumnView column : columnViews.values()) {
+                    final ExtendedCellHandler handler = column.extendedCells.get(key);
+                    if (handler == null) continue;
+                    handler.cell.unselect();
+                }
+            }
+        }
+
+    }
+
+    private class PinnedTable extends Table {
+
+        PinnedTable(final PComplexPanel header, final PComplexPanel body, final PComplexPanel footer) {
+            super(header, body, footer);
+            header.setStyleProperty("flex", "initial");
+            header.addStyleName("pony-grid-pinned-header");
+            body.setStyleProperty("flex", "initial");
+            body.setStyleProperty("overflow-x", "unset");
+            body.addStyleName("pony-grid-pinned-body");
+            footer.setStyleProperty("flex", "initial");
+            footer.addStyleName("pony-grid-pinned-footer");
+        }
+
+        @Override
+        protected PComplexPanel addFooterCell(final SimpleDataGridView<K, V>.ColumnView columnView) {
+            final PComplexPanel footer = super.addFooterCell(columnView);
+            footer.setAttribute(PINNED_ATTRIBUTE);
+            return footer;
+        }
+
+        @Override
+        protected PComplexPanel addHeaderCell(final SimpleDataGridView<K, V>.ColumnView columnView) {
+            final PComplexPanel header = super.addHeaderCell(columnView);
+            header.setAttribute(PINNED_ATTRIBUTE);
+            return header;
+        }
+
+    }
+
+    private class UnpinnedTable extends Table {
+
+        UnpinnedTable(final PComplexPanel header, final PComplexPanel body, final PComplexPanel footer) {
+            super(header, body, footer);
+            header.setStyleProperty("flex", "auto");
+            header.addStyleName("pony-grid-hidden-scrollbar");
+            header.addStyleName("pony-grid-unpinned-header");
+            header.setStyleProperty("overflow-x", "auto");
+            header.setStyleProperty("-ms-overflow-x", "auto");
+            header.setStyleProperty("overflow-y", "hidden");
+            header.setStyleProperty("-ms-overflow-y", "hidden");
+            body.setStyleProperty("flex", "auto");
+            body.addStyleName("pony-grid-hidden-scrollbar");
+            body.addStyleName("pony-grid-unpinned-body");
+            body.setStyleProperty("overflow-x", "auto");
+            body.setStyleProperty("-ms-overflow-x", "auto");
+            body.setStyleProperty("overflow-y", "hidden");
+            body.setStyleProperty("-ms-overflow-y", "hidden");
+            footer.setStyleProperty("flex", "auto");
+            footer.addStyleName("pony-grid-unpinned-footer");
+            footer.setStyleProperty("overflow-x", "auto");
+            footer.setStyleProperty("-ms-overflow-x", "auto");
+            footer.setStyleProperty("overflow-y", "hidden");
+            footer.setStyleProperty("-ms-overflow-y", "hidden");
+        }
+
+    }
+
+    private abstract class Table {
+
+        int width = 0;
+        final PComplexPanel header;
+        final PComplexPanel body;
+        final PComplexPanel footer;
+
+        final List<ColumnView> columns = new ArrayList<>();
+
+        Table(final PComplexPanel header, final PComplexPanel body, final PComplexPanel footer) {
+            this.header = header;
+            this.body = body;
+            this.footer = footer;
+            header.setStyleProperty("display", "flex");
+            footer.setStyleProperty("display", "flex");
+            header.setStyleProperty("white-space", "nowrap");
+            footer.setStyleProperty("white-space", "nowrap");
+        }
+
+        void refreshWidth() {
+            final String w = width + "px";
+            header.setWidth(w);
+            footer.setWidth(w);
+        }
+
+        void addColumn(final ColumnView columnView) {
+            width += columnView.width;
+            columns.add(columnView);
+
+            addHeaderCell(columnView);
+            addFooterCell(columnView);
+
+            if (addon != null) addon.onColumnAdded(columnView.id, columnView.column.getMinWidth(), columnView.column.getMaxWidth(),
+                columnView.state.isPinned());
+        }
+
+        protected PComplexPanel addFooterCell(final ColumnView columnView) {
+            final PComplexPanel footerCell = Element.newDiv();
+            footerCell.setStyleProperty("flex", "0 0 auto");
+            footerCell.setStyleProperty("width", columnView.getWidthAsString());
+            footerCell.setStyleProperty("vertical-align", "top");
+            footer.add(footerCell);
+            if (adapter.hasFooter()) {
+                footerCell.add(columnView.column.getFooter());
+                footerCell.setStyleProperty("height", "100%");
+            } else {
+                footerCell.setHeight("1px");
+            }
+            return footerCell;
+        }
+
+        protected PComplexPanel addHeaderCell(final ColumnView columnView) {
+            final PComplexPanel headerCell = Element.newDiv();
+            headerCell.setStyleProperty("flex", "0 0 auto");
+            headerCell.setStyleProperty("position", "relative");
+            headerCell.setStyleProperty("width", columnView.getWidthAsString());
+            headerCell.setStyleProperty("vertical-align", "top");
+            headerCell.setAttribute("data-column-id", Integer.toString(columnView.id));
+            header.add(headerCell);
+            if (adapter.hasHeader()) {
+                headerCell.add(columnView.column.getHeader());
+                headerCell.setStyleProperty("height", "100%");
+                if (columnView.column.isResizable()) {
+                    final PComplexPanel headerResizer = Element.newDiv();
+                    headerResizer.addStyleName("pony-grid-col-resizer");
+                    headerResizer.setHeight("100%");
+                    headerResizer.setStyleProperty("position", "absolute");
+                    headerResizer.setStyleProperty("top", "0");
+                    headerResizer.setStyleProperty("right", "0");
+                    headerResizer.setStyleProperty("cursor", "col-resize");
+                    headerResizer.setStyleProperty("user-select", "none");
+                    headerResizer.setStyleProperty("-webkit-user-select", "none");
+                    headerResizer.setStyleProperty("-moz-user-select", "none");
+                    headerResizer.setStyleProperty("-ms-user-select", "none");
+                    headerCell.add(headerResizer);
+                    adapter.onCreateColumnResizer(headerResizer);
+                }
+                final IsPWidget headerDraggableElement = columnView.column.getDraggableHeaderElement();
+                if (headerDraggableElement != null) {
+                    headerDraggableElement.asWidget().addStyleName("pony-grid-draggable-col");
+                }
+            } else {
+                headerCell.setHeight("1px");
+            }
+            return headerCell;
+        }
+
+        void removeColumn(final int index) {
+            final ColumnView columnView = columns.remove(index);
+            width -= columnView.width;
+            header.remove(index);
+            footer.remove(index);
+        }
+
+        void clear() {
+            columns.clear();
+            header.clear();
+            footer.clear();
+            body.clear();
+            width = 0;
+        }
+    }
+
+    private class SimpleCellController implements CellController<V> {
+
+        private final Row row;
+        private final ColumnView columnView;
+
+        SimpleCellController(final SimpleDataGridView<K, V>.Row row, final ColumnView column) {
+            super();
+            this.row = row;
+            this.columnView = column;
+        }
+
+        @Override
+        public void extendedMode(final ExtendedCell<V> extendedCell) {
+            if (row.key == null) return;
+            final ExtendedCellHandler handler = new ExtendedCellHandler(extendedCell, columnView, row);
+            columnView.extendedCells.put(row.key, handler);
+            extendedCell.setController(handler);
+
+            if (controller.isSelected(row.key)) extendedCell.select();
+            else extendedCell.unselect();
+
+            onUpdateRows(row.getAbsoluteIndex(), row.getAbsoluteIndex() + 1);
+            draw();
+        }
+
+        @Override
+        public void selectRow() {
+            row.select();
+        }
+
+        @Override
+        public void unselectRow() {
+            row.unselect();
+        }
+
+    }
+
+    private class ExtendedCellHandler implements ExtendedCellController<V> {
+
+        private final ExtendedCell<V> cell;
+        private final ColumnView column;
+        private final K key;
+        private Row row;
+
+        ExtendedCellHandler(final ExtendedCell<V> cell, final ColumnView column, final Row row) {
+            super();
+            this.cell = cell;
+            this.key = row.key;
+            this.column = column;
+            this.row = row;
+        }
+
+        @Override
+        public void cancelExtendedMode() {
+            column.extendedCells.remove(key);
+            if (row == null) return;
+            onUpdateRows(row.getAbsoluteIndex(), row.getAbsoluteIndex() + 1);
+            draw();
+        }
+
+        @Override
+        public void selectRow() {
+            if (row != null) row.select();
+        }
+
+        @Override
+        public void unselectRow() {
+            if (row != null) row.unselect();
+        }
+
+        @Override
+        public void updateValue(final V newV) {
+            getModel().setData(newV);
+            draw();
+        }
+
+        @Override
+        public void updateValue(final Consumer<V> action) {
+            getModel().updateData(key, action);
+            draw();
+        }
+
+    }
+
+    private class SimpleColumnController implements ColumnController<V> {
+
+        private final ColumnView columnView;
+
+        SimpleColumnController(final ColumnView columnView) {
+            this.columnView = columnView;
+        }
+
+        @Override
+        public void sort(final boolean asc) {
+            if (!columnView.column.isSortable()) return;
+            showLoadingDataView();
+            controller.addSort(columnView.column, asc);
+            draw();
+            for (final ColumnActionListener<V> listener : columnView.listeners) {
+                listener.onSort(asc);
+            }
+        }
+
+        @Override
+        public void clearSort() {
+            if (!columnView.column.isSortable()) return;
+            showLoadingDataView();
+            controller.clearSort(columnView.column);
+            draw();
+            for (final ColumnActionListener<V> listener : columnView.listeners) {
+                listener.onClearSort();
+            }
+        }
+
+        @Override
+        public void filter(final Object key, final BiPredicate<V, Supplier<Object>> filter, final boolean reinforcing) {
+            if (!columnView.column.isFilterable()) return;
+            showLoadingDataView();
+            controller.setFilter(key, columnView.column, filter, reinforcing);
+            draw();
+            for (final ColumnActionListener<V> listener : columnView.listeners) {
+                listener.onFilter(key, filter, reinforcing);
+            }
+        }
+
+        @Override
+        public void clearFilter(final Object key) {
+            if (!columnView.column.isFilterable()) return;
+            showLoadingDataView();
+            controller.clearFilter(key);
+            draw();
+            for (final ColumnActionListener<V> listener : columnView.listeners) {
+                listener.onClearFilter(key);
+            }
+        }
+
+        @Override
+        public void redraw(final boolean clearRenderingHelpers) {
+            showLoadingDataView();
+            if (clearRenderingHelpers) controller.clearRenderingHelpers(columnView.column);
+            onUpdateRows(0, controller.getRowCount());
+            draw();
+            for (final ColumnActionListener<V> listener : columnView.listeners) {
+                listener.onRedraw(clearRenderingHelpers);
+            }
+        }
+
+        @Override
+        public void clearFilters() {
+            if (!columnView.column.isFilterable()) return;
+            showLoadingDataView();
+            controller.clearFilters(columnView.column);
+            draw();
+            for (final ColumnActionListener<V> listener : columnView.listeners) {
+                listener.onClearFilters();
+            }
+        }
+
+        @Override
+        public void setState(final State state) {
+            if (columnView.state == state) return;
+
+            if (state.isShown() && !columnView.state.isShown()) {
+                show(columnView);
+            } else if (!state.isShown() && columnView.state.isShown()) {
+                hide(columnView);
+                clearFilters();
+            }
+
+            if (state.isPinned() && !columnView.state.isPinned()) {
+                pin(columnView);
+            } else if (!state.isPinned() && columnView.state.isPinned()) {
+                unpin(columnView);
+            }
+
+            columnView.state = state;
+            columnView.notifyStateChangedListeners();
+        }
+
+    }
+
+    private class ColumnView {
+
+        private final int id = columnViewSequence++;
+        private final ColumnDefinition<V> column;
+        private int width;
+        private State state;
+        private boolean visible = true;
+        private final Set<ColumnActionListener<V>> listeners = new HashSet<>();
+        private final Map<K, ExtendedCellHandler> extendedCells = new HashMap<>();
+
+        public ColumnView(final ColumnDefinition<V> column) {
+            super();
+            this.column = column;
+            this.width = column.getDefaultWidth();
+            this.state = column.getDefaultState();
+        }
+
+        String getWidthAsString() {
+            return width + "px";
+        }
+
+        void notifyStateChangedListeners() {
+            for (final ColumnActionListener<V> listener : listeners) {
+                listener.onStateChanged(state);
+            }
+        }
+
+        void notifyResizedListeners() {
+            for (final ColumnActionListener<V> listener : listeners) {
+                listener.onResized(width);
+            }
+        }
+    }
+
+    private class DataGridModelWrapper extends SpyDataGridModel<K, V> {
+
+        DataGridModelWrapper(final DataGridModel<K, V> model) {
+            super(model);
+        }
+
+        @Override
+        protected void onDataUpdate() {
+            if (delayedDrawRunnable == null) {
+                draw();
+            }
+        }
+
+        @Override
+        public V removeData(final K k) {
+            final V v = super.removeData(k);
+            for (final ColumnView columnView : columnViews.values()) {
+                columnView.extendedCells.remove(k);
+            }
+            return v;
+        }
+    }
+
+    private static class HideScrollBarAddon extends PAddOnComposite<PComplexPanel> {
+
+        HideScrollBarAddon(final PComplexPanel root) {
+            super(root);
+        }
+    }
+
+    private class Addon extends PAddOnComposite<PComplexPanel> {
+
+        Addon() {
+            super(root);
+            setTerminalHandler(e -> {
+                final JsonObject json = e.getData();
+                if (json.containsKey(ADDON_ROW_KEY)) {
+                    onScroll(json.getInt(ADDON_ROW_KEY));
+                } else if (json.containsKey(ADDON_ROW_COUNT_KEY)) {
+                    onRelativeRowCountUpdated(json.getInt(ADDON_ROW_COUNT_KEY));
+                } else if (json.containsKey(ADDON_COLUMN_VISIBILITY)) {
+                    onColumnVisibilityChanged(json.getJsonArray(ADDON_COLUMN_ID), json.getJsonArray(ADDON_COLUMN_VISIBILITY));
+                } else if (json.containsKey(ADDON_COLUMN_WIDTH)) {
+                    onColumnResized(json.getInt(ADDON_COLUMN_ID), //
+                        json.getInt(ADDON_COLUMN_WIDTH));
+                } else if (json.containsKey(ADDON_COLUMN_TO)) {
+                    onColumnMoved(json.getInt(ADDON_COLUMN_ID), json.getInt(ADDON_COLUMN_TO));
+                }
+            });
+        }
+
+        public void updateRowHeight(final int index) {
+            callTerminalMethod("updateRowHeight", index);
+        }
+
+        public void updateExtendedRowHeight(final int index) {
+            callTerminalMethod("updateExtendedRowHeight", index);
+        }
+
+        public void onDataUpdated(final int absRowCount, final int relRowCount, final int firstRowIndex) {
+            callTerminalMethod("onDataUpdated", absRowCount, relRowCount, firstRowIndex);
+        }
+
+        public void onColumnAdded(final int id, final int colMinWidth, final int colMaxWidth, final boolean pinned) {
+            callTerminalMethod("onColumnAdded", id, colMinWidth, colMaxWidth, pinned);
+        }
+
+        public void scrollToTop() {
+            callTerminalMethod("scrollToTop");
+        }
+
+        public void checkPosition() {
+            callTerminalMethod("checkPosition");
+        }
+    }
+
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/SimpleDataSource.java b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/SimpleDataSource.java
new file mode 100644
index 00000000..38ef496a
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/SimpleDataSource.java
@@ -0,0 +1,216 @@
+/*
+ * Copyright (c) 2020 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.ui.datagrid2;
+
+import java.util.ArrayList;
+import java.util.Comparator;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.Set;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.ponysdk.core.ui.datagrid2.SimpleDataGridController.Column;
+import com.ponysdk.core.ui.datagrid2.SimpleDataGridController.ColumnControllerSort;
+import com.ponysdk.core.ui.datagrid2.SimpleDataGridController.RenderingHelpersCache;
+import com.ponysdk.core.ui.datagrid2.SimpleDataGridController.Row;
+
+public abstract class SimpleDataSource<K, V> implements DataGridSource<K, V> {
+
+    protected static final Logger log = LoggerFactory.getLogger(SimpleDataSource.class);
+    protected final LinkedHashMap<Object, Comparator<Row<V>>> sorts = new LinkedHashMap<>();
+    protected final Map<Object, AbstractFilter<V>> filters = new HashMap<>();
+    protected final List<Row<V>> liveSelectedData = new ArrayList<>();
+    protected final Set<K> selectedKeys = new HashSet<>();
+    protected DataGridAdapter<K, V> adapter;
+    protected RenderingHelpersCache<V> renderingHelpersCache; //FIXME : listener de dataSource
+    protected int rowCounter = 0;
+
+    //---------------------------------------//
+    //------------ Getters/Setters ----------//
+    //---------------------------------------//
+    @Override
+    public List<Row<V>> getLiveSelectedData() {
+        return liveSelectedData;
+    }
+
+    @Override
+    public void setAdapter(final DataGridAdapter<K, V> adapter) {
+        this.adapter = adapter;
+    }
+
+    @Override
+    public void setRenderingHelpersCache(final RenderingHelpersCache<V> renderingHelpersCache) {
+        this.renderingHelpersCache = renderingHelpersCache;
+    }
+
+    //------------------------------------------------//
+    //-- BinarySearch insertion, removal, findIndex --//
+    //------------------------------------------------//
+    protected int insertRow(final List<Row<V>> rows, final Row<V> row) {
+        if (rows.size() == 0) {
+            rows.add(row);
+            return 0;
+        }
+        if (compare(row, rows.get(0)) < 0) { //common case
+            rows.add(0, row);
+            return 0;
+        }
+        int left = 1;
+        int right = rows.size() - 1;
+        int index = left;
+        int diff = 1;
+        while (left <= right) {
+            index = left + right >> 1;
+            final Row<V> middleRow = rows.get(index);
+            diff = compare(middleRow, row);
+            if (diff < 0) left = index + 1;
+            else if (diff > 0) right = index - 1;
+            else throw new IllegalArgumentException(
+                "Cannot insert an already existing row : existing=" + middleRow.data + ", new=" + row.data);
+        }
+        if (diff < 0) index++;
+        rows.add(index, row);
+        return index;
+    }
+
+    protected int removeRow(final List<Row<V>> rows, final Row<V> row) {
+        final int rowIndex = findRowIndex(rows, row);
+        if (rowIndex < 0) return rowIndex;
+        rows.remove(rowIndex);
+        return rowIndex;
+    }
+
+    private int findRowIndex(final List<Row<V>> rows, final Row<V> row) {
+        int left = 0;
+        int right = rows.size() - 1;
+        while (left <= right) {
+            final int middle = left + right >> 1;
+            final Row<V> r = rows.get(middle);
+            final int diff = compare(r, row);
+            if (diff < 0) left = middle + 1;
+            else if (diff > 0) right = middle - 1;
+            else return middle;
+        }
+        return -1;
+    }
+
+    protected final int compare(final Row<V> r1, final Row<V> r2) {
+
+        for (final Comparator<Row<V>> sort : sorts.values()) {
+            final int diff = sort.compare(r1, r2);
+            if (diff != 0) return diff;
+        }
+        final int diff = adapter.compareDefault(r1.data, r2.data);
+        if (diff != 0) return diff;
+
+        return adapter.isAscendingSortByInsertionOrder() ? r1.id - r2.id : r2.id - r1.id;
+    }
+
+    //------------------------------------//
+    //------------- Sorting --------------//
+    //------------------------------------//
+    @Override
+    public void addSort(final Column<V> column, final ColumnControllerSort colSort, final boolean asc) {
+        final ColumnControllerSort tmpColSort = (ColumnControllerSort) sorts.get(column);
+        if (tmpColSort != null && tmpColSort.asc == asc) return;
+        sorts.put(column, colSort);
+        sort();
+    }
+
+    @Override
+    public void addSort(final Object key, final Comparator<Row<V>> comparator) {
+        sorts.put(key, comparator);
+        sort();
+    }
+
+    @Override
+    public Comparator<Row<V>> clearSort(final Column<V> column) {
+        return sorts.remove(column);
+    }
+
+    @Override
+    public Comparator<Row<V>> clearSort(final Object key) {
+        return sorts.remove(key);
+    }
+
+    @Override
+    public void clearSorts() {
+        sorts.clear();
+        sort();
+    }
+
+    @Override
+    public void sort() {
+        liveSelectedData.sort(this::compare);
+    }
+
+    @Override
+    public Set<Entry<Object, Comparator<Row<V>>>> getSortsEntry() {
+        return sorts.entrySet();
+    }
+
+    //------------------------//
+    //------- Filtering ------//
+    //------------------------//
+    @Override
+    public AbstractFilter<V> clearFilter(final Object key) {
+        return filters.remove(key);
+    }
+
+    @Override
+    public void clearFilters(final ColumnDefinition<V> column) {
+        final Iterator<AbstractFilter<V>> iterator = filters.values().iterator();
+        while (iterator.hasNext()) {
+            final AbstractFilter<V> filter = iterator.next();
+            final ColumnDefinition<V> filterColumn = filter.getColumnDefinition();
+            if (filterColumn != null && filterColumn == column) iterator.remove();
+        }
+    }
+
+    @Override
+    public void clearFilters() {
+        filters.clear();
+    }
+
+    //------------------------//
+    //------ Selecting -------//
+    //------------------------//
+    @Override
+    public boolean isSelected(final K k) {
+        return selectedKeys.contains(k);
+    }
+
+    @Override
+    public void unselectAllData() {
+        liveSelectedData.clear();
+        selectedKeys.clear();
+    }
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/SpyDataGridModel.java b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/SpyDataGridModel.java
new file mode 100644
index 00000000..259e1001
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/SpyDataGridModel.java
@@ -0,0 +1,103 @@
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.ui.datagrid2;
+
+import java.util.Collection;
+import java.util.Map;
+import java.util.function.Consumer;
+
+/**
+ * @author mbagdouri
+ */
+public abstract class SpyDataGridModel<K, V> implements DataGridModel<K, V> {
+
+    private final DataGridModel<K, V> model;
+
+    public SpyDataGridModel(final DataGridModel<K, V> model) {
+        super();
+        this.model = model;
+    }
+
+    @Override
+    public void setData(final V v) {
+        model.setData(v);
+        if (model.getBound()) {
+            onDataUpdate();
+        }
+    }
+
+    @Override
+    public void setData(final Collection<V> c) {
+        model.setData(c);
+        if (model.getBound()) onDataUpdate();
+    }
+
+    @Override
+    public void updateData(final K k, final Consumer<V> updater) {
+        model.updateData(k, updater);
+        if (model.getBound()) onDataUpdate();
+    }
+
+    @Override
+    public void updateData(final Map<K, Consumer<V>> updaters) {
+        model.updateData(updaters);
+        if (model.getBound()) onDataUpdate();
+    }
+
+    @Override
+    public V getData(final K k) {
+        return model.getData(k);
+    }
+
+    @Override
+    public V removeData(final K k) {
+        final V v = model.removeData(k);
+        if (model.getBound()) onDataUpdate();
+        return v;
+    }
+
+    //    @Override
+    //    public void forEach(final BiConsumer<K, V> action) {
+    //        model.forEach(action);
+    //    }
+
+    //    @Override
+    //    public int size() {
+    //        return model.size();
+    //    }
+
+    @Override
+    public void setBound(final boolean bound) {
+        final boolean wasBound = model.getBound();
+        model.setBound(bound);
+        if (!wasBound && model.getBound()) onDataUpdate();
+    }
+
+    @Override
+    public boolean getBound() {
+        return model.getBound();
+    }
+
+    protected abstract void onDataUpdate();
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/TextBoxExtendedCell.java b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/TextBoxExtendedCell.java
new file mode 100644
index 00000000..97134f6a
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/TextBoxExtendedCell.java
@@ -0,0 +1,109 @@
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.ui.datagrid2;
+
+import java.util.function.BiConsumer;
+
+import com.ponysdk.core.ui.basic.Element;
+import com.ponysdk.core.ui.basic.PTextBox;
+import com.ponysdk.core.ui.basic.PWidget;
+import com.ponysdk.core.ui.basic.event.PBlurEvent;
+import com.ponysdk.core.ui.basic.event.PBlurHandler;
+import com.ponysdk.core.ui.model.PEventType;
+import com.ponysdk.core.ui.model.PKeyCodes;
+
+/**
+ * @author mbagdouri
+ */
+public class TextBoxExtendedCell<V> implements ExtendedCell<V>, PBlurHandler {
+
+    private final PTextBox textBox = Element.newPTextBox();
+    private ExtendedCellController<V> extendedCellController;
+    private boolean focused = false;
+
+    public TextBoxExtendedCell(final String text, final BiConsumer<V, String> columnEditFn, final int width) {
+        textBox.setText(text);
+        textBox.addBlurHandler(e -> {
+            if (extendedCellController == null) return;
+            extendedCellController.cancelExtendedMode();
+        });
+        textBox.addClickHandler(e -> {
+
+        });
+        textBox.stopEvent(PEventType.ONCLICK);
+        textBox.setEnabledOnRequest(true);
+        textBox.addKeyUpHandler(e -> {
+            if (extendedCellController == null) return;
+            if (e.getKeyCode() == PKeyCodes.ENTER.getCode()) {
+                extendedCellController.cancelExtendedMode();
+                extendedCellController.updateValue((v) -> columnEditFn.accept(v, textBox.getText()));
+            } else if (e.getKeyCode() == PKeyCodes.ESCAPE.getCode()) {
+                extendedCellController.cancelExtendedMode();
+            }
+        });
+        textBox.addFocusHandler(e -> {
+            focused = true;
+        });
+        textBox.setWidth(width + "px");
+    }
+
+    @Override
+    public PWidget asWidget() {
+        return textBox;
+    }
+
+    @Override
+    public void setController(final ExtendedCellController<V> extendedCellController) {
+        this.extendedCellController = extendedCellController;
+    }
+
+    @Override
+    public void select() {
+    }
+
+    @Override
+    public void unselect() {
+    }
+
+    @Override
+    public void setValue(final V v) {
+    }
+
+    @Override
+    public void beforeRemove() {
+        textBox.removeDomHandler(this, PBlurEvent.TYPE);
+    }
+
+    @Override
+    public void afterAdd() {
+        if (focused) textBox.focusPreventScroll();
+        textBox.addBlurHandler(this);
+    }
+
+    @Override
+    public void onBlur(final PBlurEvent event) {
+        focused = false;
+    }
+
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/WidgetDecoratorDataGridView.java b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/WidgetDecoratorDataGridView.java
new file mode 100644
index 00000000..05ae9836
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/datagrid2/WidgetDecoratorDataGridView.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.ui.datagrid2;
+
+import com.ponysdk.core.ui.basic.PWidget;
+
+/**
+ * @author mbagdouri
+ */
+public abstract class WidgetDecoratorDataGridView<K, V> extends DecoratorDataGridView<K, V> {
+
+    protected WidgetDecoratorDataGridView(final DataGridView<K, V> view) {
+        super(view);
+    }
+
+    public abstract PWidget getDecoratorWidget();
+
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/form/formfield/AbstractFormField.java b/ponysdk/src/main/java/com/ponysdk/core/ui/form/formfield/AbstractFormField.java
index 688797ba..db99859f 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/form/formfield/AbstractFormField.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/form/formfield/AbstractFormField.java
@@ -173,7 +173,7 @@ public abstract class AbstractFormField<T, W extends IsPWidget> implements FormF
 
     @Override
     public Collection<PValueChangeHandler<T>> getValueChangeHandlers() {
-        return handlers == null ? Collections.emptyList() : Collections.unmodifiableCollection(handlers);
+        return Collections.unmodifiableCollection(handlers);
     }
 
     protected void fireValueChange(final T value) {
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/form2/FieldValidator.java b/ponysdk/src/main/java/com/ponysdk/core/ui/form2/FieldValidator.java
deleted file mode 100644
index 61ab58cc..00000000
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/form2/FieldValidator.java
+++ /dev/null
@@ -1,8 +0,0 @@
-package com.ponysdk.core.ui.form2;
-
-@FunctionalInterface
-public interface FieldValidator {
-
-    ValidationResult isValid(String value);
-
-}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/form2/FormField.java b/ponysdk/src/main/java/com/ponysdk/core/ui/form2/FormField.java
deleted file mode 100644
index dbee9072..00000000
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/form2/FormField.java
+++ /dev/null
@@ -1,211 +0,0 @@
-package com.ponysdk.core.ui.form2;
-
-import com.ponysdk.core.ui.basic.*;
-
-import java.util.Objects;
-
-public abstract class FormField<V, W extends PWidget> implements IsPWidget {
-
-    private static String STYLE_FORM_FIELD = "form-field";
-    private static String STYLE_CAPTION = "caption";
-    private static String STYLE_INNER_WIDGET = "inner-widget";
-
-    private static String ATTR_REQUIRED = "required";
-    private static String ATTR_ERROR = "error";
-    private static String ATTR_DIFF = "diff";
-
-    private static ValidationResult OK_RESULT = ValidationResult.OK();
-    public static ValidationResult REQUIRED_RESULT = ValidationResult.KO("Required Field");
-
-    protected W innerWidget;
-    protected V initialValue;
-
-    private String caption;
-    private boolean required;
-    private PElement captionSpan;
-
-    protected PFlowPanel widget;
-    protected FieldValidator validator;
-
-    public FormField() {
-        this(null, false);
-    }
-
-    public FormField(final boolean required) {
-        this(null, required);
-    }
-
-    public FormField(final String caption) {
-        this(caption, false);
-    }
-
-    public FormField(final String caption, final boolean required) {
-        this.caption = caption;
-        this.required = required;
-    }
-
-    public ValidationResult validate() {
-        if (!isEnabled()) {
-            clean();
-            return OK_RESULT;
-        }
-
-        ValidationResult result = OK_RESULT;
-
-        final String stringValue = getStringValue();
-
-        if (required && Objects.requireNonNullElse(stringValue, "").isEmpty()) {
-            result = REQUIRED_RESULT;
-        } else if (validator != null) {
-            result = validator.isValid(stringValue);
-        }
-
-        if (result.isValid()) {
-            cleanError();
-        } else {
-            error(result.getErrorMessage());
-        }
-
-        checkDiff();
-
-        return result;
-    }
-
-    public boolean hasDiff() {
-        return widget.hasAttribute(ATTR_DIFF);
-    }
-
-    private void clean() {
-        cleanError();
-        cleanDiff();
-    }
-
-    public void reset() {
-        clean();
-        afterReset();
-    }
-
-    protected void error(final String message) {
-        widget.setAttribute(ATTR_ERROR, message);
-    }
-
-    protected void cleanError() {
-        widget.removeAttribute(ATTR_ERROR);
-    }
-
-    private void diff() {
-        widget.setAttribute(ATTR_DIFF);
-    }
-
-    protected void cleanDiff() {
-        widget.removeAttribute(ATTR_DIFF);
-    }
-
-    private void afterReset() {
-        setValue(initialValue);
-        checkDiff();
-    }
-
-    protected void checkDiff() {
-        if (initialValue == null) {
-            cleanDiff();
-            return;
-        }
-
-        if (!initialValue.equals(getValue())) {
-            diff();
-        } else {
-            cleanDiff();
-        }
-    }
-
-    public void setValidator(final FieldValidator validator) {
-        this.validator = validator;
-    }
-
-    public void setInitialValue(final V initialValue) {
-        this.initialValue = initialValue;
-        checkDiff();
-    }
-
-    public V getInitialValue() {
-        return initialValue;
-    }
-
-    public void setValue(final V value, final boolean isInitialValue) {
-        setValue(value);
-        if (isInitialValue) {
-            setInitialValue(value);
-        }
-    }
-
-    public W getInnerWidget() {
-        return innerWidget;
-    }
-
-    private void initGUI() {
-        widget.addStyleName(STYLE_FORM_FIELD);
-        if (required) widget.setAttribute(ATTR_REQUIRED);
-
-        updateCaption();
-
-        innerWidget = createInnerWidget();
-        innerWidget.addStyleName(STYLE_INNER_WIDGET);
-        widget.add(innerWidget);
-    }
-
-    private void updateCaption() {
-        if (caption == null && captionSpan == null) {
-            return;
-        }
-
-        if (caption == null) {
-            captionSpan.setVisible(false);
-            return;
-        }
-
-        if (captionSpan == null) {
-            captionSpan = Element.newSpan();
-            captionSpan.addStyleName(STYLE_CAPTION);
-            widget.add(captionSpan);
-        }
-
-        captionSpan.setInnerText(caption);
-        captionSpan.setVisible(true);
-
-    }
-
-    protected void afterInitGUI() {
-    }
-
-    public void setCaption(String caption) {
-        this.caption = caption;
-        updateCaption();
-    }
-
-    public String getCaption() {
-        return caption;
-    }
-
-    @Override
-    public PWidget asWidget() {
-        if (widget == null) {
-            widget = Element.newPFlowPanel();
-            initGUI();
-            afterInitGUI();
-        }
-        return widget;
-    }
-
-    protected abstract W createInnerWidget();
-
-    public abstract void setEnabled(final boolean enabled);
-
-    public abstract boolean isEnabled();
-
-    public abstract String getStringValue();
-
-    public abstract V getValue();
-
-    public abstract void setValue(V value);
-}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/form2/StringTextBoxFormField.java b/ponysdk/src/main/java/com/ponysdk/core/ui/form2/StringTextBoxFormField.java
deleted file mode 100644
index 37e35d48..00000000
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/form2/StringTextBoxFormField.java
+++ /dev/null
@@ -1,62 +0,0 @@
-package com.ponysdk.core.ui.form2;
-
-import com.ponysdk.core.ui.basic.Element;
-import com.ponysdk.core.ui.basic.PTextBox;
-import com.ponysdk.core.ui.basic.PWidget;
-
-public class StringTextBoxFormField extends FormField<String, PTextBox> {
-    public StringTextBoxFormField() {
-        super();
-    }
-
-    public StringTextBoxFormField(String caption) {
-        super(caption);
-    }
-
-    public StringTextBoxFormField(boolean required) {
-        super(required);
-    }
-
-    public StringTextBoxFormField(String caption, boolean required) {
-        super(caption, required);
-    }
-
-    @Override
-    protected PTextBox createInnerWidget() {
-        return Element.newPTextBox();
-    }
-
-    @Override
-    protected void afterInitGUI() {
-        innerWidget.setTabindex(PWidget.TabindexMode.TABULABLE);
-        innerWidget.addBlurHandler((e) -> validate());
-        innerWidget.addValueChangeHandler((e) -> validate());
-    }
-
-    @Override
-    public void setEnabled(boolean enabled) {
-        innerWidget.setEnabled(enabled);
-    }
-
-    @Override
-    public boolean isEnabled() {
-        return innerWidget.isEnabled();
-    }
-
-    @Override
-    public String getStringValue() {
-        return innerWidget.getText();
-    }
-
-    @Override
-    public String getValue() {
-        return innerWidget.getText();
-    }
-
-    @Override
-    public void setValue(String value) {
-        innerWidget.setText(value);
-        checkDiff();//??
-    }
-
-}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/form2/ValidationResult.java b/ponysdk/src/main/java/com/ponysdk/core/ui/form2/ValidationResult.java
deleted file mode 100644
index 2cd13361..00000000
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/form2/ValidationResult.java
+++ /dev/null
@@ -1,57 +0,0 @@
-package com.ponysdk.core.ui.form2;
-
-public class ValidationResult {
-
-    private static final ValidationResult OK_RESULT = new ValidationResult(true, null, null);
-
-    private boolean valid;
-    private String errorMessage;
-    private Object data;
-
-    private ValidationResult(boolean valid, String errorMessage, Object data) {
-        this.valid = valid;
-        this.errorMessage = errorMessage;
-        this.data = data;
-    }
-
-    public static ValidationResult OK() {
-        return OK_RESULT;
-    }
-
-    public static ValidationResult OK(final Object data) {
-        return newValidationResult(true, null, data);
-    }
-
-    public static ValidationResult KO(final String errorMessage) {
-        return KO(errorMessage, null);
-    }
-
-    public static ValidationResult KO(final String errorMessage, final Object data) {
-        return new ValidationResult(false, errorMessage, data);
-    }
-
-    public static ValidationResult newValidationResult(final boolean valid, String errorMessage, final Object data) {
-        return new ValidationResult(valid, errorMessage, data);
-    }
-
-    public String getErrorMessage() {
-        return errorMessage;
-    }
-
-    public boolean isValid() {
-        return valid;
-    }
-
-    public Object getData() {
-        return data;
-    }
-
-    @Override
-    public String toString() {
-        return "ValidationResult{" +
-                "valid=" + valid +
-                ", errorMessage='" + errorMessage + '\'' +
-                ", data=" + data +
-                '}';
-    }
-}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/formatter/TextFunction.java b/ponysdk/src/main/java/com/ponysdk/core/ui/formatter/TextFunction.java
index 5f4b20e8..80dd59cc 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/formatter/TextFunction.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/formatter/TextFunction.java
@@ -38,12 +38,12 @@ public class TextFunction {
     /**
      * Sample :
      * <ul>
-     * <li><pre>javaFunction : args -&#62; { System.out.println(args[0] + " " + args[1]); return (String) args[0]; }</pre></li>
+     * <li>javaFunction : args -> { System.out.println(args[0] + " " + args[1]); return (String) args[0]; }</li>
      * <li>jsFunction : console.log(args[0] + \" \" + args[1]); return args[0]</li>
      * </ul>
      *
      * @param javaFunction The java function.
-     * @param jsFunction   The js function.
+     * @param jsFunction The js function.
      */
     public TextFunction(final Function<Object[], String> javaFunction, final String jsFunction) {
         super();
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/main/EntryPoint.java b/ponysdk/src/main/java/com/ponysdk/core/ui/main/EntryPoint.java
index a26ce1a1..711a3855 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/main/EntryPoint.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/ui/main/EntryPoint.java
@@ -33,8 +33,6 @@ public interface EntryPoint {
 
     /**
      * Newly created session.
-     *
-     * @param uiContext
      */
     void start(UIContext uiContext);
 
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/scene/AbstractScene.java b/ponysdk/src/main/java/com/ponysdk/core/ui/scene/AbstractScene.java
deleted file mode 100644
index 797a53ea..00000000
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/scene/AbstractScene.java
+++ /dev/null
@@ -1,148 +0,0 @@
-
-package com.ponysdk.core.ui.scene;
-
-import com.ponysdk.core.ui.basic.PObject;
-import com.ponysdk.core.ui.basic.PWidget;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public abstract class AbstractScene implements Scene {
-
-    private static final String STYLE = "scene";
-
-    private PWidget widget;
-
-    private boolean started = false;
-    private boolean firstStart = true;
-
-    private final String id;
-    private final String name;
-    private final String token;
-
-    private List<Listener> listeners;
-
-    protected AbstractScene(final String id, final String name, String token) {
-        this.id = id;
-        this.name = name;
-        this.token = token;
-    }
-
-    @Override
-    public final void start() {
-        if (started) return;
-        fireStarting();
-
-        if (firstStart) {
-            try {
-                if (widget == null) {
-                    widget = buildGUI();
-                }
-                if (!widget.isInitialized()) {
-                    widget.addInitializeListener(this::onInit);
-                } else {
-                    onInit(widget);
-                }
-            } finally {
-                firstStart = false;
-            }
-        } else {
-            started();
-        }
-    }
-
-    private void started() {
-        started = true;
-        widget.setAttribute("started", "true");
-        onStart();
-        fireStarted();
-    }
-
-    private void onInit(PObject w) {
-        onFirstStart();
-        initHandlers();
-        started();
-    }
-
-    @Override
-    public final void stop() {
-        if (!started) return;
-        fireStopping();
-        onStop();
-        widget.setAttribute("started", "false");
-        started = false;
-        fireStopped();
-    }
-
-    @Override
-    public PWidget asWidget() {
-        if (widget == null) {
-            widget = buildGUI();
-            widget.setAttribute("started", "false");
-            widget.addStyleName(STYLE);
-        }
-        return widget;
-    }
-
-    @Override
-    public String getId() {
-        return id;
-    }
-
-    @Override
-    public String getName() {
-        return name;
-    }
-
-    @Override
-    public String getToken() {
-        return token;
-    }
-
-    @Override
-    public boolean isStarted() {
-        return started;
-    }
-
-    @Override
-    public void addLifeCycleListener(Listener listener) {
-        if (listeners == null) listeners = new ArrayList<>();
-        listeners.add(listener);
-    }
-
-    private void fireStarting() {
-        listeners.forEach(l -> l.starting(this));
-    }
-
-    private void fireStarted() {
-        listeners.forEach(l -> l.started(this));
-    }
-
-    private void fireStopping() {
-        listeners.forEach(l -> l.stopping(this));
-    }
-
-    private void fireStopped() {
-        listeners.forEach(l -> l.stopped(this));
-    }
-
-    @Override
-    public void removeLifeCycleListener(Listener listener) {
-        if (listeners != null) listeners.remove(listener);
-    }
-
-    protected void initHandlers() {
-    }
-
-    protected void onFirstStart() {
-    }
-
-    protected void onStart() {
-    }
-
-    protected void onStop() {
-    }
-
-    public abstract PWidget buildGUI();
-
-}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/scene/Router.java b/ponysdk/src/main/java/com/ponysdk/core/ui/scene/Router.java
deleted file mode 100644
index e17262b4..00000000
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/scene/Router.java
+++ /dev/null
@@ -1,95 +0,0 @@
-
-package com.ponysdk.core.ui.scene;
-
-import com.ponysdk.core.server.application.UIContext;
-import com.ponysdk.core.ui.basic.PSimplePanel;
-import com.ponysdk.core.ui.basic.event.PValueChangeEvent;
-import com.ponysdk.core.ui.basic.event.PValueChangeHandler;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.*;
-
-/**
- * Router : synchronise a vue (scene) to the browser history
- * To navigate between scene, Router use History callback mechanism
- * We ca also navigate programmatically to a specific scene
- */
-public class Router implements PValueChangeHandler<String> {
-    private static final Logger log = LoggerFactory.getLogger(Router.class);
-
-    private final String name;
-    private Map<String, Scene> scenes = new HashMap<>();
-    private Scene activeScene;
-    private PSimplePanel layout;
-    private SceneListener listener = new SceneListener();
-
-    public Router(String name) {
-        this.name = name;
-        UIContext.get().getHistory().addValueChangeHandler(this);
-    }
-
-    public void push(Scene scene) {
-        scenes.put(scene.getToken(), scene);
-        scene.addLifeCycleListener(listener);
-    }
-
-    public void go(String sceneID) {
-        if (!scenes.containsKey(sceneID)) {
-            log.warn("scene {} not found in the router {}", sceneID, name);
-        } else {
-            UIContext.get().getHistory().newItem(sceneID, true);
-        }
-    }
-
-    @Override
-    public void onValueChange(PValueChangeEvent<String> event) {
-        final Scene scene = scenes.get(event.getData());
-
-        if (scene == null) {
-            return;
-        }
-
-        if (layout == null) {
-            log.warn("Layout not set in the router {}", name);
-            return;
-        }
-
-        if (activeScene == null || !Objects.equals(activeScene.getId(), scene.getId())) {
-            selectScene(scene);
-        }
-    }
-
-    private void selectScene(Scene scene) {
-        if (activeScene != null) {
-            activeScene.stop();
-        }
-
-        activeScene = scene;
-        layout.setWidget(activeScene);
-        activeScene.start();
-    }
-
-    public void setLayout(PSimplePanel layout) {
-        this.layout = layout;
-    }
-
-    private class SceneListener implements Scene.Listener {
-
-        @Override
-        public void starting(Scene source) {
-        }
-
-        @Override
-        public void started(Scene source) {
-        }
-
-        @Override
-        public void stopping(Scene source) {
-        }
-
-        @Override
-        public void stopped(Scene source) {
-        }
-    }
-}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/scene/Scene.java b/ponysdk/src/main/java/com/ponysdk/core/ui/scene/Scene.java
deleted file mode 100644
index 45af67a5..00000000
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/scene/Scene.java
+++ /dev/null
@@ -1,33 +0,0 @@
-package com.ponysdk.core.ui.scene;
-
-import com.ponysdk.core.ui.basic.IsPWidget;
-
-import java.util.EventListener;
-
-public interface Scene extends IsPWidget {
-    String getId();
-
-    String getName();
-
-    String getToken();
-
-    void start();
-
-    void stop();
-
-    boolean isStarted();
-
-    void addLifeCycleListener(Scene.Listener listener);
-
-    void removeLifeCycleListener(Scene.Listener listener);
-
-    interface Listener extends EventListener {
-        void starting(Scene source);
-
-        void started(Scene source);
-
-        void stopping(Scene source);
-
-        void stopped(Scene source);
-    }
-}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/useragent/OperatingSystem.java b/ponysdk/src/main/java/com/ponysdk/core/useragent/OperatingSystem.java
index 911494c7..7a171499 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/useragent/OperatingSystem.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/useragent/OperatingSystem.java
@@ -29,181 +29,181 @@ import java.util.List;
 public enum OperatingSystem {
 
     // the order is important since the agent string is being compared with the aliases
-    XBOX_360(Manufacturer.MICROSOFT, null, 1, "Xbox 360", new String[]{"Xbox"}, null, DeviceType.GAME_CONSOLE, null),
-    XBOX_ONE(Manufacturer.MICROSOFT, OperatingSystem.XBOX_360, 1, "Xbox One", new String[]{"Xbox One"}, null,
+    XBOX_360(Manufacturer.MICROSOFT, null, 1, "Xbox 360", new String[] { "Xbox" }, null, DeviceType.GAME_CONSOLE, null),
+    XBOX_ONE(Manufacturer.MICROSOFT, OperatingSystem.XBOX_360, 1, "Xbox One", new String[] { "Xbox One" }, null,
             DeviceType.GAME_CONSOLE, null),
 
     /**
      * Windows Mobile / Windows CE. Exact version unknown.
      */
-    WINDOWS(Manufacturer.MICROSOFT, null, 1, "Windows", new String[]{"Windows"}, new String[]{"Palm"}, DeviceType.COMPUTER,
+    WINDOWS(Manufacturer.MICROSOFT, null, 1, "Windows", new String[] { "Windows" }, new String[] { "Palm" }, DeviceType.COMPUTER,
             null), // catch the rest of older Windows systems (95, NT,...)
-    WINDOWS_10(Manufacturer.MICROSOFT, OperatingSystem.WINDOWS, 24, "Windows 10", new String[]{"Windows NT 10.0"}, null,
+    WINDOWS_10(Manufacturer.MICROSOFT, OperatingSystem.WINDOWS, 24, "Windows 10", new String[] { "Windows NT 10.0" }, null,
             DeviceType.COMPUTER, null),
-    WINDOWS_8_1(Manufacturer.MICROSOFT, OperatingSystem.WINDOWS, 23, "Windows 8.1", new String[]{"Windows NT 6.3"}, null,
+    WINDOWS_8_1(Manufacturer.MICROSOFT, OperatingSystem.WINDOWS, 23, "Windows 8.1", new String[] { "Windows NT 6.3" }, null,
             DeviceType.COMPUTER, null),
-    WINDOWS_8(Manufacturer.MICROSOFT, OperatingSystem.WINDOWS, 22, "Windows 8", new String[]{"Windows NT 6.2"}, null,
+    WINDOWS_8(Manufacturer.MICROSOFT, OperatingSystem.WINDOWS, 22, "Windows 8", new String[] { "Windows NT 6.2" }, null,
             DeviceType.COMPUTER, null),
-    WINDOWS_7(Manufacturer.MICROSOFT, OperatingSystem.WINDOWS, 21, "Windows 7", new String[]{"Windows NT 6.1"}, null,
+    WINDOWS_7(Manufacturer.MICROSOFT, OperatingSystem.WINDOWS, 21, "Windows 7", new String[] { "Windows NT 6.1" }, null,
             DeviceType.COMPUTER, null),
     WINDOWS_VISTA(Manufacturer.MICROSOFT, OperatingSystem.WINDOWS, 20, "Windows Vista",
-            new String[]{"Windows NT 6", "Windows NT 6.0"}, null, DeviceType.COMPUTER, null),
+            new String[] { "Windows NT 6", "Windows NT 6.0" }, null, DeviceType.COMPUTER, null),
     // Win
-    WINDOWS_2000(Manufacturer.MICROSOFT, OperatingSystem.WINDOWS, 15, "Windows 2000", new String[]{"Windows NT 5.0"}, null,
+    WINDOWS_2000(Manufacturer.MICROSOFT, OperatingSystem.WINDOWS, 15, "Windows 2000", new String[] { "Windows NT 5.0" }, null,
             DeviceType.COMPUTER, null), // before
     // Win
-    WINDOWS_XP(Manufacturer.MICROSOFT, OperatingSystem.WINDOWS, 10, "Windows XP", new String[]{"Windows NT 5"}, null,
+    WINDOWS_XP(Manufacturer.MICROSOFT, OperatingSystem.WINDOWS, 10, "Windows XP", new String[] { "Windows NT 5" }, null,
             DeviceType.COMPUTER, null), // before Win, 5.1 and 5.2 are basically XP systems
-    WINDOWS_MOBILE7(Manufacturer.MICROSOFT, OperatingSystem.WINDOWS, 51, "Windows Mobile 7", new String[]{"Windows Phone OS 7"},
+    WINDOWS_MOBILE7(Manufacturer.MICROSOFT, OperatingSystem.WINDOWS, 51, "Windows Mobile 7", new String[] { "Windows Phone OS 7" },
             null, DeviceType.MOBILE, null), // before Win
-    WINDOWS_MOBILE(Manufacturer.MICROSOFT, OperatingSystem.WINDOWS, 50, "Windows Mobile", new String[]{"Windows CE"}, null,
+    WINDOWS_MOBILE(Manufacturer.MICROSOFT, OperatingSystem.WINDOWS, 50, "Windows Mobile", new String[] { "Windows CE" }, null,
             DeviceType.MOBILE, null), // before Win
-    WINDOWS_98(Manufacturer.MICROSOFT, OperatingSystem.WINDOWS, 5, "Windows 98", new String[]{"Windows 98", "Win98"},
-            new String[]{"Palm"}, DeviceType.COMPUTER, null), // before Win
+    WINDOWS_98(Manufacturer.MICROSOFT, OperatingSystem.WINDOWS, 5, "Windows 98", new String[] { "Windows 98", "Win98" },
+            new String[] { "Palm" }, DeviceType.COMPUTER, null), // before Win
 
-    ANDROID(Manufacturer.GOOGLE, null, 0, "Android", new String[]{"Android"}, null, DeviceType.MOBILE, null),
+    ANDROID(Manufacturer.GOOGLE, null, 0, "Android", new String[] { "Android" }, null, DeviceType.MOBILE, null),
     /**
      * First Android 4 device is the Galaxy Nexus phone. Once there are also
      * Tablets with Android 4 we we will have to find a solution to distinguish
      * between mobile phones and tablets.
      */
-    ANDROID4(Manufacturer.GOOGLE, OperatingSystem.ANDROID, 4, "Android 4.x", new String[]{"Android 4", "Android-4"}, null,
+    ANDROID4(Manufacturer.GOOGLE, OperatingSystem.ANDROID, 4, "Android 4.x", new String[] { "Android 4", "Android-4" }, null,
             DeviceType.MOBILE, null),
-    ANDROID4_TABLET(Manufacturer.GOOGLE, OperatingSystem.ANDROID4, 40, "Android 4.x Tablet", new String[]{"Xoom", "Transformer"},
+    ANDROID4_TABLET(Manufacturer.GOOGLE, OperatingSystem.ANDROID4, 40, "Android 4.x Tablet", new String[] { "Xoom", "Transformer" },
             null, DeviceType.TABLET, null),
-    ANDROID3_TABLET(Manufacturer.GOOGLE, OperatingSystem.ANDROID, 30, "Android 3.x Tablet", new String[]{"Android 3"}, null,
+    ANDROID3_TABLET(Manufacturer.GOOGLE, OperatingSystem.ANDROID, 30, "Android 3.x Tablet", new String[] { "Android 3" }, null,
             DeviceType.TABLET, null), // as long as there are not Android 3.x phones this should be enough
-    ANDROID2(Manufacturer.GOOGLE, OperatingSystem.ANDROID, 2, "Android 2.x", new String[]{"Android 2"}, null, DeviceType.MOBILE,
+    ANDROID2(Manufacturer.GOOGLE, OperatingSystem.ANDROID, 2, "Android 2.x", new String[] { "Android 2" }, null, DeviceType.MOBILE,
             null),
     ANDROID2_TABLET(Manufacturer.GOOGLE, OperatingSystem.ANDROID2, 20, "Android 2.x Tablet",
-            new String[]{"Kindle Fire", "GT-P1000", "SCH-I800"}, null, DeviceType.TABLET, null),
-    ANDROID1(Manufacturer.GOOGLE, OperatingSystem.ANDROID, 1, "Android 1.x", new String[]{"Android 1"}, null, DeviceType.MOBILE,
+            new String[] { "Kindle Fire", "GT-P1000", "SCH-I800" }, null, DeviceType.TABLET, null),
+    ANDROID1(Manufacturer.GOOGLE, OperatingSystem.ANDROID, 1, "Android 1.x", new String[] { "Android 1" }, null, DeviceType.MOBILE,
             null),
 
     /**
      * PalmOS, exact version unkown
      */
-    WEBOS(Manufacturer.HP, null, 11, "WebOS", new String[]{"webOS"}, null, DeviceType.MOBILE, null),
-    PALM(Manufacturer.HP, null, 10, "PalmOS", new String[]{"Palm"}, null, DeviceType.MOBILE, null),
+    WEBOS(Manufacturer.HP, null, 11, "WebOS", new String[] { "webOS" }, null, DeviceType.MOBILE, null),
+    PALM(Manufacturer.HP, null, 10, "PalmOS", new String[] { "Palm" }, null, DeviceType.MOBILE, null),
 
     /**
      * iOS4, with the release of the iPhone 4, Apple renamed the OS to iOS.
      */
-    IOS(Manufacturer.APPLE, null, 2, "iOS", new String[]{"like Mac OS X"}, null, DeviceType.MOBILE, null), // before MAC_OS_X_IPHONE for all older versions
-    iOS5_IPHONE(Manufacturer.APPLE, OperatingSystem.IOS, 42, "iOS 5 (iPhone)", new String[]{"iPhone OS 5"}, null, DeviceType.MOBILE,
+    IOS(Manufacturer.APPLE, null, 2, "iOS", new String[] { "like Mac OS X" }, null, DeviceType.MOBILE, null), // before MAC_OS_X_IPHONE for all older versions
+    iOS5_IPHONE(Manufacturer.APPLE, OperatingSystem.IOS, 42, "iOS 5 (iPhone)", new String[] { "iPhone OS 5" }, null, DeviceType.MOBILE,
             null), // before MAC_OS_X_IPHONE for all older versions
-    iOS4_IPHONE(Manufacturer.APPLE, OperatingSystem.IOS, 41, "iOS 4 (iPhone)", new String[]{"iPhone OS 4"}, null, DeviceType.MOBILE,
+    iOS4_IPHONE(Manufacturer.APPLE, OperatingSystem.IOS, 41, "iOS 4 (iPhone)", new String[] { "iPhone OS 4" }, null, DeviceType.MOBILE,
             null), // before MAC_OS_X_IPHONE for all older versions
-    MAC_OS_X_IPAD(Manufacturer.APPLE, OperatingSystem.IOS, 50, "Mac OS X (iPad)", new String[]{"iPad"}, null, DeviceType.TABLET,
+    MAC_OS_X_IPAD(Manufacturer.APPLE, OperatingSystem.IOS, 50, "Mac OS X (iPad)", new String[] { "iPad" }, null, DeviceType.TABLET,
             null), // before Mac OS X
-    MAC_OS_X_IPHONE(Manufacturer.APPLE, OperatingSystem.IOS, 40, "Mac OS X (iPhone)", new String[]{"iPhone"}, null,
+    MAC_OS_X_IPHONE(Manufacturer.APPLE, OperatingSystem.IOS, 40, "Mac OS X (iPhone)", new String[] { "iPhone" }, null,
             DeviceType.MOBILE, null), // before Mac OS X
-    MAC_OS_X_IPOD(Manufacturer.APPLE, OperatingSystem.IOS, 30, "Mac OS X (iPod)", new String[]{"iPod"}, null, DeviceType.MOBILE,
+    MAC_OS_X_IPOD(Manufacturer.APPLE, OperatingSystem.IOS, 30, "Mac OS X (iPod)", new String[] { "iPod" }, null, DeviceType.MOBILE,
             null), // before Mac OS X
 
-    MAC_OS_X(Manufacturer.APPLE, null, 10, "Mac OSX", new String[]{"Mac OS X", "CFNetwork"}, null, DeviceType.COMPUTER, null), // before Mac
+    MAC_OS_X(Manufacturer.APPLE, null, 10, "Mac OSX", new String[] { "Mac OS X", "CFNetwork" }, null, DeviceType.COMPUTER, null), // before Mac
 
     /**
      * Older Mac OS systems before Mac OS X
      */
-    MAC_OS(Manufacturer.APPLE, null, 1, "Mac OS Classic", new String[]{"Mac"}, null, DeviceType.COMPUTER, null), // older Mac OS systems
+    MAC_OS(Manufacturer.APPLE, null, 1, "Mac OS Classic", new String[] { "Mac" }, null, DeviceType.COMPUTER, null), // older Mac OS systems
 
     /**
      * Linux based Maemo software platform by Nokia. Used in the N900 phone.
      * http://maemo.nokia.com/
      */
-    MAEMO(Manufacturer.NOKIA, null, 2, "Maemo", new String[]{"Maemo"}, null, DeviceType.MOBILE, null),
+    MAEMO(Manufacturer.NOKIA, null, 2, "Maemo", new String[] { "Maemo" }, null, DeviceType.MOBILE, null),
 
     /**
      * Bada is a mobile operating system being developed by Samsung Electronics.
      */
-    BADA(Manufacturer.SAMSUNG, null, 2, "Bada", new String[]{"Bada"}, null, DeviceType.MOBILE, null),
+    BADA(Manufacturer.SAMSUNG, null, 2, "Bada", new String[] { "Bada" }, null, DeviceType.MOBILE, null),
 
     /**
      * Google TV uses Android 2.x or 3.x but doesn't identify itself as Android.
      */
-    GOOGLE_TV(Manufacturer.GOOGLE, null, 100, "Android (Google TV)", new String[]{"GoogleTV"}, null, DeviceType.DMR, null),
-    CHROME_OS(Manufacturer.GOOGLE, null, 1, "ChromeOS", new String[]{"CrOS"}, null, DeviceType.COMPUTER, null),
+    GOOGLE_TV(Manufacturer.GOOGLE, null, 100, "Android (Google TV)", new String[] { "GoogleTV" }, null, DeviceType.DMR, null),
+    CHROME_OS(Manufacturer.GOOGLE, null, 1, "ChromeOS", new String[] { "CrOS" }, null, DeviceType.COMPUTER, null),
 
     /**
      * Various Linux based operating systems.
      */
-    KINDLE(Manufacturer.AMAZON, null, 1, "Linux (Kindle)", new String[]{"Kindle"}, null, DeviceType.TABLET, null),
-    KINDLE3(Manufacturer.AMAZON, OperatingSystem.KINDLE, 30, "Linux (Kindle 3)", new String[]{"Kindle/3"}, null, DeviceType.TABLET,
+    KINDLE(Manufacturer.AMAZON, null, 1, "Linux (Kindle)", new String[] { "Kindle" }, null, DeviceType.TABLET, null),
+    KINDLE3(Manufacturer.AMAZON, OperatingSystem.KINDLE, 30, "Linux (Kindle 3)", new String[] { "Kindle/3" }, null, DeviceType.TABLET,
             null),
-    KINDLE2(Manufacturer.AMAZON, OperatingSystem.KINDLE, 20, "Linux (Kindle 2)", new String[]{"Kindle/2"}, null, DeviceType.TABLET,
+    KINDLE2(Manufacturer.AMAZON, OperatingSystem.KINDLE, 20, "Linux (Kindle 2)", new String[] { "Kindle/2" }, null, DeviceType.TABLET,
             null),
-    LINUX(Manufacturer.OTHER, null, 2, "Linux", new String[]{"Linux", "CamelHttpStream"}, null, DeviceType.COMPUTER, null), // CamelHttpStream is being used by Evolution, an email client for Linux
-    BSD(Manufacturer.OTHER, null, 1, "BSD", new String[]{"FreeBSD"}, null, DeviceType.COMPUTER, null),
+    LINUX(Manufacturer.OTHER, null, 2, "Linux", new String[] { "Linux", "CamelHttpStream" }, null, DeviceType.COMPUTER, null), // CamelHttpStream is being used by Evolution, an email client for Linux
+    BSD(Manufacturer.OTHER, null, 1, "BSD", new String[] { "FreeBSD" }, null, DeviceType.COMPUTER, null),
 
     /**
      * Other Symbian OS versions
      */
-    SYMBIAN(Manufacturer.SYMBIAN, null, 1, "Symbian OS", new String[]{"Symbian", "Series60"}, null, DeviceType.MOBILE, null),
+    SYMBIAN(Manufacturer.SYMBIAN, null, 1, "Symbian OS", new String[] { "Symbian", "Series60" }, null, DeviceType.MOBILE, null),
     /**
      * Symbian OS 9.x versions. Being used by Nokia (N71, N73, N81, N82, N91,
      * N92, N95, ...)
      */
-    SYMBIAN9(Manufacturer.SYMBIAN, OperatingSystem.SYMBIAN, 20, "Symbian OS 9.x", new String[]{"SymbianOS/9", "Series60/3"}, null,
+    SYMBIAN9(Manufacturer.SYMBIAN, OperatingSystem.SYMBIAN, 20, "Symbian OS 9.x", new String[] { "SymbianOS/9", "Series60/3" }, null,
             DeviceType.MOBILE, null),
     /**
      * Symbian OS 8.x versions. Being used by Nokia (6630, 6680, 6681, 6682,
      * N70, N72, N90).
      */
     SYMBIAN8(Manufacturer.SYMBIAN, OperatingSystem.SYMBIAN, 15, "Symbian OS 8.x",
-            new String[]{"SymbianOS/8", "Series60/2.6", "Series60/2.8"}, null, DeviceType.MOBILE, null),
+            new String[] { "SymbianOS/8", "Series60/2.6", "Series60/2.8" }, null, DeviceType.MOBILE, null),
     /**
      * Symbian OS 7.x versions. Being used by Nokia (3230, 6260, 6600, 6620,
      * 6670, 7610), Panasonic (X700, X800), Samsung (SGH-D720, SGH-D730) and
      * Lenovo (P930).
      */
-    SYMBIAN7(Manufacturer.SYMBIAN, OperatingSystem.SYMBIAN, 10, "Symbian OS 7.x", new String[]{"SymbianOS/7"}, null,
+    SYMBIAN7(Manufacturer.SYMBIAN, OperatingSystem.SYMBIAN, 10, "Symbian OS 7.x", new String[] { "SymbianOS/7" }, null,
             DeviceType.MOBILE, null),
     /**
      * Symbian OS 6.x versions.
      */
-    SYMBIAN6(Manufacturer.SYMBIAN, OperatingSystem.SYMBIAN, 5, "Symbian OS 6.x", new String[]{"SymbianOS/6"}, null,
+    SYMBIAN6(Manufacturer.SYMBIAN, OperatingSystem.SYMBIAN, 5, "Symbian OS 6.x", new String[] { "SymbianOS/6" }, null,
             DeviceType.MOBILE, null),
     /**
      * Nokia's Series 40 operating system. Series 60 (S60) uses the Symbian OS.
      */
-    SERIES40(Manufacturer.NOKIA, null, 1, "Series 40", new String[]{"Nokia6300"}, null, DeviceType.MOBILE, null),
+    SERIES40(Manufacturer.NOKIA, null, 1, "Series 40", new String[] { "Nokia6300" }, null, DeviceType.MOBILE, null),
     /**
      * Proprietary operating system used for many Sony Ericsson phones.
      */
-    SONY_ERICSSON(Manufacturer.SONY_ERICSSON, null, 1, "Sony Ericsson", new String[]{"SonyEricsson"}, null, DeviceType.MOBILE,
+    SONY_ERICSSON(Manufacturer.SONY_ERICSSON, null, 1, "Sony Ericsson", new String[] { "SonyEricsson" }, null, DeviceType.MOBILE,
             null), // after symbian, some SE phones use symbian
-    SUN_OS(Manufacturer.SUN, null, 1, "SunOS", new String[]{"SunOS"}, null, DeviceType.COMPUTER, null),
+    SUN_OS(Manufacturer.SUN, null, 1, "SunOS", new String[] { "SunOS" }, null, DeviceType.COMPUTER, null),
 
-    PLAYSTATION_3(Manufacturer.SONY, null, 1, "PlayStation 3", new String[]{"PLAYSTATION 3"}, null, DeviceType.GAME_CONSOLE, null),
-    PLAYSTATION_4(Manufacturer.SONY, null, 1, "PlayStation 4", new String[]{"PLAYSTATION 4"}, null, DeviceType.GAME_CONSOLE, null),
-    PSP(Manufacturer.SONY, null, 1, "PlayStation Portable", new String[]{"PlayStation Portable"}, null, DeviceType.GAME_CONSOLE,
+    PLAYSTATION_3(Manufacturer.SONY, null, 1, "PlayStation 3", new String[] { "PLAYSTATION 3" }, null, DeviceType.GAME_CONSOLE, null),
+    PLAYSTATION_4(Manufacturer.SONY, null, 1, "PlayStation 4", new String[] { "PLAYSTATION 4" }, null, DeviceType.GAME_CONSOLE, null),
+    PSP(Manufacturer.SONY, null, 1, "PlayStation Portable", new String[] { "PlayStation Portable" }, null, DeviceType.GAME_CONSOLE,
             null),
-    PS_VITA(Manufacturer.SONY, null, 1, "PlayStation Vita", new String[]{"PlayStation Vita"}, null, DeviceType.GAME_CONSOLE, null),
+    PS_VITA(Manufacturer.SONY, null, 1, "PlayStation Vita", new String[] { "PlayStation Vita" }, null, DeviceType.GAME_CONSOLE, null),
 
     /**
      * Nintendo game console.
      */
-    WII_U(Manufacturer.NINTENDO, null, 1, "Nintendo Wii U", new String[]{"Nintendo WiiU"}, null, DeviceType.GAME_CONSOLE, null),
-    WII(Manufacturer.NINTENDO, null, 1, "Nintendo Wii", new String[]{"Nintendo Wii"}, null, DeviceType.GAME_CONSOLE, null),
-    NINTENDO_3DS(Manufacturer.NINTENDO, null, 1, "Nintendo 3DS", new String[]{"Nintendo 3DS"}, null, DeviceType.GAME_CONSOLE, null),
-    NINTENDO_DSI(Manufacturer.NINTENDO, null, 1, "Nintendo DSi", new String[]{"Nintendo DSi"}, null, DeviceType.GAME_CONSOLE, null),
+    WII_U(Manufacturer.NINTENDO, null, 1, "Nintendo Wii U", new String[] { "Nintendo WiiU" }, null, DeviceType.GAME_CONSOLE, null),
+    WII(Manufacturer.NINTENDO, null, 1, "Nintendo Wii", new String[] { "Nintendo Wii" }, null, DeviceType.GAME_CONSOLE, null),
+    NINTENDO_3DS(Manufacturer.NINTENDO, null, 1, "Nintendo 3DS", new String[] { "Nintendo 3DS" }, null, DeviceType.GAME_CONSOLE, null),
+    NINTENDO_DSI(Manufacturer.NINTENDO, null, 1, "Nintendo DSi", new String[] { "Nintendo DSi" }, null, DeviceType.GAME_CONSOLE, null),
 
     /**
      * BlackBerryOS. The BlackBerryOS exists in different version. How relevant
      * those versions are, is not clear.
      */
-    BLACKBERRY(Manufacturer.BLACKBERRY, null, 1, "BlackBerryOS", new String[]{"BlackBerry"}, null, DeviceType.MOBILE, null),
-    BLACKBERRY7(Manufacturer.BLACKBERRY, OperatingSystem.BLACKBERRY, 7, "BlackBerry 7", new String[]{"Version/7"}, null,
+    BLACKBERRY(Manufacturer.BLACKBERRY, null, 1, "BlackBerryOS", new String[] { "BlackBerry" }, null, DeviceType.MOBILE, null),
+    BLACKBERRY7(Manufacturer.BLACKBERRY, OperatingSystem.BLACKBERRY, 7, "BlackBerry 7", new String[] { "Version/7" }, null,
             DeviceType.MOBILE, null),
-    BLACKBERRY6(Manufacturer.BLACKBERRY, OperatingSystem.BLACKBERRY, 6, "BlackBerry 6", new String[]{"Version/6"}, null,
+    BLACKBERRY6(Manufacturer.BLACKBERRY, OperatingSystem.BLACKBERRY, 6, "BlackBerry 6", new String[] { "Version/6" }, null,
             DeviceType.MOBILE, null),
 
-    BLACKBERRY_TABLET(Manufacturer.BLACKBERRY, null, 100, "BlackBerry Tablet OS", new String[]{"RIM Tablet OS"}, null,
+    BLACKBERRY_TABLET(Manufacturer.BLACKBERRY, null, 100, "BlackBerry Tablet OS", new String[] { "RIM Tablet OS" }, null,
             DeviceType.TABLET, null),
 
-    ROKU(Manufacturer.ROKU, null, 1, "Roku OS", new String[]{"Roku"}, null, DeviceType.DMR, null),
-    DTV(Manufacturer.OTHER, null, 1, "DigitalTV", new String[]{"DTV"}, null, DeviceType.DMR, null),
+    ROKU(Manufacturer.ROKU, null, 1, "Roku OS", new String[] { "Roku" }, null, DeviceType.DMR, null),
+    DTV(Manufacturer.OTHER, null, 1, "DigitalTV", new String[] { "DTV" }, null, DeviceType.DMR, null),
 
     UNKNOWN(Manufacturer.OTHER, null, 1, "UNKNOWN", new String[0], null, DeviceType.UNKNOWN, null);
 
@@ -218,7 +218,7 @@ public enum OperatingSystem {
     private List<OperatingSystem> children;
 
     OperatingSystem(final Manufacturer manufacturer, final OperatingSystem parent, final int versionId, final String name,
-                    final String[] aliases, final String[] exclude, final DeviceType deviceType, final String versionRegexString) {
+            final String[] aliases, final String[] exclude, final DeviceType deviceType, final String versionRegexString) {
         this.manufacturer = manufacturer;
         this.parent = parent;
         this.children = new ArrayList<>();
@@ -300,8 +300,6 @@ public enum OperatingSystem {
     /**
      * Checks if the given user-agent string matches to the operating system.
      * Only checks for one specific operating system.
-     *
-     * @param agentString Agent alias
      */
     public boolean isInUserAgentString(final String agentString) {
         for (final String alias : aliases) {
diff --git a/ponysdk/src/main/java/com/ponysdk/core/useragent/UserAgent.java b/ponysdk/src/main/java/com/ponysdk/core/useragent/UserAgent.java
index b92f14bf..33c0f8f0 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/useragent/UserAgent.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/useragent/UserAgent.java
@@ -58,7 +58,6 @@ public class UserAgent implements Serializable {
 
     /**
      * Returns UserAgent based on specified unique id
-     * @param id
      */
     public static UserAgent valueOf(final int id) {
         final OperatingSystem operatingSystem = OperatingSystem.valueOf((short) (id >> 16));
diff --git a/ponysdk/src/main/java/com/ponysdk/core/util/MappedCollection.java b/ponysdk/src/main/java/com/ponysdk/core/util/MappedCollection.java
new file mode 100644
index 00000000..f0b2127b
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/util/MappedCollection.java
@@ -0,0 +1,68 @@
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.util;
+
+import java.util.AbstractCollection;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.function.Function;
+
+/**
+ *
+ */
+public class MappedCollection<T, E> extends AbstractCollection<E> {
+
+    private final Collection<T> c;
+    private final Function<T, E> mappingFunction;
+
+    public MappedCollection(final Collection<T> c, final Function<T, E> mappingFunction) {
+        super();
+        this.c = c;
+        this.mappingFunction = mappingFunction;
+    }
+
+    @Override
+    public Iterator<E> iterator() {
+        return new Iterator<>() {
+
+            private final Iterator<T> iterator = c.iterator();
+
+            @Override
+            public boolean hasNext() {
+                return iterator.hasNext();
+            }
+
+            @Override
+            public E next() {
+                return mappingFunction.apply(iterator.next());
+            }
+        };
+    }
+
+    @Override
+    public int size() {
+        return c.size();
+    }
+
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/util/MappedList.java b/ponysdk/src/main/java/com/ponysdk/core/util/MappedList.java
new file mode 100644
index 00000000..9634486a
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/util/MappedList.java
@@ -0,0 +1,51 @@
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.util;
+
+import java.util.AbstractList;
+import java.util.List;
+import java.util.function.Function;
+
+public class MappedList<T, E> extends AbstractList<E> {
+
+    private final List<T> list;
+    private final Function<T, E> mappingFunction;
+
+    public MappedList(final List<T> list, final Function<T, E> mappingFunction) {
+        super();
+        this.list = list;
+        this.mappingFunction = mappingFunction;
+    }
+
+    @Override
+    public E get(final int index) {
+        return mappingFunction.apply(list.get(index));
+    }
+
+    @Override
+    public int size() {
+        return list.size();
+    }
+
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/ui/form2/NotEmptyFieldValidator.java b/ponysdk/src/main/java/com/ponysdk/core/util/Reference.java
similarity index 58%
rename from ponysdk/src/main/java/com/ponysdk/core/ui/form2/NotEmptyFieldValidator.java
rename to ponysdk/src/main/java/com/ponysdk/core/util/Reference.java
index 0729d385..0d547687 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/ui/form2/NotEmptyFieldValidator.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/util/Reference.java
@@ -1,47 +1,46 @@
-/*
- * Copyright (c) 2011 PonySDK
- *  Owners:
- *  Luciano Broussal  <luciano.broussal AT gmail.com>
- *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
- *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
- *
- *  WebSite:
- *  http://code.google.com/p/pony-sdk/
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-
-package com.ponysdk.core.ui.form2;
-
-
-import java.util.Objects;
-
-public class NotEmptyFieldValidator implements FieldValidator {
-
-    private final String errorMessage;
-
-    public NotEmptyFieldValidator() {
-        this("Empty Field");
-    }
-
-    public NotEmptyFieldValidator(final String errorMessage) {
-        this.errorMessage = errorMessage;
-    }
-
-    @Override
-    public ValidationResult isValid(final String value) {
-        if (!Objects.requireNonNullElse(value, "").isEmpty()) return ValidationResult.OK();
-        return ValidationResult.KO(errorMessage);
-    }
-
-}
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.util;
+
+/**
+ *
+ */
+public class Reference<T> {
+
+    private T t;
+
+    public Reference(final T t) {
+        super();
+        this.t = t;
+    }
+
+    public T get() {
+        return t;
+    }
+
+    public void set(final T t) {
+        this.t = t;
+    }
+
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/util/SetPool.java b/ponysdk/src/main/java/com/ponysdk/core/util/SetPool.java
index 4d626a2a..d1077b56 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/util/SetPool.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/util/SetPool.java
@@ -34,20 +34,21 @@ import java.util.function.Predicate;
 import java.util.stream.Stream;
 
 /**
- * A pool of sets that uses caching to prevent having redundant sets.
- * The ImmutableSets retrieved from this pool are immutable. Any kind of modification of an
- * ImmutableSet will throw an UnsupportedOperationException.
- * Within the pool, instances of ImmutableSet are unique and weakly referenced.
+ * A pool of sets that uses caching to prevent having redundant sets.<br/>
+ * The <code>ImmutableSet</code>s retrieved from this pool are immutable. Any kind of modification of an
+ * <code>ImmutableSet</code> will throw an <code>UnsupportedOperationException</code>.<br/>
+ * Within the pool, instances of <code>ImmutableSet</code> are unique and weakly referenced.<br/>
  * There is a single, strongly referenced, instance of an empty set in this pool. It can be retrieved using
- * SetPool::emptyImmutableSet method.
- * In order to get an ImmutableSet derived from another ImmutableSet, you can use either
- * ImmutableSet::getXxx or SetPool::xxx methods where xxx is the name of the
- * equivalent unsupported ImmutableSet::xxx method (e.g. instead of using the unsupported
- * ImmutableSet::add method, use ImmutableSet::getAdd or SetPool::add to get a
- * copy, of the original set, that contains the newly added element).
+ * <code>SetPool::emptyImmutableSet</code> method.<br/>
+ * In order to get an <code>ImmutableSet</code> derived from another <code>ImmutableSet</code>, you can use either
+ * <code>ImmutableSet::getXxx</code> or <code>SetPool::xxx</code> methods where <code>xxx</code> is the name of the
+ * equivalent unsupported <code>ImmutableSet::xxx</code> method (e.g. instead of using the unsupported
+ * <code>ImmutableSet::add</code> method, use <code>ImmutableSet::getAdd</code> or <code>SetPool::add</code> to get a
+ * copy, of the original set, that contains the newly added element).<br/>
  * <b>IMPORTANT:</b> Objects contained in the sets of this pool must be immutable.
  *
- * @param <E> The type of objects contained in the sets of this pool, MUST be immutable
+ * @param <E>
+ *            The type of objects contained in the sets of this pool, MUST be immutable
  */
 public class SetPool<E> {
 
@@ -72,9 +73,9 @@ public class SetPool<E> {
     private final ThreadLocal<RemoveElementSet> removeElementSetLocals = ThreadLocal.withInitial(() -> new RemoveElementSet());
     private final ThreadLocal<AddAllElementsSet> addAllElementsSetLocals = ThreadLocal.withInitial(() -> new AddAllElementsSet());
     private final ThreadLocal<RemoveAllElementsSet> removeAllElementsSetLocals = ThreadLocal
-            .withInitial(() -> new RemoveAllElementsSet());
+        .withInitial(() -> new RemoveAllElementsSet());
     private final ThreadLocal<RetainAllElementsSet> retainAllElementsSetLocals = ThreadLocal
-            .withInitial(() -> new RetainAllElementsSet());
+        .withInitial(() -> new RetainAllElementsSet());
 
     private final SynchronizedWeakCache<ImmutableSet> cache;
     private final Function<Integer, Set<E>> setFactory;
@@ -90,8 +91,9 @@ public class SetPool<E> {
     /**
      * Constructs an empty {@code SetPool} with the specified Set factory and the default initial capacity (16)
      *
-     * @param setFactory the factory used to create new Sets that are used internally in the {@code ImmutableSet}s, the
-     *                   factory's integer parameter is a hint about the expected size of the Set to create
+     * @param setFactory
+     *            the factory used to create new Sets that are used internally in the {@code ImmutableSet}s, the
+     *            factory's integer parameter is a hint about the expected size of the Set to create
      */
     public SetPool(final Function<Integer, Set<E>> setFactory) {
         this(setFactory, DEFAULT_INITIAL_CAPACITY);
@@ -100,9 +102,11 @@ public class SetPool<E> {
     /**
      * Constructs an empty {@code SetPool} with the specified Set factory and initial capacity
      *
-     * @param setFactory      the factory used to create new Sets that are used internally in the {@code ImmutableSet}s, the
-     *                        factory's integer parameter is a hint about the expected size of the Set to create
-     * @param initialCapacity the initial capacity of the internal hash map
+     * @param setFactory
+     *            the factory used to create new Sets that are used internally in the {@code ImmutableSet}s, the
+     *            factory's integer parameter is a hint about the expected size of the Set to create
+     * @param initialCapacity
+     *            the initial capacity of the internal hash map
      */
     public SetPool(final Function<Integer, Set<E>> setFactory, final int initialCapacity) {
         emptySet = new ImmutableSet(setFactory.apply(0), 0);
@@ -132,30 +136,24 @@ public class SetPool<E> {
     }
 
     /**
-     * @param original The original set
-     * @param e        Object to add
      * @return an {@code ImmutableSet} that is equivalent to <code>(original UNION {e})</code>, or {@code original}
-     * itself if {@code e} already belongs to it
+     *         itself if {@code e} already belongs to it
      */
     public ImmutableSet add(final ImmutableSet original, final E e) {
         return find(original, e, addElementSetLocals.get());
     }
 
     /**
-     * @param original Original Set
-     * @param o        Object to remove
      * @return an {@code ImmutableSet} that is equivalent to <code>(original MINUS {o})</code>, or {@code original}
-     * itself if {@code o} doesn't belong to it
+     *         itself if {@code o} doesn't belong to it
      */
     public ImmutableSet remove(final ImmutableSet original, final Object o) {
         return find(original, o, removeElementSetLocals.get());
     }
 
     /**
-     * @param original
-     * @param c
      * @return an {@code ImmutableSet} that is equivalent to <code>(original UNION c)</code>, or {@code original}
-     * itself if {@code c} is a subset of it
+     *         itself if {@code c} is a subset of it
      */
     public ImmutableSet addAll(final ImmutableSet original, final Set<? extends E> c) {
         return find(original, c, addAllElementsSetLocals.get());
@@ -163,17 +161,15 @@ public class SetPool<E> {
 
     /**
      * @return an {@code ImmutableSet} that is equivalent to <code>(original INTERSECT c)</code>, or {@code original}
-     * itself if it is a subset of {@code c}
+     *         itself if it is a subset of {@code c}
      */
     public ImmutableSet retainAll(final ImmutableSet original, final Set<?> c) {
         return find(original, c, retainAllElementsSetLocals.get());
     }
 
     /**
-     * @param original original set
-     * @param c        set to remove from original
      * @return an {@code ImmutableSet} that is equivalent to <code>(original MINUS c)</code>, or {@code original}
-     * itself if {@code c} has no intersection with it
+     *         itself if {@code c} has no intersection with it
      */
     public ImmutableSet removeAll(final ImmutableSet original, final Set<?> c) {
         return find(original, c, removeAllElementsSetLocals.get());
@@ -211,6 +207,7 @@ public class SetPool<E> {
         }
 
         /**
+         * {@inheritDoc}<br/>
          * <b>IMPORTANT: </b><code>Iterator::remove</code> is unsupported in the returned iterator
          */
         @Override
@@ -261,9 +258,8 @@ public class SetPool<E> {
         }
 
         /**
-         * @param e
          * @return from the {@code SetPool}, an {@code ImmutableSet} that is equivalent to
-         * <code>(this UNION {e})</code>, or {@code this} if {@code e} already belongs to it
+         *         <code>(this UNION {e})</code>, or {@code this} if {@code e} already belongs to it
          */
         public ImmutableSet getAdd(final E e) {
             return SetPool.this.add(this, e);
@@ -278,9 +274,8 @@ public class SetPool<E> {
         }
 
         /**
-         * @param o Object to remove
          * @return from the {@code SetPool}, an {@code ImmutableSet} that is equivalent to
-         * <code>(this MINUS {e})</code>, or {@code this} if {@code o} doesn't belong to it
+         *         <code>(this MINUS {e})</code>, or {@code this} if {@code o} doesn't belong to it
          */
         public ImmutableSet getRemove(final Object o) {
             return SetPool.this.remove(this, o);
@@ -292,9 +287,8 @@ public class SetPool<E> {
         }
 
         /**
-         * @param c set to add
          * @return from the {@code SetPool}, an {@code ImmutableSet} that is equivalent to <code>(this UNION c)</code>,
-         * or {@code this} if {@code c} is a subset of it
+         *         or {@code this} if {@code c} is a subset of it
          */
         public ImmutableSet getAddAll(final Set<? extends E> c) {
             return SetPool.this.addAll(this, c);
@@ -309,9 +303,8 @@ public class SetPool<E> {
         }
 
         /**
-         * @param c
          * @return from the {@code SetPool}, an {@code ImmutableSet} that is equivalent to
-         * <code>(this INTERSECT c)</code>, or {@code this} if it is a subset of {@code c}
+         *         <code>(this INTERSECT c)</code>, or {@code this} if it is a subset of {@code c}
          */
         public ImmutableSet getRetainAll(final Set<?> c) {
             return SetPool.this.retainAll(this, c);
@@ -326,9 +319,8 @@ public class SetPool<E> {
         }
 
         /**
-         * @param c set to remove
          * @return from the {@code SetPool}, an {@code ImmutableSet} that is equivalent to <code>(this MINUS c)</code>,
-         * or {@code this} if {@code c} has no intersection with it
+         *         or {@code this} if {@code c} has no intersection with it
          */
         public ImmutableSet getRemoveAll(final Set<?> c) {
             return SetPool.this.removeAll(this, c);
diff --git a/ponysdk/src/main/java/com/ponysdk/core/util/SetUtils.java b/ponysdk/src/main/java/com/ponysdk/core/util/SetUtils.java
index f6bef17d..93c64b80 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/util/SetUtils.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/util/SetUtils.java
@@ -48,7 +48,7 @@ public class SetUtils {
     }
 
     /**
-     * ArraySet&lt; E&gt; is private to prevent using it as a List
+     * ArraySet<E> is private to prevent using it as a List
      */
     private static class ArraySet<E> extends ArrayList<E> implements Set<E> {
 
diff --git a/ponysdk/src/main/java/com/ponysdk/core/util/StringUtils.java b/ponysdk/src/main/java/com/ponysdk/core/util/StringUtils.java
new file mode 100644
index 00000000..881c1763
--- /dev/null
+++ b/ponysdk/src/main/java/com/ponysdk/core/util/StringUtils.java
@@ -0,0 +1,64 @@
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.util;
+
+public class StringUtils {
+
+    //Utilities class
+    private StringUtils() {
+
+    }
+
+    public static boolean containsIgnoreCase(final String value, final String str) {
+        if (str.isEmpty()) return true;
+        final char first = str.charAt(0);
+        final int max = value.length() - str.length();
+        for (int i = 0; i <= max; i++) {
+            // Look for first character.
+            if (!equalsIgnoreCase(value.charAt(i), first)) {
+                while (++i <= max && !equalsIgnoreCase(value.charAt(i), first))
+                    ;
+            }
+            // Found first character, now look at the rest of value
+            if (i <= max) {
+                int j = i + 1;
+                final int end = j + str.length() - 1;
+                for (int k = 1; j < end && equalsIgnoreCase(value.charAt(j), str.charAt(k)); j++, k++)
+                    ;
+                if (j == end) {
+                    // Found whole string.
+                    return true;
+                }
+            }
+        }
+        return false;
+    }
+
+    private static boolean equalsIgnoreCase(final char a, final char b) {
+        if (a == b) return true;
+        if (a >= 'A' && a <= 'Z') return b + 'A' - 'a' == a;
+        if (a >= 'a' && a <= 'z') return b + 'a' - 'A' == a;
+        return false;
+    }
+}
diff --git a/ponysdk/src/main/java/com/ponysdk/core/util/SynchronizedWeakCache.java b/ponysdk/src/main/java/com/ponysdk/core/util/SynchronizedWeakCache.java
index ea9c74fc..fd72849c 100644
--- a/ponysdk/src/main/java/com/ponysdk/core/util/SynchronizedWeakCache.java
+++ b/ponysdk/src/main/java/com/ponysdk/core/util/SynchronizedWeakCache.java
@@ -30,8 +30,10 @@ import java.util.function.Function;
 /**
  * A thread-safe cache that weakly references the objects that it contains
  *
- * @param <E> MUST be immutable
  * @see WeakReference
+ *
+ * @param <E>
+ *            MUST be immutable
  */
 public class SynchronizedWeakCache<E> {
 
@@ -47,12 +49,10 @@ public class SynchronizedWeakCache<E> {
 
     /**
      * If there is an instance equivalent to {@code key} present in the cache, return it. Otherwise, use the
-     * {@code mappingFuction} to create a new instance based on the {@code key}, put it in the cache and return it.
+     * {@code mappingFuction} to create a new instance based on the {@code key}, put it in the cache and return it.<br/>
      * <i><b>NB :</b> If the {@code mappingFunction} is applied, its result is not guaranteed to be inserted in the
      * cache.</i>
      *
-     * @param key             mappingFunction key
-     * @param mappingFunction mappingFunction ref
      * @return an existing instance, or a newly created one if absent
      */
     public <T> E getOrCompute(final T key, final Function<T, E> mappingFunction) {
diff --git a/ponysdk/src/main/java/com/ponysdk/driver/PonySDKWebDriver.java b/ponysdk/src/main/java/com/ponysdk/driver/PonySDKWebDriver.java
index ce0c67fd..689f41d3 100644
--- a/ponysdk/src/main/java/com/ponysdk/driver/PonySDKWebDriver.java
+++ b/ponysdk/src/main/java/com/ponysdk/driver/PonySDKWebDriver.java
@@ -23,19 +23,6 @@
 
 package com.ponysdk.driver;
 
-import com.ponysdk.core.model.*;
-import org.openqa.selenium.By;
-import org.openqa.selenium.WebDriver;
-import org.openqa.selenium.WebElement;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import javax.json.Json;
-import javax.json.JsonArrayBuilder;
-import javax.json.JsonObject;
-import javax.websocket.CloseReason;
-import javax.websocket.MessageHandler;
-import javax.websocket.Session;
 import java.io.IOException;
 import java.io.StringWriter;
 import java.io.Writer;
@@ -44,12 +31,38 @@ import java.nio.BufferUnderflowException;
 import java.nio.ByteBuffer;
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.EnumMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.function.BiConsumer;
 import java.util.function.Function;
 import java.util.function.ToIntFunction;
 
+import javax.json.Json;
+import javax.json.JsonArrayBuilder;
+import javax.json.JsonObject;
+import javax.websocket.CloseReason;
+import javax.websocket.MessageHandler;
+import javax.websocket.Session;
+
+import org.openqa.selenium.By;
+import org.openqa.selenium.WebDriver;
+import org.openqa.selenium.WebElement;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.ponysdk.core.model.ArrayValueModel;
+import com.ponysdk.core.model.BooleanModel;
+import com.ponysdk.core.model.ClientToServerModel;
+import com.ponysdk.core.model.ServerToClientModel;
+import com.ponysdk.core.model.ValueTypeModel;
+import com.ponysdk.core.model.WidgetType;
+
 public class PonySDKWebDriver implements WebDriver {
 
     private final static Logger log = LoggerFactory.getLogger(PonySDKWebDriver.class);
@@ -307,13 +320,13 @@ public class PonySDKWebDriver implements WebDriver {
     private String getString(final ByteBuffer b) {
         int stringLength = readUnsignedByte(b);
         boolean ascii = true;
-        if (stringLength > ValueTypeModel.STRING_ASCII_UINT8) {
+        if (stringLength > ValueTypeModel.STRING_ASCII_UINT8_MAX_LENGTH) {
             switch (stringLength) {
                 case ValueTypeModel.STRING_ASCII_UINT16:
                     length += 2;
                     stringLength = readUnsignedShort(b);
                     break;
-                case ValueTypeModel.STRING_ASCII_UINT32:
+                case ValueTypeModel.STRING_ASCII_INT32:
                     length += 4;
                     stringLength = b.getInt();
                     break;
@@ -392,7 +405,7 @@ public class PonySDKWebDriver implements WebDriver {
                 return getString(b, StandardCharsets.UTF_8, PonySDKWebDriver::readUnsignedByte);
             case STRING_UTF8_UINT16_LENGTH:
                 return getString(b, StandardCharsets.UTF_8, PonySDKWebDriver::readUnsignedShort);
-            case STRING_UTF8_UINT32_LENGTH:
+            case STRING_UTF8_INT32_LENGTH:
                 return getString(b, StandardCharsets.UTF_8, ByteBuffer::getInt);
             default:
                 throw new IllegalArgumentException("ArrayValueModel " + model + " is not supported");
diff --git a/ponysdk/src/main/java/com/ponysdk/impl/spring/server/SpringApplicationManager.java b/ponysdk/src/main/java/com/ponysdk/impl/spring/server/SpringApplicationManager.java
index 55982c8a..33b2064d 100644
--- a/ponysdk/src/main/java/com/ponysdk/impl/spring/server/SpringApplicationManager.java
+++ b/ponysdk/src/main/java/com/ponysdk/impl/spring/server/SpringApplicationManager.java
@@ -23,20 +23,19 @@
 
 package com.ponysdk.impl.spring.server;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-import java.util.Map;
-
+import com.ponysdk.core.server.application.ApplicationManager;
+import com.ponysdk.core.ui.activity.InitializingActivity;
+import com.ponysdk.core.ui.main.EntryPoint;
 import org.springframework.beans.BeansException;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.ApplicationContextAware;
-import org.springframework.context.support.GenericXmlApplicationContext;
+import org.springframework.context.support.ClassPathXmlApplicationContext;
 import org.springframework.util.StringUtils;
 
-import com.ponysdk.core.server.application.ApplicationManager;
-import com.ponysdk.core.ui.activity.InitializingActivity;
-import com.ponysdk.core.ui.main.EntryPoint;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Map;
 
 public class SpringApplicationManager extends ApplicationManager implements ApplicationContextAware {
 
@@ -59,10 +58,9 @@ public class SpringApplicationManager extends ApplicationManager implements Appl
 
     @Override
     protected EntryPoint initializeEntryPoint() {
-        try (GenericXmlApplicationContext applicationContext = new GenericXmlApplicationContext()) {
-            applicationContext.getEnvironment().setActiveProfiles(serverApplicationContext.getEnvironment().getActiveProfiles());
-            applicationContext.load(configurations);
-            applicationContext.refresh();
+        try (ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext(configurations)) {
+            final String[] serverActiveProfiles = serverApplicationContext.getEnvironment().getActiveProfiles();
+            Arrays.stream(serverActiveProfiles).forEach(profile -> applicationContext.getEnvironment().addActiveProfile(profile));
 
             final EntryPoint entryPoint = applicationContext.getBean(EntryPoint.class);
 
@@ -74,7 +72,7 @@ public class SpringApplicationManager extends ApplicationManager implements Appl
     }
 
     @Override
-    public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
+    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
         this.serverApplicationContext = applicationContext;
     }
 }
diff --git a/ponysdk/src/main/java/com/ponysdk/test/PEmulator.java b/ponysdk/src/main/java/com/ponysdk/test/PEmulator.java
deleted file mode 100644
index d7691902..00000000
--- a/ponysdk/src/main/java/com/ponysdk/test/PEmulator.java
+++ /dev/null
@@ -1,42 +0,0 @@
-package com.ponysdk.test;
-
-import com.google.gwt.json.client.JSONObject;
-import com.ponysdk.core.model.ClientToServerModel;
-import com.ponysdk.core.model.DomHandlerType;
-import com.ponysdk.core.server.application.UIContext;
-import com.ponysdk.core.ui.basic.PObject;
-
-import javax.json.Json;
-import javax.json.JsonObject;
-
-public class PEmulator {
-
-    public static void windowOpened(PObject object) {
-        JsonObject jsonObject = Json.createObjectBuilder().add(ClientToServerModel.HANDLER_OPEN.toStringValue(), "url").build();
-        object.onClientData(jsonObject);
-    }
-
-    public static void windowClosed(PObject object) {
-        JsonObject jsonObject = Json.createObjectBuilder().addNull(ClientToServerModel.HANDLER_CLOSE.toStringValue()).build();
-        object.onClientData(jsonObject);
-    }
-
-    public static void valueChange(PObject object, boolean value) {
-        JsonObject jsonObject = Json.createObjectBuilder().add(ClientToServerModel.HANDLER_BOOLEAN_VALUE_CHANGE.toStringValue(), value).build();
-        object.onClientData(jsonObject);
-    }
-
-    public static void click(int objectID) {
-        click(UIContext.get().getObject(objectID));
-    }
-
-    public static void click(PObject object) {
-        JsonObject jsonObject = Json.createObjectBuilder().add(ClientToServerModel.DOM_HANDLER_TYPE.toStringValue(), DomHandlerType.CLICK.getValue()).build();
-        object.onClientData(jsonObject);
-    }
-
-    public static void addonData(PObject object, JSONObject value) {
-        JsonObject jsonObject = Json.createObjectBuilder().add(ClientToServerModel.NATIVE.toStringValue(), "NATIVE").add("NATIVE", value.toString()).build();
-        object.onClientData(jsonObject);
-    }
-}
diff --git a/ponysdk/src/main/javadoc/resources/images/pony.png b/ponysdk/src/main/javadoc/resources/images/pony.png
new file mode 100644
index 00000000..6cfe2303
Binary files /dev/null and b/ponysdk/src/main/javadoc/resources/images/pony.png differ
diff --git a/ponysdk/src/main/resources/script/ponysdk.js b/ponysdk/src/main/resources/script/ponysdk.js
index 333d7cf7..85ec6630 100644
--- a/ponysdk/src/main/resources/script/ponysdk.js
+++ b/ponysdk/src/main/resources/script/ponysdk.js
@@ -12,10 +12,6 @@ document.onConnectionLost = function(callback) {
     document.onConnectionLostListeners.push(callback);
 };
 
-document.doReload = function() {
-    document.location.reload();
-};
-
 function onPonySDKModuleLoaded() {
     console.log("onPonySDKModuleLoaded");
 
@@ -496,3 +492,320 @@ if (typeof module !== 'undefined' && module.hasOwnProperty('exports')) {
     window['UTF8'] = UTF8;
 }
 _UTF8 = undefined;
+
+(function() {
+  "use strict";
+
+  AbstractAddon.defineAddon("com.ponysdk.core.ui.datagrid2.SimpleDataGridView.Addon", {
+	
+    initDom: function() {
+		var that = this;
+        this.heightLimit = 20000000;
+        this.programmaticScroll = false;
+		this.body = this.jqelement.find('div.pony-grid-body')[0];
+        this.subBody = this.jqelement.find('div.pony-grid-sub-body')[0];
+        this.pinnedBody = this.jqelement.find('div.pony-grid-pinned-body')[0];
+        this.unpinnedBody = this.jqelement.find('div.pony-grid-unpinned-body')[0];
+        this.pinnedHeader = this.jqelement.find('div.pony-grid-pinned-header')[0];
+        this.unpinnedHeader = this.jqelement.find('div.pony-grid-unpinned-header')[0];
+        this.pinnedFooter = this.jqelement.find('div.pony-grid-pinned-footer')[0];
+        this.unpinnedFooter = this.jqelement.find('div.pony-grid-unpinned-footer')[0];
+        this.header = this.jqelement.find('div.pony-grid-header')[0];
+        this.loadingData = this.jqelement.find('div.pony-grid-loading-data')[0];
+        this.ratio = 1.0;
+        
+        if('IntersectionObserver' in window){
+            this.intersectionObserver = new IntersectionObserver(function(entries){
+                var columns = [];
+                var visibility = [];
+                entries.forEach(function(e){
+                    columns.push(parseInt(e.target.getAttribute('data-column-id')));
+                    visibility.push(e.isIntersecting);
+                });
+                this.sendDataToServer({
+                    col: columns,
+                    cv: visibility
+                });
+            }.bind(this), {
+              root: this.header,
+              rootMargin: '0px',
+              threshold: 0.0
+            });
+        }
+        
+		this.absRowCount = 0;
+		this.rowHeight = 0;
+		this.relRowCount = 0;
+		this.firstRowIndex = 0;
+		this.headerHeight = 0;
+		this.footerHeight = 0;
+		this.scrollRatio = 0;
+      	this.viewHeight = 0;
+        this.subBodyWidth = 0;
+      	this.resizeChecker = setInterval(this.checkHeight.bind(this), 250);
+        
+        this.unpinnedFooter.addEventListener("scroll", function(){
+            var scrollLeft = that.unpinnedFooter.scrollLeft;
+            if(scrollLeft != that.unpinnedHeader.scrollLeft)
+                that.unpinnedHeader.scrollLeft = scrollLeft;
+            if(scrollLeft != that.unpinnedBody.scrollLeft)
+                that.unpinnedBody.scrollLeft = scrollLeft;
+        });
+        this.unpinnedHeader.addEventListener("scroll", function(){
+            var scrollLeft = that.unpinnedHeader.scrollLeft;
+            if(scrollLeft != that.unpinnedFooter.scrollLeft)
+                that.unpinnedFooter.scrollLeft = scrollLeft;
+            if(scrollLeft != that.unpinnedBody.scrollLeft)
+                that.unpinnedBody.scrollLeft = scrollLeft;
+        });
+        this.unpinnedBody.addEventListener("scroll", function(){
+            var scrollLeft = that.unpinnedBody.scrollLeft;
+            if(scrollLeft != that.unpinnedHeader.scrollLeft)
+                that.unpinnedHeader.scrollLeft = scrollLeft;
+            if(scrollLeft != that.unpinnedFooter.scrollLeft)
+                that.unpinnedFooter.scrollLeft = scrollLeft;
+        });
+        this.unpinnedHeader.scrollLeft = 0;
+      	this.body.addEventListener("scroll", $.debounce(100, this.checkPosition.bind(this)));
+        
+		window.onresize = function(e) {
+			var rows = $(that.pinnedBody).children('div').length;
+			for(var i=0;i<rows;i++){
+				that.updateRowHeight(i);
+			}
+    		that.refreshVerticalMargins();
+            that.refreshScrollBarMargins();
+			var bodyHeight = $(that.pinnedBody).height();
+			var scroll = that.scrollRatio * $(that.subBody).height();
+    		$(that.body).scrollTop(scroll);
+		};
+        
+        $(this.pinnedBody).on('mouseenter', '.pony-grid-row', this.onRowMouseEnter.bind(this));
+      	$(this.pinnedBody).on('mouseleave', '.pony-grid-row', this.onRowMouseLeave.bind(this));
+      	$(this.unpinnedBody).on('mouseenter', '.pony-grid-row', this.onRowMouseEnter.bind(this));
+      	$(this.unpinnedBody).on('mouseleave', '.pony-grid-row', this.onRowMouseLeave.bind(this));
+    },
+    
+    destroy: function() {
+    	clearInterval(this.resizeChecker);
+        if('IntersectionObserver' in window){
+            this.intersectionObserver.disconnect();
+        }
+    },
+      
+    onRowMouseEnter: function(event) {
+        var row = event.currentTarget;
+        row.setAttribute('pony-hovered', '');
+        this.getOppositeRow(row).setAttribute('pony-hovered', '');
+    },
+      
+    onRowMouseLeave: function(event) {
+        var row = event.currentTarget;
+        row.removeAttribute('pony-hovered');
+        this.getOppositeRow(row).removeAttribute('pony-hovered');
+    },
+      
+    getOppositeRow: function(r) {
+        var row = $(r);
+        var index = row.index();
+        if(row.parent().is(this.pinnedBody)) {
+            return $(this.unpinnedBody).children('.pony-grid-row').eq(index)[0];
+        } else {
+            return $(this.pinnedBody).children('.pony-grid-row').eq(index)[0];
+        }
+    },
+    
+    checkHeight: function(){
+        var visibleHeight = $(this.body).height();
+  		if(Math.abs(visibleHeight - this.viewHeight)<this.viewHeight*0.01) return;
+		if(this.rowHeight == 0) return;
+        this.loadingData.style.display = null;
+		this.viewHeight = visibleHeight;
+		var c = ((visibleHeight/this.rowHeight)|0)*3;
+		this.sendDataToServer({
+          	rc: c
+        });
+    },
+
+    checkPosition: function(){
+    	var marginTop = parseFloat(this.subBody.style.marginTop);
+		var marginBottom = parseFloat(this.subBody.style.marginBottom);
+		var pos = this.body.scrollTop;
+        var contentHeight = $(this.subBody).height();
+        var visibleHeight = $(this.body).height();
+        var fullHeight = contentHeight + marginTop + marginBottom;
+		this.scrollRatio = pos / fullHeight;
+		if((pos <= marginTop + contentHeight * 0.1 && this.firstRowIndex > 0) ||
+			((pos + visibleHeight >= marginTop + contentHeight * 0.9 ) &&
+				(this.firstRowIndex < this.absRowCount - this.relRowCount) )){
+            this.loadingData.style.display = null;
+			var r = Math.max(0, (this.absRowCount * this.scrollRatio) - this.relRowCount/3) | 0;
+			this.sendDataToServer({
+				row: r
+			});
+		}
+    },
+    
+    updateRowHeight: function(index){
+    	var pinnedRow = $(this.pinnedBody).children('div').eq(index)[0];
+    	var unpinnedRow = $(this.unpinnedBody).children('div').eq(index)[0];
+    	if(this.rowHeight <= 0){
+    		this.rowHeight = this.adjustHeight(pinnedRow, unpinnedRow);
+    	} else {
+    		$(pinnedRow).height(this.rowHeight);
+    		$(unpinnedRow).height(this.rowHeight);
+    	}
+    },
+    
+    updateExtendedRowHeight: function(index){
+    	var pinnedRow = $(this.pinnedBody).children('div').eq(index)[0];
+    	var unpinnedRow = $(this.unpinnedBody).children('div').eq(index)[0];
+    	this.adjustHeight(pinnedRow, unpinnedRow);
+    },
+    
+    adjustHeight: function(pinnedRow, unpinnedRow){
+    	pinnedRow.style.height = null;
+    	unpinnedRow.style.height = null;
+    	var pinnedHeight = $(pinnedRow).height();
+    	var unpinnedHeight = $(unpinnedRow).height();
+    	var maxHeight = Math.max(pinnedHeight, unpinnedHeight);
+    	$(unpinnedRow).height(maxHeight);
+    	$(pinnedRow).height(maxHeight);
+    	return maxHeight;
+    },
+    
+    onRowUpdated: function(index) {
+    	this.updateRowHeight(index);
+    },
+    
+    onDataUpdated: function(absRowCount, relRowCount, firstRowIndex) {
+    	if(this.absRowCount != absRowCount || this.firstRowIndex != firstRowIndex || this.relRowCount != relRowCount){
+			this.relRowCount = relRowCount;
+			this.absRowCount = absRowCount;
+			this.firstRowIndex = firstRowIndex;
+			this.refreshVerticalMargins();
+		}
+        this.refreshScrollBarMargins();
+    },
+      
+    onColumnAdded: function(id, colMinWidth, colMaxWidth, pinned){
+		var e = $(this.header).find("[data-column-id="+id+"]")[0];
+        if('IntersectionObserver' in window){
+            this.intersectionObserver.observe(e);
+        }
+        var resizerDiv = e.getElementsByClassName('pony-grid-col-resizer')[0];
+        if(resizerDiv){
+            var pageX, curColWidth;
+            resizerDiv.addEventListener('mousedown', function (event) {
+                pageX = event.pageX;
+                curColWidth = e.offsetWidth;
+            });
+            document.addEventListener('mousemove', function(event) {
+                if(pageX != undefined){
+                    var diff = event.pageX - pageX;
+                    e.style.width = Math.min(colMaxWidth,Math.max(colMinWidth,(curColWidth + diff)))+'px';
+                }
+            });
+            document.addEventListener('mouseup', function(event) {
+                if(pageX != undefined){
+                    this.sendDataToServer({
+                        col: parseInt(id),
+                        cw: parseInt(e.offsetWidth)
+                    });
+                    pageX = undefined; 
+                    curColWidth = undefined;
+                }
+            }.bind(this));
+        }
+        if(!pinned){
+            var draggableElement = e.getElementsByClassName('pony-grid-draggable-col')[0];
+            if(draggableElement){
+                draggableElement.draggable = true;
+                draggableElement.ondragover = function(event){
+                    event.preventDefault();
+                    console.log("ondragover="+id);
+                };
+                draggableElement.ondragstart = function(event){
+                    event.dataTransfer.setData('col-id', id);
+                    console.log("ondragstart="+id);
+                };
+                draggableElement.ondrop = function(event){
+                    event.preventDefault();
+                    var data = event.dataTransfer.getData('col-id');
+                    if(data == undefined) return;
+                    console.log("ondrop="+data);
+                    this.sendDataToServer({
+                        col: parseInt(data),
+                        to: parseInt(id)
+                    });
+                }.bind(this);
+            }
+        }
+    },        
+      
+    scrollToTop: function(){
+		$(this.body).scrollTop(0);
+    },
+      
+    refreshScrollBarMargins: function(){
+        var w = $(this.subBody).width();
+        if(this.subBodyWidth == w) return;
+        this.subBodyWidth = w;
+        var scrollBarWidth = ($(this.body).width() - w)+"px";
+        this.unpinnedFooter.style.marginRight = scrollBarWidth;
+        this.unpinnedHeader.style.marginRight = scrollBarWidth;
+    },
+    
+    refreshVerticalMargins: function(){
+		var marginTop = this.firstRowIndex * this.rowHeight * this.ratio;
+		var marginBottom = Math.max(0, (this.absRowCount - (this.firstRowIndex + this.relRowCount))*this.rowHeight) * this.ratio;
+        var scroll = false;
+        if(marginTop + marginBottom > this.heightLimit){
+            while(marginTop + marginBottom > this.heightLimit){
+                marginTop *= 0.5;
+                marginBottom *= 0.5;
+                this.ratio *= 0.5;
+            }
+            scroll = true;
+        } else if(this.ratio <= 0.5 && ((marginTop+marginBottom)*2.0 < this.heightLimit)) {
+            while(this.ratio <= 0.5 && ((marginTop+marginBottom)*2.0 < this.heightLimit)){
+                marginTop *= 2.0;
+                marginBottom *= 2.0;
+                this.ratio *= 2.0;
+            }
+            scroll = true;
+        }
+        var marginTopPx = marginTop + "px";
+		this.subBody.style.marginTop = marginTopPx;
+        var marginBottomPx = marginBottom + "px";
+		this.subBody.style.marginBottom = marginBottomPx;
+        if(scroll && marginTop > 0){
+            var scrollTop = marginTop+$(this.subBody).height()/3;
+            $(this.body).scrollTop(scrollTop);
+        }
+    }
+
+  });
+
+})();
+
+(function() {
+  "use strict";
+
+  AbstractAddon.defineAddon("com.ponysdk.core.ui.datagrid2.SimpleDataGridView.HideScrollBarAddon", {
+	
+    initDom: function() {        
+        var styles = '.pony-grid-hidden-scrollbar::-webkit-scrollbar { display: none; }\n' +
+            '.pony-grid-hidden-scrollbar { scrollbar-width: none; -ms-overflow-style: none; }';
+        var styleTag = document.createElement('style'); 
+        styleTag.type = 'text/css';
+        if (styleTag.styleSheet)  
+            styleTag.styleSheet.cssText = styles; 
+        else  
+            styleTag.appendChild(document.createTextNode(styles)); 
+        this.jqelement[0].appendChild(styleTag);
+    }
+
+  });
+
+})();
\ No newline at end of file
diff --git a/ponysdk/src/test/java/com/ponysdk/core/model/ArrayValueModelTest.java b/ponysdk/src/test/java/com/ponysdk/core/model/ArrayValueModelTest.java
index c9f8a57d..182a79ee 100644
--- a/ponysdk/src/test/java/com/ponysdk/core/model/ArrayValueModelTest.java
+++ b/ponysdk/src/test/java/com/ponysdk/core/model/ArrayValueModelTest.java
@@ -23,9 +23,11 @@
 
 package com.ponysdk.core.model;
 
-import org.junit.Test;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 
-import static org.junit.Assert.*;
+import org.junit.Test;
 
 public class ArrayValueModelTest {
 
@@ -47,24 +49,4 @@ public class ArrayValueModelTest {
         assertTrue(ArrayValueModel.STRING_UTF8_UINT8_LENGTH.isDynamicSize());
     }
 
-    /**
-     * Test method for {@link com.ponysdk.core.model.ArrayValueModel#isDynamicSize()}.
-     */
-    @Test
-    public void testMinSize() {
-        assertEquals(0, ArrayValueModel.BOOLEAN_FALSE.getMinSize());
-        assertEquals(0, ArrayValueModel.BOOLEAN_FALSE.getMinSize());
-        assertEquals(0, ArrayValueModel.NULL.getMinSize());
-        assertEquals(1, ArrayValueModel.STRING_UTF8_UINT8_LENGTH.getMinSize());
-        assertEquals(2, ArrayValueModel.STRING_UTF8_UINT16_LENGTH.getMinSize());
-        assertEquals(4, ArrayValueModel.STRING_UTF8_UINT32_LENGTH.getMinSize());
-        assertEquals(1, ArrayValueModel.STRING_ASCII_UINT8_LENGTH.getMinSize());
-        assertEquals(2, ArrayValueModel.STRING_ASCII_UINT16_LENGTH.getMinSize());
-        assertEquals(1, ArrayValueModel.BYTE.getMinSize());
-        assertEquals(2, ArrayValueModel.SHORT.getMinSize());
-        assertEquals(4, ArrayValueModel.INTEGER.getMinSize());
-        assertEquals(4, ArrayValueModel.FLOAT.getMinSize());
-        assertEquals(8, ArrayValueModel.DOUBLE.getMinSize());
-        assertEquals(8, ArrayValueModel.LONG.getMinSize());
-    }
 }
diff --git a/ponysdk/src/test/java/com/ponysdk/core/model/DateConverterTest.java b/ponysdk/src/test/java/com/ponysdk/core/model/DateConverterTest.java
index b613bfc2..5f5de50b 100644
--- a/ponysdk/src/test/java/com/ponysdk/core/model/DateConverterTest.java
+++ b/ponysdk/src/test/java/com/ponysdk/core/model/DateConverterTest.java
@@ -26,10 +26,8 @@ package com.ponysdk.core.model;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 
-import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;
-import java.util.stream.Collectors;
 
 import org.junit.Test;
 
@@ -40,20 +38,14 @@ public class DateConverterTest {
      */
     @Test
     public void testEncodeDates() {
-        final List<Long> timestamps = new ArrayList<>();
-        for (int i = 0; i < 256; i++) {
-            timestamps.add(i * 1000L);
-        }
-        final Long[][] encoded = DateConverter.encode(timestamps.stream().map(Date::new).collect(Collectors.toList()));
-        assertEquals(encoded.length, 2);
-        assertEquals(encoded[0].length, 255);
-        assertEquals(encoded[1].length, 1);
-        int i = 0;
-        for (final Long[] part : encoded) {
-            for (final Long v : part) {
-                assertEquals("Index: " + i, v, timestamps.get(i++));
-            }
-        }
+        final int firstTimestamp = 0;
+        final int lastTimestamp = 1000;
+        final List<Date> dates = List.of(new Date(firstTimestamp), new Date(lastTimestamp));
+        final Long[] timestamp = DateConverter.encode(dates);
+        assertEquals(dates.size(), timestamp.length);
+        assertEquals(firstTimestamp, (long) timestamp[0]);
+        assertEquals(lastTimestamp, (long) timestamp[1]);
+
         assertNull(DateConverter.encode((List<Date>) null));
         assertNull(DateConverter.encode(List.of()));
     }
diff --git a/ponysdk/src/test/java/com/ponysdk/core/server/context/PObjectCacheTest.java b/ponysdk/src/test/java/com/ponysdk/core/server/context/PObjectCacheTest.java
index 5b421d61..e1036b3b 100644
--- a/ponysdk/src/test/java/com/ponysdk/core/server/context/PObjectCacheTest.java
+++ b/ponysdk/src/test/java/com/ponysdk/core/server/context/PObjectCacheTest.java
@@ -23,13 +23,14 @@
 
 package com.ponysdk.core.server.context;
 
-import com.ponysdk.test.PSuite;
-import com.ponysdk.core.ui.basic.Element;
-import com.ponysdk.core.ui.basic.PObject;
+import static org.junit.Assert.assertEquals;
+
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.junit.Assert.assertEquals;
+import com.ponysdk.core.ui.basic.Element;
+import com.ponysdk.core.ui.basic.PObject;
+import com.ponysdk.core.ui.basic.PSuite;
 
 public class PObjectCacheTest extends PSuite {
 
diff --git a/ponysdk/src/test/java/com/ponysdk/core/server/websocket/WebSocketTest.java b/ponysdk/src/test/java/com/ponysdk/core/server/websocket/WebSocketTest.java
index 288bd661..ebc2edb8 100644
--- a/ponysdk/src/test/java/com/ponysdk/core/server/websocket/WebSocketTest.java
+++ b/ponysdk/src/test/java/com/ponysdk/core/server/websocket/WebSocketTest.java
@@ -1,253 +1,253 @@
-/*
- * Copyright (c) 2019 PonySDK
- *  Owners:
- *  Luciano Broussal  <luciano.broussal AT gmail.com>
- *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
- *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
- *
- *  WebSite:
- *  http://code.google.com/p/pony-sdk/
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-
-package com.ponysdk.core.server.websocket;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.concurrent.TimeUnit;
-
-import javax.json.JsonArrayBuilder;
-import javax.json.JsonObjectBuilder;
-import javax.json.JsonValue;
-import javax.json.spi.JsonProvider;
-
-import org.eclipse.jetty.websocket.api.Session;
-import org.eclipse.jetty.websocket.api.StatusCode;
-import org.eclipse.jetty.websocket.servlet.ServletUpgradeRequest;
-import org.junit.Before;
-import org.junit.Test;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Mockito;
-
-import com.ponysdk.core.model.ClientToServerModel;
-import com.ponysdk.core.model.ServerToClientModel;
-import com.ponysdk.core.server.application.ApplicationConfiguration;
-import com.ponysdk.core.server.application.ApplicationManager;
-import com.ponysdk.core.server.application.UIContext;
-import com.ponysdk.core.server.stm.TxnContext;
-import com.ponysdk.core.util.Pair;
-
-public class WebSocketTest {
-
-    private WebSocket webSocket;
-    private UIContext uiContext;
-    private Session session;
-
-    private final List<Pair<ServerToClientModel, Object>> encodedValues = new ArrayList<>();
-
-    @Before
-    public void setUp() throws Exception {
-        webSocket = new WebSocket() {
-
-            @Override
-            void flush0() {
-                // Nothing to do
-            }
-
-            @Override
-            public void encode(final ServerToClientModel model, final Object value) {
-                encodedValues.add(new Pair<>(model, value));
-            }
-        };
-
-        encodedValues.clear();
-
-        final ServletUpgradeRequest request = Mockito.mock(ServletUpgradeRequest.class);
-        webSocket.setRequest(request);
-        webSocket.setContext(Mockito.mock(TxnContext.class));
-
-        final ApplicationManager applicationManager = Mockito.mock(ApplicationManager.class);
-        final ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
-        applicationConfiguration.setHeartBeatPeriod(0, TimeUnit.SECONDS);
-        Mockito.when(applicationManager.getConfiguration()).thenReturn(applicationConfiguration);
-        webSocket.setApplicationManager(applicationManager);
-
-        session = Mockito.mock(Session.class);
-        Mockito.when(session.isOpen()).thenReturn(true);
-        webSocket.onWebSocketConnect(session);
-
-        final ArgumentCaptor<UIContext> uiContextCaptor = ArgumentCaptor.forClass(UIContext.class);
-        Mockito.verify(applicationManager, Mockito.times(1)).startApplication(uiContextCaptor.capture());
-        uiContext = uiContextCaptor.getValue();
-
-        assertEquals(request, webSocket.getRequest());
-    }
-
-    /**
-     * Test method for {@link com.ponysdk.core.server.websocket.WebSocket#onWebSocketText(java.lang.String)}.
-     */
-    @Test
-    public void testInstruction() {
-        final JsonProvider provider = JsonProvider.provider();
-        final JsonObjectBuilder job = provider.createObjectBuilder();
-        final JsonArrayBuilder jab = provider.createArrayBuilder();
-        final JsonObjectBuilder job1 = provider.createObjectBuilder();
-        job1.add(ClientToServerModel.OBJECT_ID.toStringValue(), false);
-        jab.add(job1.build());
-        job.add(ClientToServerModel.APPLICATION_INSTRUCTIONS.toStringValue(), jab);
-        webSocket.onWebSocketText(job.build().toString());
-    }
-
-    /**
-     * Test method for {@link com.ponysdk.core.server.websocket.WebSocket#sendRoundTrip()} and
-     * {@link com.ponysdk.core.server.websocket.WebSocket#onWebSocketText(java.lang.String)}.
-     */
-    @Test
-    public void testRoundTrip() {
-        for (int i = 0; i < 10; i++) { // Warmup
-            webSocket.sendRoundTrip();
-
-            final JsonObjectBuilder job = JsonProvider.provider().createObjectBuilder();
-            job.add(ClientToServerModel.TERMINAL_LATENCY.toStringValue(), 1); // 1 ms of terminal latency
-            webSocket.onWebSocketText(job.build().toString());
-        }
-
-        assertEquals(1, uiContext.getTerminalLatency(), 0.01);
-        assertEquals(uiContext.getRoundtripLatency(), uiContext.getTerminalLatency() + uiContext.getNetworkLatency(), 0.01);
-    }
-
-    /**
-     * Test method for {@link com.ponysdk.core.server.websocket.WebSocket#onWebSocketText(java.lang.String)}
-     */
-    @Test
-    public void testOnWebSocketTextRoundTripLatency() {
-        encodedValues.clear();
-        final JsonObjectBuilder job = JsonProvider.provider().createObjectBuilder();
-        job.add(ClientToServerModel.HEARTBEAT_REQUEST.toStringValue(), JsonValue.NULL);
-        webSocket.onWebSocketText(job.build().toString());
-        assertEquals(encodedValues,
-            List.of(new Pair<>(ServerToClientModel.HEARTBEAT, null), new Pair<>(ServerToClientModel.END, null)));
-    }
-
-    /**
-     * Test method for {@link com.ponysdk.core.server.websocket.WebSocket#onWebSocketConnect(Session)}
-     */
-    @Test
-    public void testOnWebSocketConnect() {
-        assertEquals(encodedValues.get(0), new Pair<>(ServerToClientModel.CREATE_CONTEXT, uiContext.getID()));
-        assertEquals(encodedValues.get(1), new Pair<>(ServerToClientModel.OPTION_FORMFIELD_TABULATION, false));
-        assertEquals(encodedValues.get(2), new Pair<>(ServerToClientModel.HEARTBEAT_PERIOD, 0));
-    }
-
-    /**
-     * Test method for {@link com.ponysdk.core.server.websocket.WebSocket#onWebSocketText(java.lang.String)}.
-     */
-    @Test
-    public void testErrorMessage() {
-        final JsonObjectBuilder job = JsonProvider.provider().createObjectBuilder();
-        job.add(ClientToServerModel.ERROR_MSG.toStringValue(), "Test");
-        job.add(ClientToServerModel.OBJECT_ID.toStringValue(), 1);
-        webSocket.onWebSocketText(job.build().toString());
-    }
-
-    /**
-     * Test method for {@link com.ponysdk.core.server.websocket.WebSocket#onWebSocketText(java.lang.String)}.
-     */
-    @Test
-    public void testWarningMessage() {
-        final JsonObjectBuilder job = JsonProvider.provider().createObjectBuilder();
-        job.add(ClientToServerModel.WARN_MSG.toStringValue(), "Test");
-        job.add(ClientToServerModel.OBJECT_ID.toStringValue(), 1);
-        webSocket.onWebSocketText(job.build().toString());
-    }
-
-    /**
-     * Test method for {@link com.ponysdk.core.server.websocket.WebSocket#onWebSocketText(java.lang.String)}.
-     */
-    @Test
-    public void testInfoMessage() {
-        final JsonObjectBuilder job = JsonProvider.provider().createObjectBuilder();
-        job.add(ClientToServerModel.INFO_MSG.toStringValue(), "Test");
-        job.add(ClientToServerModel.OBJECT_ID.toStringValue(), 1);
-        webSocket.onWebSocketText(job.build().toString());
-    }
-
-    /**
-     * Test method for {@link com.ponysdk.core.server.websocket.WebSocket#onWebSocketText(java.lang.String)}.
-     */
-    @Test
-    public void testUnknowMessage() {
-        webSocket.setMonitor(new WebsocketMonitor() {
-
-            @Override
-            public void onMessageUnprocessed(final WebSocket webSocket, final String message) {
-            }
-
-            @Override
-            public void onMessageReceived(final WebSocket webSocket, final String message) {
-            }
-
-            @Override
-            public void onMessageProcessed(final WebSocket webSocket, final String message) {
-            }
-        });
-
-        final JsonObjectBuilder job = JsonProvider.provider().createObjectBuilder();
-        job.add(ClientToServerModel.COOKIE_NAME.toStringValue(), 0);
-        webSocket.onWebSocketText(job.build().toString());
-    }
-
-    /**
-     * Test method for {@link com.ponysdk.core.server.websocket.WebSocket#onWebSocketError(java.lang.Throwable)}.
-     */
-    @Test
-    public void testOnWebSocketError() {
-        assertTrue(uiContext.isAlive());
-        webSocket.onWebSocketError(new Exception("Unit test"));
-        assertFalse(uiContext.isAlive());
-    }
-
-    /**
-     * Test method for {@link com.ponysdk.core.server.websocket.WebSocket#onWebSocketClose(int, java.lang.String)}.
-     */
-    @Test
-    public void testOnWebSocketClose() {
-        assertTrue(uiContext.isAlive());
-        webSocket.onWebSocketClose(StatusCode.NORMAL, "Close");
-        assertFalse(uiContext.isAlive());
-    }
-
-    /**
-     * Test method for {@link com.ponysdk.core.server.websocket.WebSocket#onWebSocketBinary(byte[], int, int)}.
-     */
-    @Test
-    public void testOnWebSocketBinary() {
-        // Not implemented yet
-        webSocket.onWebSocketBinary(null, 0, 0);
-    }
-
-    /**
-     * Test method for {@link com.ponysdk.core.server.websocket.WebSocket#close()}.
-     */
-    @Test
-    public void testClose() {
-        webSocket.close();
-        Mockito.verify(session, Mockito.times(1)).close();
-    }
-
-}
+/*
+ * Copyright (c) 2019 PonySDK
+ *  Owners:
+ *  Luciano Broussal  <luciano.broussal AT gmail.com>
+ *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
+ *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
+ *
+ *  WebSite:
+ *  http://code.google.com/p/pony-sdk/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.ponysdk.core.server.websocket;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.TimeUnit;
+
+import javax.json.JsonArrayBuilder;
+import javax.json.JsonObjectBuilder;
+import javax.json.JsonValue;
+import javax.json.spi.JsonProvider;
+
+import org.eclipse.jetty.websocket.api.Session;
+import org.eclipse.jetty.websocket.api.StatusCode;
+import org.eclipse.jetty.websocket.servlet.ServletUpgradeRequest;
+import org.junit.Before;
+import org.junit.Test;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Mockito;
+
+import com.ponysdk.core.model.ClientToServerModel;
+import com.ponysdk.core.model.ServerToClientModel;
+import com.ponysdk.core.server.application.ApplicationConfiguration;
+import com.ponysdk.core.server.application.ApplicationManager;
+import com.ponysdk.core.server.application.UIContext;
+import com.ponysdk.core.server.stm.TxnContext;
+import com.ponysdk.core.util.Pair;
+
+public class WebSocketTest {
+
+    private WebSocket webSocket;
+    private UIContext uiContext;
+    private Session session;
+
+    private final List<Pair<ServerToClientModel, Object>> encodedValues = new ArrayList<>();
+
+    @Before
+    public void setUp() throws Exception {
+        webSocket = new WebSocket() {
+
+            @Override
+            void flush0() {
+                // Nothing to do
+            }
+
+            @Override
+            public void encode(final ServerToClientModel model, final Object value) {
+                encodedValues.add(new Pair<>(model, value));
+            }
+        };
+
+        encodedValues.clear();
+
+        final ServletUpgradeRequest request = Mockito.mock(ServletUpgradeRequest.class);
+        webSocket.setRequest(request);
+        webSocket.setContext(Mockito.mock(TxnContext.class));
+
+        final ApplicationManager applicationManager = Mockito.mock(ApplicationManager.class);
+        final ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
+        applicationConfiguration.setHeartBeatPeriod(0, TimeUnit.SECONDS);
+        Mockito.when(applicationManager.getConfiguration()).thenReturn(applicationConfiguration);
+        webSocket.setApplicationManager(applicationManager);
+
+        session = Mockito.mock(Session.class);
+        Mockito.when(session.isOpen()).thenReturn(true);
+        webSocket.onWebSocketConnect(session);
+
+        final ArgumentCaptor<UIContext> uiContextCaptor = ArgumentCaptor.forClass(UIContext.class);
+        Mockito.verify(applicationManager, Mockito.times(1)).startApplication(uiContextCaptor.capture());
+        uiContext = uiContextCaptor.getValue();
+
+        assertEquals(request, webSocket.getRequest());
+    }
+
+    /**
+     * Test method for {@link com.ponysdk.core.server.websocket.WebSocket#onWebSocketText(java.lang.String)}.
+     */
+    @Test
+    public void testInstruction() {
+        final JsonProvider provider = JsonProvider.provider();
+        final JsonObjectBuilder job = provider.createObjectBuilder();
+        final JsonArrayBuilder jab = provider.createArrayBuilder();
+        final JsonObjectBuilder job1 = provider.createObjectBuilder();
+        job1.add(ClientToServerModel.OBJECT_ID.toStringValue(), false);
+        jab.add(job1.build());
+        job.add(ClientToServerModel.APPLICATION_INSTRUCTIONS.toStringValue(), jab);
+        webSocket.onWebSocketText(job.build().toString());
+    }
+
+    /**
+     * Test method for {@link com.ponysdk.core.server.websocket.WebSocket#sendRoundTrip()} and
+     * {@link com.ponysdk.core.server.websocket.WebSocket#onWebSocketText(java.lang.String)}.
+     */
+    @Test
+    public void testRoundTrip() {
+        for (int i = 0; i < 10; i++) { // Warmup
+            webSocket.sendRoundTrip();
+
+            final JsonObjectBuilder job = JsonProvider.provider().createObjectBuilder();
+            job.add(ClientToServerModel.TERMINAL_LATENCY.toStringValue(), 1); // 1 ms of terminal latency
+            webSocket.onWebSocketText(job.build().toString());
+        }
+
+        assertEquals(1, uiContext.getTerminalLatency(), 0.01);
+        assertEquals(uiContext.getRoundtripLatency(), uiContext.getTerminalLatency() + uiContext.getNetworkLatency(), 0.01);
+    }
+
+    /**
+     * Test method for {@link com.ponysdk.core.server.websocket.WebSocket#onWebSocketText(java.lang.String)}
+     */
+    @Test
+    public void testOnWebSocketTextRoundTripLatency() {
+        encodedValues.clear();
+        final JsonObjectBuilder job = JsonProvider.provider().createObjectBuilder();
+        job.add(ClientToServerModel.HEARTBEAT_REQUEST.toStringValue(), JsonValue.NULL);
+        webSocket.onWebSocketText(job.build().toString());
+        assertEquals(encodedValues,
+            List.of(new Pair<>(ServerToClientModel.HEARTBEAT, null), new Pair<>(ServerToClientModel.END, null)));
+    }
+
+    /**
+     * Test method for {@link com.ponysdk.core.server.websocket.WebSocket#onWebSocketConnect(Session)}
+     */
+    @Test
+    public void testOnWebSocketConnect() {
+        assertEquals(encodedValues.get(0), new Pair<>(ServerToClientModel.CREATE_CONTEXT, uiContext.getID()));
+        assertEquals(encodedValues.get(1), new Pair<>(ServerToClientModel.OPTION_FORMFIELD_TABULATION, false));
+        assertEquals(encodedValues.get(2), new Pair<>(ServerToClientModel.HEARTBEAT_PERIOD, 0));
+    }
+
+    /**
+     * Test method for {@link com.ponysdk.core.server.websocket.WebSocket#onWebSocketText(java.lang.String)}.
+     */
+    @Test
+    public void testErrorMessage() {
+        final JsonObjectBuilder job = JsonProvider.provider().createObjectBuilder();
+        job.add(ClientToServerModel.ERROR_MSG.toStringValue(), "Test");
+        job.add(ClientToServerModel.OBJECT_ID.toStringValue(), 1);
+        webSocket.onWebSocketText(job.build().toString());
+    }
+
+    /**
+     * Test method for {@link com.ponysdk.core.server.websocket.WebSocket#onWebSocketText(java.lang.String)}.
+     */
+    @Test
+    public void testWarningMessage() {
+        final JsonObjectBuilder job = JsonProvider.provider().createObjectBuilder();
+        job.add(ClientToServerModel.WARN_MSG.toStringValue(), "Test");
+        job.add(ClientToServerModel.OBJECT_ID.toStringValue(), 1);
+        webSocket.onWebSocketText(job.build().toString());
+    }
+
+    /**
+     * Test method for {@link com.ponysdk.core.server.websocket.WebSocket#onWebSocketText(java.lang.String)}.
+     */
+    @Test
+    public void testInfoMessage() {
+        final JsonObjectBuilder job = JsonProvider.provider().createObjectBuilder();
+        job.add(ClientToServerModel.INFO_MSG.toStringValue(), "Test");
+        job.add(ClientToServerModel.OBJECT_ID.toStringValue(), 1);
+        webSocket.onWebSocketText(job.build().toString());
+    }
+
+    /**
+     * Test method for {@link com.ponysdk.core.server.websocket.WebSocket#onWebSocketText(java.lang.String)}.
+     */
+    @Test
+    public void testUnknowMessage() {
+        webSocket.setMonitor(new WebsocketMonitor() {
+
+            @Override
+            public void onMessageUnprocessed(final WebSocket webSocket, final String message) {
+            }
+
+            @Override
+            public void onMessageReceived(final WebSocket webSocket, final String message) {
+            }
+
+            @Override
+            public void onMessageProcessed(final WebSocket webSocket, final String message) {
+            }
+        });
+
+        final JsonObjectBuilder job = JsonProvider.provider().createObjectBuilder();
+        job.add(ClientToServerModel.COOKIE_NAME.toStringValue(), 0);
+        webSocket.onWebSocketText(job.build().toString());
+    }
+
+    /**
+     * Test method for {@link com.ponysdk.core.server.websocket.WebSocket#onWebSocketError(java.lang.Throwable)}.
+     */
+    @Test
+    public void testOnWebSocketError() {
+        assertTrue(uiContext.isAlive());
+        webSocket.onWebSocketError(new Exception("Unit test"));
+        assertFalse(uiContext.isAlive());
+    }
+
+    /**
+     * Test method for {@link com.ponysdk.core.server.websocket.WebSocket#onWebSocketClose(int, java.lang.String)}.
+     */
+    @Test
+    public void testOnWebSocketClose() {
+        assertTrue(uiContext.isAlive());
+        webSocket.onWebSocketClose(StatusCode.NORMAL, "Close");
+        assertFalse(uiContext.isAlive());
+    }
+
+    /**
+     * Test method for {@link com.ponysdk.core.server.websocket.WebSocket#onWebSocketBinary(byte[], int, int)}.
+     */
+    @Test
+    public void testOnWebSocketBinary() {
+        // Not implemented yet
+        webSocket.onWebSocketBinary(null, 0, 0);
+    }
+
+    /**
+     * Test method for {@link com.ponysdk.core.server.websocket.WebSocket#close()}.
+     */
+    @Test
+    public void testClose() {
+        webSocket.close();
+        Mockito.verify(session, Mockito.times(1)).close();
+    }
+
+}
diff --git a/ponysdk/src/test/java/com/ponysdk/core/ui/basic/BasicUITest.java b/ponysdk/src/test/java/com/ponysdk/core/ui/basic/BasicUITest.java
index be3ba530..162a11d1 100644
--- a/ponysdk/src/test/java/com/ponysdk/core/ui/basic/BasicUITest.java
+++ b/ponysdk/src/test/java/com/ponysdk/core/ui/basic/BasicUITest.java
@@ -23,7 +23,6 @@
 
 package com.ponysdk.core.ui.basic;
 
-import com.ponysdk.test.PSuite;
 import org.junit.Assert;
 import org.junit.Test;
 import org.mockito.Mockito;
diff --git a/ponysdk/src/test/java/com/ponysdk/core/ui/basic/ElementTest.java b/ponysdk/src/test/java/com/ponysdk/core/ui/basic/ElementTest.java
index 94d90da6..d3848182 100644
--- a/ponysdk/src/test/java/com/ponysdk/core/ui/basic/ElementTest.java
+++ b/ponysdk/src/test/java/com/ponysdk/core/ui/basic/ElementTest.java
@@ -3,7 +3,6 @@ package com.ponysdk.core.ui.basic;
 
 import static org.junit.Assert.assertEquals;
 
-import com.ponysdk.test.PSuite;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
diff --git a/ponysdk/src/test/java/com/ponysdk/core/ui/basic/FormTest.java b/ponysdk/src/test/java/com/ponysdk/core/ui/basic/FormTest.java
index a4eb8c3a..00a6491a 100644
--- a/ponysdk/src/test/java/com/ponysdk/core/ui/basic/FormTest.java
+++ b/ponysdk/src/test/java/com/ponysdk/core/ui/basic/FormTest.java
@@ -23,7 +23,6 @@
 
 package com.ponysdk.core.ui.basic;
 
-import com.ponysdk.test.PSuite;
 import org.junit.Assert;
 import org.junit.Test;
 
diff --git a/ponysdk/src/main/java/com/ponysdk/test/ModelWriterForTest.java b/ponysdk/src/test/java/com/ponysdk/core/ui/basic/ModelWriterForTest.java
similarity index 52%
rename from ponysdk/src/main/java/com/ponysdk/test/ModelWriterForTest.java
rename to ponysdk/src/test/java/com/ponysdk/core/ui/basic/ModelWriterForTest.java
index 139ae6fa..6c511d38 100644
--- a/ponysdk/src/main/java/com/ponysdk/test/ModelWriterForTest.java
+++ b/ponysdk/src/test/java/com/ponysdk/core/ui/basic/ModelWriterForTest.java
@@ -1,11 +1,15 @@
-package com.ponysdk.test;
+package com.ponysdk.core.ui.basic;
 
+import com.google.gwt.json.client.JSONObject;
+import com.ponysdk.core.model.ClientToServerModel;
 import com.ponysdk.core.model.ServerToClientModel;
 import com.ponysdk.core.server.application.UIContext;
-import com.ponysdk.core.ui.basic.PObject;
-import com.ponysdk.core.ui.basic.PWindow;
+import com.ponysdk.core.server.websocket.WebsocketEncoder;
 import com.ponysdk.core.writer.ModelWriter;
 
+import javax.json.Json;
+import javax.json.JsonObject;
+
 public class ModelWriterForTest extends ModelWriter {
     private PWindow window;
     private int lastObjectID;
@@ -40,12 +44,12 @@ public class ModelWriterForTest extends ModelWriter {
         } else if (model == ServerToClientModel.OPEN) {
             PObject object = UIContext.get().getObject(lastObjectID);
             if (object instanceof PWindow) {
-                PEmulator.windowOpened(object);
+                simulateWindowOpened(object);
             }
         } else if (model == ServerToClientModel.CLOSE) {
             PObject object = UIContext.get().getObject(lastObjectID);
             if (object instanceof PWindow) {
-                PEmulator.windowClosed(object);
+                simulateWindowClosed(object);
             }
         } else if (model == ServerToClientModel.HISTORY_FIRE_EVENTS) {
             if (Boolean.TRUE.equals(value)) {
@@ -53,4 +57,24 @@ public class ModelWriterForTest extends ModelWriter {
             }
         }
     }
+
+    public static void simulateWindowOpened(PObject object) {
+        JsonObject jsonObject = Json.createObjectBuilder().add(ClientToServerModel.HANDLER_OPEN.toStringValue(), "url").build();
+        object.onClientData(jsonObject);
+    }
+
+    public static void simulateWindowClosed(PObject object) {
+        JsonObject jsonObject = Json.createObjectBuilder().addNull(ClientToServerModel.HANDLER_CLOSE.toStringValue()).build();
+        object.onClientData(jsonObject);
+    }
+
+    public static void simulateValueChange(PObject object, boolean value) {
+        JsonObject jsonObject = Json.createObjectBuilder().add(ClientToServerModel.HANDLER_BOOLEAN_VALUE_CHANGE.toStringValue(), value).build();
+        object.onClientData(jsonObject);
+    }
+
+    public static void simulateAddon(PObject object, JSONObject value) {
+        JsonObject jsonObject = Json.createObjectBuilder().add(ClientToServerModel.NATIVE.toStringValue(), "NATIVE").add("NATIVE", value.toString()).build();
+        object.onClientData(jsonObject);
+    }
 }
diff --git a/ponysdk/src/test/java/com/ponysdk/core/ui/basic/PAddOnTest.java b/ponysdk/src/test/java/com/ponysdk/core/ui/basic/PAddOnTest.java
index dde9562f..bd061719 100644
--- a/ponysdk/src/test/java/com/ponysdk/core/ui/basic/PAddOnTest.java
+++ b/ponysdk/src/test/java/com/ponysdk/core/ui/basic/PAddOnTest.java
@@ -29,7 +29,6 @@ import static org.junit.Assert.assertNotNull;
 import javax.json.Json;
 import javax.json.JsonObject;
 
-import com.ponysdk.test.PSuite;
 import org.junit.Test;
 
 import com.ponysdk.core.model.WidgetType;
diff --git a/ponysdk/src/test/java/com/ponysdk/core/ui/basic/PAnchorTest.java b/ponysdk/src/test/java/com/ponysdk/core/ui/basic/PAnchorTest.java
index 2d4d2e12..cfe7dff5 100644
--- a/ponysdk/src/test/java/com/ponysdk/core/ui/basic/PAnchorTest.java
+++ b/ponysdk/src/test/java/com/ponysdk/core/ui/basic/PAnchorTest.java
@@ -24,7 +24,6 @@
 package com.ponysdk.core.ui.basic;
 
 import com.ponysdk.core.model.WidgetType;
-import com.ponysdk.test.PSuite;
 import org.junit.Test;
 
 import static org.junit.Assert.*;
@@ -111,24 +110,4 @@ public class PAnchorTest extends PSuite {
         assertTrue(anchor.isShowLoadingOnRequest());
     }
 
-    @Test
-    public void testDumDOM() {
-        final PAnchor a = Element.newPAnchor();
-        String ID = String.valueOf(a.getID());
-
-        assertEquals("<a pid=\"" + ID + "\" class=\"\"></a>", a.dumpDOM());
-
-        a.setHTML("<a>html</a>");
-        assertEquals("<a pid=\"" + ID + "\" class=\"\"><a>html</a></a>", a.dumpDOM());
-
-        a.setHTML("text");
-        assertEquals("<a pid=\"" + ID + "\" class=\"\">text</a>", a.dumpDOM());
-
-        a.addStyleName("style");
-        assertEquals("<a pid=\"" + ID + "\" class=\"style\">text</a>", a.dumpDOM());
-
-        a.setHref("href");
-        assertEquals("<a pid=\"" + ID + "\" class=\"style\" href=\"href\">text</a>", a.dumpDOM());
-    }
-
 }
diff --git a/ponysdk/src/test/java/com/ponysdk/core/ui/basic/PButtonTest.java b/ponysdk/src/test/java/com/ponysdk/core/ui/basic/PButtonTest.java
index 253ba4aa..4d0cddfb 100644
--- a/ponysdk/src/test/java/com/ponysdk/core/ui/basic/PButtonTest.java
+++ b/ponysdk/src/test/java/com/ponysdk/core/ui/basic/PButtonTest.java
@@ -23,11 +23,15 @@
 
 package com.ponysdk.core.ui.basic;
 
-import com.ponysdk.core.model.WidgetType;
-import com.ponysdk.test.PSuite;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
+
 import org.junit.Test;
 
-import static org.junit.Assert.*;
+import com.ponysdk.core.model.WidgetType;
 
 public class PButtonTest extends PSuite {
 
@@ -97,21 +101,4 @@ public class PButtonTest extends PSuite {
         assertTrue(widget.isShowLoadingOnRequest());
     }
 
-    @Test
-    public void testDumDOM() {
-        final PButton button = Element.newPButton();
-        String ID = String.valueOf(button.getID());
-
-        assertEquals("<button pid=\"" + ID + "\" class=\"\"></button>", button.dumpDOM());
-
-        button.setHTML("<a>html</a>");
-        assertEquals("<button pid=\"" + ID + "\" class=\"\"><a>html</a></button>", button.dumpDOM());
-
-        button.setHTML("text");
-        assertEquals("<button pid=\"" + ID + "\" class=\"\">text</button>", button.dumpDOM());
-
-        button.addStyleName("style");
-        assertEquals("<button pid=\"" + ID + "\" class=\"style\">text</button>", button.dumpDOM());
-    }
-
 }
diff --git a/ponysdk/src/test/java/com/ponysdk/core/ui/basic/PCheckBoxTest.java b/ponysdk/src/test/java/com/ponysdk/core/ui/basic/PCheckBoxTest.java
index 07361a6d..2fbabf50 100644
--- a/ponysdk/src/test/java/com/ponysdk/core/ui/basic/PCheckBoxTest.java
+++ b/ponysdk/src/test/java/com/ponysdk/core/ui/basic/PCheckBoxTest.java
@@ -26,8 +26,6 @@ package com.ponysdk.core.ui.basic;
 import com.ponysdk.core.model.PCheckBoxState;
 import com.ponysdk.core.model.WidgetType;
 import com.ponysdk.core.ui.basic.event.PValueChangeHandler;
-import com.ponysdk.test.PEmulator;
-import com.ponysdk.test.PSuite;
 import org.junit.Test;
 
 import java.util.concurrent.atomic.AtomicInteger;
@@ -96,29 +94,9 @@ public class PCheckBoxTest extends PSuite {
         w1.addValueChangeHandler(handler);
         assertEquals(w1.getValueChangeHandlers().size(), 1);
 
-        PEmulator.valueChange(w1, true);
+        ModelWriterForTest.simulateValueChange(w1, true);
         assertEquals(handlerFiredCount.get(), 1);
-        PEmulator.valueChange(w1, false);
+        ModelWriterForTest.simulateValueChange(w1, false);
         assertEquals(handlerFiredCount.get(), 2);
     }
-
-    @Test
-    public void testDumDOM() {
-        final PCheckBox checkBox = Element.newPCheckBox();
-        String ID = String.valueOf(checkBox.getID());
-
-        assertEquals("<input type=\"checkbox\" pid=\"" + ID + "\" class=\"\"></input>", checkBox.dumpDOM());
-
-        checkBox.setHTML("<a>html</a>");
-        assertEquals("<input type=\"checkbox\" pid=\"" + ID + "\" class=\"\"><a>html</a></input>", checkBox.dumpDOM());
-
-        checkBox.setHTML("text");
-        assertEquals("<input type=\"checkbox\" pid=\"" + ID + "\" class=\"\">text</input>", checkBox.dumpDOM());
-
-        checkBox.addStyleName("style");
-        assertEquals("<input type=\"checkbox\" pid=\"" + ID + "\" class=\"style\">text</input>", checkBox.dumpDOM());
-
-        checkBox.setState(PCheckBoxState.CHECKED);
-        assertEquals("<input type=\"checkbox\" pid=\"" + ID + "\" checked class=\"style\">text</input>", checkBox.dumpDOM());
-    }
 }
diff --git a/ponysdk/src/test/java/com/ponysdk/core/ui/basic/PElementTest.java b/ponysdk/src/test/java/com/ponysdk/core/ui/basic/PElementTest.java
index 7153fa30..803f5ace 100644
--- a/ponysdk/src/test/java/com/ponysdk/core/ui/basic/PElementTest.java
+++ b/ponysdk/src/test/java/com/ponysdk/core/ui/basic/PElementTest.java
@@ -24,7 +24,6 @@
 package com.ponysdk.core.ui.basic;
 
 import com.ponysdk.core.model.WidgetType;
-import com.ponysdk.test.PSuite;
 import org.jsoup.Jsoup;
 import org.jsoup.nodes.Document;
 import org.junit.Test;
diff --git a/ponysdk/src/test/java/com/ponysdk/core/ui/basic/PFlowPanelTest.java b/ponysdk/src/test/java/com/ponysdk/core/ui/basic/PFlowPanelTest.java
index 8a9541ca..ba97c2a4 100644
--- a/ponysdk/src/test/java/com/ponysdk/core/ui/basic/PFlowPanelTest.java
+++ b/ponysdk/src/test/java/com/ponysdk/core/ui/basic/PFlowPanelTest.java
@@ -1,7 +1,6 @@
 
 package com.ponysdk.core.ui.basic;
 
-import com.ponysdk.test.PSuite;
 import org.junit.Test;
 
 import com.ponysdk.core.model.WidgetType;
diff --git a/ponysdk/src/test/java/com/ponysdk/core/ui/basic/PHistoryTest.java b/ponysdk/src/test/java/com/ponysdk/core/ui/basic/PHistoryTest.java
index 1ee92687..9795b9fa 100644
--- a/ponysdk/src/test/java/com/ponysdk/core/ui/basic/PHistoryTest.java
+++ b/ponysdk/src/test/java/com/ponysdk/core/ui/basic/PHistoryTest.java
@@ -23,8 +23,9 @@
 
 package com.ponysdk.core.ui.basic;
 
+import com.ponysdk.core.model.WidgetType;
 import com.ponysdk.core.server.application.UIContext;
-import com.ponysdk.test.PSuite;
+import com.ponysdk.core.ui.basic.event.PCloseHandler;
 import com.ponysdk.core.ui.basic.event.PValueChangeHandler;
 import org.junit.Test;
 
diff --git a/ponysdk/src/main/java/com/ponysdk/test/PSuite.java b/ponysdk/src/test/java/com/ponysdk/core/ui/basic/PSuite.java
similarity index 88%
rename from ponysdk/src/main/java/com/ponysdk/test/PSuite.java
rename to ponysdk/src/test/java/com/ponysdk/core/ui/basic/PSuite.java
index 548cded9..1fb4738c 100644
--- a/ponysdk/src/main/java/com/ponysdk/test/PSuite.java
+++ b/ponysdk/src/test/java/com/ponysdk/core/ui/basic/PSuite.java
@@ -21,8 +21,11 @@
  * the License.
  */
 
-package com.ponysdk.test;
+package com.ponysdk.core.ui.basic;
 
+import com.ponysdk.core.model.ClientToServerModel;
+import com.ponysdk.core.model.ServerToClientModel;
+import com.ponysdk.core.server.websocket.WebsocketEncoder;
 import org.eclipse.jetty.websocket.servlet.ServletUpgradeRequest;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
@@ -35,6 +38,10 @@ import com.ponysdk.core.server.stm.Txn;
 import com.ponysdk.core.server.stm.TxnContext;
 import com.ponysdk.core.server.websocket.WebSocket;
 import com.ponysdk.core.writer.ModelWriter;
+import org.mockito.stubbing.OngoingStubbing;
+
+import javax.json.Json;
+import javax.json.JsonObject;
 
 public class PSuite {
 
diff --git a/ponysdk/src/test/java/com/ponysdk/core/ui/basic/PWindowTest.java b/ponysdk/src/test/java/com/ponysdk/core/ui/basic/PWindowTest.java
index 09e764a1..68a9bf4b 100644
--- a/ponysdk/src/test/java/com/ponysdk/core/ui/basic/PWindowTest.java
+++ b/ponysdk/src/test/java/com/ponysdk/core/ui/basic/PWindowTest.java
@@ -23,11 +23,14 @@
 
 package com.ponysdk.core.ui.basic;
 
-import com.ponysdk.test.PSuite;
+import com.ponysdk.core.model.WidgetType;
 import com.ponysdk.core.ui.basic.event.PCloseHandler;
+import com.ponysdk.core.ui.basic.event.POpenEvent;
 import com.ponysdk.core.ui.basic.event.POpenHandler;
 import org.junit.Test;
+import org.mockito.Mockito;
 
+import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 
 import static org.junit.Assert.*;
diff --git a/ponysdk/src/test/java/com/ponysdk/core/ui/basic/Validator.java b/ponysdk/src/test/java/com/ponysdk/core/ui/basic/Validator.java
index 12812b74..b2099b30 100644
--- a/ponysdk/src/test/java/com/ponysdk/core/ui/basic/Validator.java
+++ b/ponysdk/src/test/java/com/ponysdk/core/ui/basic/Validator.java
@@ -23,7 +23,6 @@
 
 package com.ponysdk.core.ui.basic;
 
-import com.ponysdk.test.PSuite;
 import org.junit.Assert;
 import org.junit.Test;
 
diff --git a/ponysdk/src/test/java/com/ponysdk/core/ui/eventbus/EventBusTest.java b/ponysdk/src/test/java/com/ponysdk/core/ui/eventbus/EventBusTest.java
index f70f16c9..82ada952 100644
--- a/ponysdk/src/test/java/com/ponysdk/core/ui/eventbus/EventBusTest.java
+++ b/ponysdk/src/test/java/com/ponysdk/core/ui/eventbus/EventBusTest.java
@@ -28,7 +28,7 @@ import static org.junit.Assert.assertTrue;
 
 import org.junit.Test;
 
-import com.ponysdk.test.PSuite;
+import com.ponysdk.core.ui.basic.PSuite;
 
 public class EventBusTest extends PSuite {
 
diff --git a/ponysdk/src/test/java/com/ponysdk/core/ui/form2/StringFormFieldTest.java b/ponysdk/src/test/java/com/ponysdk/core/ui/form2/StringFormFieldTest.java
deleted file mode 100644
index 5c85b4b9..00000000
--- a/ponysdk/src/test/java/com/ponysdk/core/ui/form2/StringFormFieldTest.java
+++ /dev/null
@@ -1,146 +0,0 @@
-/*
- * Copyright (c) 2017 PonySDK
- *  Owners:
- *  Luciano Broussal  <luciano.broussal AT gmail.com>
- *  Mathieu Barbier   <mathieu.barbier AT gmail.com>
- *  Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
- *
- *  WebSite:
- *  http://code.google.com/p/pony-sdk/
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-
-package com.ponysdk.core.ui.form2;
-
-import com.ponysdk.core.ui.basic.PWindow;
-import com.ponysdk.test.PSuite;
-import org.jsoup.Jsoup;
-import org.jsoup.nodes.Element;
-import org.junit.Assert;
-import org.junit.Test;
-
-public class StringFormFieldTest extends PSuite {
-
-    @Test
-    public void testDefaultValidation() {
-        final StringTextBoxFormField formField = new StringTextBoxFormField();
-        PWindow.getMain().add(formField);
-        Assert.assertEquals(ValidationResult.OK(), formField.validate());
-    }
-
-    @Test
-    public void testRequired() {
-        final StringTextBoxFormField formField = new StringTextBoxFormField(true);
-        PWindow.getMain().add(formField);
-        Assert.assertEquals(FormField.REQUIRED_RESULT, formField.validate());
-
-        final StringTextBoxFormField formField2 = new StringTextBoxFormField("Test", true);
-        PWindow.getMain().add(formField2);
-        Assert.assertEquals(FormField.REQUIRED_RESULT, formField2.validate());
-    }
-
-    @Test
-    public void testValidator() {
-        final StringTextBoxFormField formField = new StringTextBoxFormField();
-        PWindow.getMain().add(formField);
-        formField.setValidator(new NotEmptyFieldValidator("Custom Message"));
-        Assert.assertEquals("Custom Message", formField.validate().getErrorMessage());
-
-        final StringTextBoxFormField formField2 = new StringTextBoxFormField();
-        PWindow.getMain().add(formField2);
-        formField2.setValidator(new NotEmptyFieldValidator());
-        Assert.assertEquals("Empty Field", formField2.validate().getErrorMessage());
-    }
-
-    @Test
-    public void testValidatorAndRequired() {
-        final StringTextBoxFormField formField = new StringTextBoxFormField(true);
-        PWindow.getMain().add(formField);
-        formField.setValidator(new NotEmptyFieldValidator("Empty Field"));
-        Assert.assertEquals(FormField.REQUIRED_RESULT.getErrorMessage(), formField.validate().getErrorMessage());
-    }
-
-    @Test
-    public void testCaption() {
-        final StringTextBoxFormField formField = new StringTextBoxFormField("Caption");
-        PWindow.getMain().add(formField);
-        int id = formField.asWidget().getID();
-        Assert.assertEquals("Caption", formField.getCaption());
-        final Element e1 = Jsoup.parse(formField.asWidget().dumpDOM()).getElementsByAttributeValue("pid", id + "").first().child(0);
-        Assert.assertFalse(e1.hasAttr("hidden"));
-
-        formField.setCaption("Caption2");
-        Assert.assertEquals("Caption2", formField.getCaption());
-
-        formField.setCaption(null);
-        Assert.assertNull(formField.getCaption());
-        final Element e2 = Jsoup.parse(formField.asWidget().dumpDOM()).getElementsByAttributeValue("pid", id + "").first().child(0);
-        Assert.assertTrue(e2.hasAttr("hidden"));
-    }
-
-    @Test
-    public void testValidationWhenDisabled() {
-        final StringTextBoxFormField formField = new StringTextBoxFormField();
-        PWindow.getMain().add(formField);
-        formField.setValidator(new NotEmptyFieldValidator("Empty Field"));
-        formField.setEnabled(false);
-        Assert.assertEquals(ValidationResult.OK(), formField.validate());
-        formField.setEnabled(true);
-        Assert.assertEquals("Empty Field", formField.validate().getErrorMessage());
-    }
-
-    @Test
-    public void testDirty() {
-        final StringTextBoxFormField formField = new StringTextBoxFormField();
-        PWindow.getMain().add(formField);
-        formField.setInitialValue("Initial");
-        Assert.assertTrue(formField.hasDiff());
-        formField.setValue("Initial");
-        Assert.assertFalse(formField.hasDiff());
-        formField.setValue("Diff");
-        Assert.assertTrue(formField.hasDiff());
-        formField.reset();
-        Assert.assertFalse(formField.hasDiff());
-
-        formField.setValue("Initial2", true);
-        Assert.assertFalse(formField.hasDiff());
-    }
-
-    @Test
-    public void testInnerWidget() {
-        final StringTextBoxFormField formField = new StringTextBoxFormField();
-        PWindow.getMain().add(formField);
-        Assert.assertNotNull(formField.getInnerWidget());
-        Assert.assertTrue(formField.getInnerWidget().hasStyleName("inner-widget"));
-    }
-
-    @Test
-    public void testEnabled() {
-        final StringTextBoxFormField formField = new StringTextBoxFormField();
-        PWindow.getMain().add(formField);
-        Assert.assertTrue(formField.isEnabled());
-        formField.setEnabled(false);
-        Assert.assertFalse(formField.isEnabled());
-    }
-
-    @Test
-    public void testValue() {
-        final StringTextBoxFormField formField = new StringTextBoxFormField();
-        PWindow.getMain().add(formField);
-        formField.setValue("Test");
-        Assert.assertEquals("Test", formField.getValue());
-        formField.reset();
-        Assert.assertEquals("", formField.getValue());
-    }
-}
diff --git a/ponysdk/src/test/java/com/ponysdk/core/ui/form2/ValidationResultTest.java b/ponysdk/src/test/java/com/ponysdk/core/ui/form2/ValidationResultTest.java
deleted file mode 100644
index 622cb2eb..00000000
--- a/ponysdk/src/test/java/com/ponysdk/core/ui/form2/ValidationResultTest.java
+++ /dev/null
@@ -1,76 +0,0 @@
-/*
- * Copyright (c) 2017 PonySDK
- *  Owners:
- *  Luciano Broussal  <luciano.broussal AT gmail.com>
- *  Mathieu Barbier   <mathieu.barbier AT gmail.com>
- *  Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
- *
- *  WebSite:
- *  http://code.google.com/p/pony-sdk/
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-
-package com.ponysdk.core.ui.form2;
-
-import com.ponysdk.test.PSuite;
-import org.junit.Assert;
-import org.junit.Test;
-
-public class ValidationResultTest extends PSuite {
-
-    @Test
-    public void testValidationResult() {
-        final ValidationResult result = ValidationResult.newValidationResult(true, "Message", "Data");
-        Assert.assertTrue(result.isValid());
-        Assert.assertEquals("Message", result.getErrorMessage());
-        Assert.assertEquals("Data", result.getData());
-        Assert.assertEquals("ValidationResult{valid=true, errorMessage='Message', data=Data}", result.toString());
-    }
-
-    @Test
-    public void testOKWithoutData() {
-        final ValidationResult result = ValidationResult.OK();
-        Assert.assertTrue(result.isValid());
-        Assert.assertEquals(null, result.getErrorMessage());
-        Assert.assertEquals(null, result.getData());
-        Assert.assertEquals("ValidationResult{valid=true, errorMessage='null', data=null}", result.toString());
-    }
-
-    @Test
-    public void testOKWithData() {
-        final ValidationResult result = ValidationResult.OK("Data");
-        Assert.assertTrue(result.isValid());
-        Assert.assertEquals(null, result.getErrorMessage());
-        Assert.assertEquals("Data", result.getData());
-        Assert.assertEquals("ValidationResult{valid=true, errorMessage='null', data=Data}", result.toString());
-    }
-
-    @Test
-    public void testKOWithoutData() {
-        final ValidationResult result = ValidationResult.KO("Message");
-        Assert.assertFalse(result.isValid());
-        Assert.assertEquals("Message", result.getErrorMessage());
-        Assert.assertEquals(null, result.getData());
-        Assert.assertEquals("ValidationResult{valid=false, errorMessage='Message', data=null}", result.toString());
-    }
-
-    @Test
-    public void testKOWithData() {
-        final ValidationResult result = ValidationResult.KO("Message", "Data");
-        Assert.assertFalse(result.isValid());
-        Assert.assertEquals("Message", result.getErrorMessage());
-        Assert.assertEquals("Data", result.getData());
-        Assert.assertEquals("ValidationResult{valid=false, errorMessage='Message', data=Data}", result.toString());
-    }
-}
diff --git a/ponysdk/src/test/java/com/ponysdk/core/ui/scene/RouterTest.java b/ponysdk/src/test/java/com/ponysdk/core/ui/scene/RouterTest.java
deleted file mode 100644
index c7997875..00000000
--- a/ponysdk/src/test/java/com/ponysdk/core/ui/scene/RouterTest.java
+++ /dev/null
@@ -1,153 +0,0 @@
-/*
- * Copyright (c) 2019 PonySDK
- *  Owners:
- *  Luciano Broussal  <luciano.broussal AT gmail.com>
- *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
- *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
- *
- *  WebSite:
- *  http://code.google.com/p/pony-sdk/
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-
-package com.ponysdk.core.ui.scene;
-
-import com.ponysdk.core.server.application.UIContext;
-import com.ponysdk.test.PSuite;
-import com.ponysdk.core.ui.basic.*;
-import org.junit.Test;
-
-import static org.junit.Assert.*;
-
-public class RouterTest extends PSuite {
-
-    @Test
-    public void testBadRoute() {
-        final Router router = new Router("testBadRoute");
-        router.go("fake");
-        assertNotEquals("fake", UIContext.get().getHistory().getToken());
-    }
-
-    @Test
-    public void testGoodRouteWithoutLayout() {
-        final Router router = new Router("testGoodRouteWithoutLayout");
-        router.push(new AbstractScene("id", "name", "token") {
-            @Override
-            public PWidget buildGUI() {
-                return null;
-            }
-        });
-        router.go("token");
-        assertEquals("token", UIContext.get().getHistory().getToken());
-    }
-
-    @Test
-    public void testGoodRouteWithLayout() {
-        final Router router = new Router("testGoodRouteWithLayout");
-        router.setLayout(Element.newPSimplePanel());
-        router.push(new AbstractScene("id", "name", "token") {
-            @Override
-            public PWidget buildGUI() {
-                return Element.newPLabel("tests");
-            }
-        });
-        router.go("token");
-        assertEquals("token", UIContext.get().getHistory().getToken());
-    }
-
-    @Test
-    public void testHistoryChangedWithoutAnAssociatedScene() {
-        final Router router = new Router("test");
-        router.setLayout(Element.newPSimplePanel());
-        AbstractScene scene = new AbstractScene("id", "name", "token") {
-            @Override
-            public PWidget buildGUI() {
-                return Element.newPLabel("tests");
-            }
-        };
-        router.push(scene);
-        UIContext.get().getHistory().newItem("fake", true);
-
-        assertFalse(scene.isStarted());
-    }
-
-    @Test
-    public void testHistoryChangedWithAnAssociatedScene() {
-        final Router router = new Router("testHistoryChangedWithAnAssociatedScene");
-        final PSimplePanel layout = Element.newPSimplePanel();
-        router.setLayout(layout);
-
-        AbstractScene scene = new AbstractScene("id", "name", "token") {
-            @Override
-            public PWidget buildGUI() {
-                return Element.newPLabel("tests");
-            }
-        };
-        router.push(scene);
-        PWindow.getMain().add(layout);
-
-        UIContext.get().getHistory().newItem("token", true);
-
-        assertTrue(scene.isStarted());
-    }
-
-
-    @Test
-    public void testHistoryChangedWithoutLayout() {
-        final Router router = new Router("testHistoryChangedWithoutLayout");
-        AbstractScene scene = new AbstractScene("id", "name", "token") {
-            @Override
-            public PWidget buildGUI() {
-                return Element.newPLabel("tests");
-            }
-        };
-        router.push(scene);
-        UIContext.get().getHistory().newItem("token", true);
-
-        assertFalse(scene.isStarted());
-    }
-
-    @Test
-    public void testSceneNavigation() {
-        final Router router = new Router("testSceneNavigation");
-        final PSimplePanel layout = Element.newPSimplePanel();
-        router.setLayout(layout);
-
-        AbstractScene scene1 = new AbstractScene("id1", "name1", "token1") {
-            @Override
-            public PWidget buildGUI() {
-                return Element.newPLabel("test1");
-            }
-        };
-
-        AbstractScene scene2 = new AbstractScene("id2", "name2", "token2") {
-            @Override
-            public PWidget buildGUI() {
-                return Element.newPLabel("test2");
-            }
-        };
-        router.push(scene1);
-        router.push(scene2);
-
-        PWindow.getMain().add(layout);
-
-        UIContext.get().getHistory().newItem("token1", true);
-        assertTrue(scene1.isStarted());
-        assertFalse(scene2.isStarted());
-        UIContext.get().getHistory().newItem("token2", true);
-        assertFalse(scene1.isStarted());
-        assertTrue(scene2.isStarted());
-    }
-
-}
diff --git a/ponysdk/src/test/java/com/ponysdk/core/ui/scene/SceneTest.java b/ponysdk/src/test/java/com/ponysdk/core/ui/scene/SceneTest.java
deleted file mode 100644
index adf3a54d..00000000
--- a/ponysdk/src/test/java/com/ponysdk/core/ui/scene/SceneTest.java
+++ /dev/null
@@ -1,125 +0,0 @@
-/*
- * Copyright (c) 2019 PonySDK
- *  Owners:
- *  Luciano Broussal  <luciano.broussal AT gmail.com>
- *	Mathieu Barbier   <mathieu.barbier AT gmail.com>
- *	Nicolas Ciaravola <nicolas.ciaravola.pro AT gmail.com>
- *
- *  WebSite:
- *  http://code.google.com/p/pony-sdk/
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-
-package com.ponysdk.core.ui.scene;
-
-import com.ponysdk.core.ui.basic.Element;
-import com.ponysdk.test.PSuite;
-import com.ponysdk.core.ui.basic.PWidget;
-import com.ponysdk.core.ui.basic.PWindow;
-import org.junit.Test;
-
-import static org.junit.Assert.*;
-
-public class SceneTest extends PSuite {
-
-    @Test
-    public void testScene() {
-        final Scene scene = new AbstractScene("id", "name", "token") {
-            @Override
-            public PWidget buildGUI() {
-                return Element.newPLabel("scene");
-            }
-        };
-        assertEquals("id", scene.getId());
-        assertEquals("name", scene.getName());
-        assertEquals("token", scene.getToken());
-        assertFalse(scene.isStarted());
-    }
-
-    @Test
-    public void testSceneLifeCycle() {
-        final Scene scene = new AbstractScene("id", "name", "token") {
-            @Override
-            public PWidget buildGUI() {
-                return Element.newPLabel("scene");
-            }
-        };
-        PWindow.getMain().add(scene);
-
-        SceneListener4Test listener4Test = new SceneListener4Test();
-        scene.addLifeCycleListener(listener4Test);
-
-        assertFalse(scene.isStarted());
-        scene.start();
-        assertEquals(1, listener4Test.startingCount);
-        assertEquals(1, listener4Test.startedCount);
-        assertEquals(0, listener4Test.stoppingCount);
-        assertEquals(0, listener4Test.stoppedCount);
-        assertTrue(scene.isStarted());
-        scene.stop();
-        assertEquals(1, listener4Test.startingCount);
-        assertEquals(1, listener4Test.startedCount);
-        assertEquals(1, listener4Test.stoppingCount);
-        assertEquals(1, listener4Test.stoppedCount);
-        assertFalse(scene.isStarted());
-        scene.start();
-        assertEquals(2, listener4Test.startingCount);
-        assertEquals(2, listener4Test.startedCount);
-        assertEquals(1, listener4Test.stoppingCount);
-        assertEquals(1, listener4Test.stoppedCount);
-        assertTrue(scene.isStarted());
-        scene.stop();
-        assertEquals(2, listener4Test.startingCount);
-        assertEquals(2, listener4Test.startedCount);
-        assertEquals(2, listener4Test.stoppingCount);
-        assertEquals(2, listener4Test.stoppedCount);
-        assertFalse(scene.isStarted());
-    }
-
-    private class SceneListener4Test implements Scene.Listener {
-        int startingCount = 0;
-        int startedCount = 0;
-        int stoppingCount = 0;
-        int stoppedCount = 0;
-
-        @Override
-        public void starting(Scene source) {
-            startingCount++;
-        }
-
-        @Override
-        public void started(Scene source) {
-            startedCount++;
-        }
-
-        @Override
-        public void stopping(Scene source) {
-            stoppingCount++;
-        }
-
-        @Override
-        public void stopped(Scene source) {
-            stoppedCount++;
-        }
-
-
-        public void reset() {
-            startingCount = 0;
-            startedCount = 0;
-            stoppingCount = 0;
-            stoppedCount = 0;
-        }
-    }
-
-}
diff --git a/ponysdk/src/test/java/com/ponysdk/core/writer/ModelWriterTest.java b/ponysdk/src/test/java/com/ponysdk/core/writer/ModelWriterTest.java
index 6c392828..ab348ad3 100644
--- a/ponysdk/src/test/java/com/ponysdk/core/writer/ModelWriterTest.java
+++ b/ponysdk/src/test/java/com/ponysdk/core/writer/ModelWriterTest.java
@@ -23,18 +23,19 @@
 
 package com.ponysdk.core.writer;
 
-import com.ponysdk.core.model.ServerToClientModel;
-import com.ponysdk.core.server.websocket.WebsocketEncoder;
-import com.ponysdk.core.ui.basic.Element;
-import com.ponysdk.core.ui.basic.PWindow;
-import com.ponysdk.test.PSuite;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
+
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.ArgumentMatchers;
+import org.mockito.Matchers;
 import org.mockito.Mockito;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
+import com.ponysdk.core.model.ServerToClientModel;
+import com.ponysdk.core.server.websocket.WebsocketEncoder;
+import com.ponysdk.core.ui.basic.Element;
+import com.ponysdk.core.ui.basic.PSuite;
+import com.ponysdk.core.ui.basic.PWindow;
 
 public class ModelWriterTest extends PSuite {
 
@@ -62,7 +63,7 @@ public class ModelWriterTest extends PSuite {
         modelWriter.beginObject(window2);
 
         Mockito.verify(websocketEncoder, Mockito.times(3)).beginObject();
-        Mockito.verify(websocketEncoder, Mockito.times(2)).encode(ArgumentMatchers.eq(ServerToClientModel.WINDOW_ID), ArgumentMatchers.any());
+        Mockito.verify(websocketEncoder, Mockito.times(2)).encode(Matchers.eq(ServerToClientModel.WINDOW_ID), Matchers.any());
         assertEquals(window2, modelWriter.getCurrentWindow());
     }
 
diff --git a/ponysdk/src/test/java/com/ponysdk/impl/java/server/JavaApplicationManagerTest.java b/ponysdk/src/test/java/com/ponysdk/impl/java/server/JavaApplicationManagerTest.java
index 41deef12..28e7efa4 100644
--- a/ponysdk/src/test/java/com/ponysdk/impl/java/server/JavaApplicationManagerTest.java
+++ b/ponysdk/src/test/java/com/ponysdk/impl/java/server/JavaApplicationManagerTest.java
@@ -30,7 +30,7 @@ import org.junit.Test;
 
 import com.ponysdk.core.server.application.ApplicationConfiguration;
 import com.ponysdk.core.server.application.UIContext;
-import com.ponysdk.test.PSuite;
+import com.ponysdk.core.ui.basic.PSuite;
 import com.ponysdk.core.ui.main.EntryPoint;
 
 public class JavaApplicationManagerTest extends PSuite {
diff --git a/sample/.project b/sample/.project
new file mode 100644
index 00000000..b13f1956
--- /dev/null
+++ b/sample/.project
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>sample</name>
+	<comment></comment>
+	<projects/>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments/>
+		</buildCommand>
+	</buildSpec>
+	<linkedResources/>
+	<filteredResources/>
+</projectDescription>
diff --git a/sample/.settings/org.eclipse.jdt.core.prefs b/sample/.settings/org.eclipse.jdt.core.prefs
index 71fd0f86..da59cd6d 100644
--- a/sample/.settings/org.eclipse.jdt.core.prefs
+++ b/sample/.settings/org.eclipse.jdt.core.prefs
@@ -1,5 +1,5 @@
 #
-#Thu Nov 22 09:56:45 CET 2018
+#Thu Mar 19 16:43:24 CET 2020
 org.eclipse.jdt.core.formatter.insert_space_after_ellipsis=insert
 org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_declarations=insert
 org.eclipse.jdt.core.formatter.insert_new_line_in_empty_annotation_declaration=insert
@@ -27,41 +27,41 @@ org.eclipse.jdt.core.formatter.blank_lines_after_package=1
 org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_local_declarations=insert
 org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant=16
 org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_parameterized_type_reference=do not insert
-org.eclipse.jdt.core.formatter.comment.indent_root_tags=true
 org.eclipse.jdt.core.formatter.wrap_before_or_operator_multicatch=true
+org.eclipse.jdt.core.formatter.comment.indent_root_tags=true
 org.eclipse.jdt.core.formatter.enabling_tag=@formatter\:on
 org.eclipse.jdt.core.formatter.comment.count_line_length_from_starting_position=false
-org.eclipse.jdt.core.compiler.annotation.nullable.secondary=
-org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_method_declaration=16
 org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_parameter=do not insert
+org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_method_declaration=16
+org.eclipse.jdt.core.compiler.annotation.nullable.secondary=
 org.eclipse.jdt.core.formatter.keep_then_statement_on_same_line=true
 org.eclipse.jdt.core.formatter.insert_space_after_comma_in_explicitconstructorcall_arguments=insert
 org.eclipse.jdt.core.formatter.insert_space_after_prefix_operator=do not insert
 org.eclipse.jdt.core.formatter.insert_space_before_closing_brace_in_array_initializer=insert
-org.eclipse.jdt.core.compiler.annotation.nonnullbydefault=org.eclipse.jdt.annotation.NonNullByDefault
 org.eclipse.jdt.core.compiler.problem.nullAnnotationInferenceConflict=error
+org.eclipse.jdt.core.compiler.annotation.nonnullbydefault=org.eclipse.jdt.annotation.NonNullByDefault
 org.eclipse.jdt.core.compiler.problem.nullSpecViolation=error
 org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_arguments=do not insert
 org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotation=warning
-org.eclipse.jdt.core.compiler.problem.syntacticNullAnalysisForFields=disabled
 org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_method=insert
+org.eclipse.jdt.core.compiler.problem.syntacticNullAnalysisForFields=disabled
 org.eclipse.jdt.core.formatter.alignment_for_parameterized_type_references=0
 org.eclipse.jdt.core.compiler.problem.staticAccessReceiver=warning
 org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_parenthesized_expression=do not insert
 org.eclipse.jdt.core.compiler.problem.unusedObjectAllocation=ignore
 org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_enum_constant=insert
-org.eclipse.jdt.core.compiler.problem.finalParameterBound=warning
 org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.problem.finalParameterBound=warning
 org.eclipse.jdt.core.formatter.insert_space_after_and_in_type_parameter=insert
-org.eclipse.jdt.core.compiler.problem.redundantSpecificationOfTypeArguments=warning
 org.eclipse.jdt.core.compiler.annotation.nonnull=org.eclipse.jdt.annotation.NonNull
+org.eclipse.jdt.core.compiler.problem.redundantSpecificationOfTypeArguments=warning
 org.eclipse.jdt.core.compiler.problem.unnecessaryElse=ignore
 org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_invocation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_assignment_operator=insert
 org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_after_assignment_operator=insert
 org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_for=do not insert
-org.eclipse.jdt.core.formatter.comment.preserve_white_space_between_code_and_line_comments=false
 org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_local_variable=insert
+org.eclipse.jdt.core.formatter.comment.preserve_white_space_between_code_and_line_comments=false
 org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_invocation=do not insert
 org.eclipse.jdt.core.formatter.alignment_for_union_type_in_multicatch=16
 org.eclipse.jdt.core.formatter.number_of_blank_lines_at_beginning_of_method_body=0
@@ -78,16 +78,16 @@ org.eclipse.jdt.core.compiler.problem.missingDeprecatedAnnotation=warning
 org.eclipse.jdt.core.compiler.problem.fatalOptionalError=disabled
 org.eclipse.jdt.core.formatter.put_empty_statement_on_new_line=true
 org.eclipse.jdt.core.compiler.debug.lineNumber=generate
-org.eclipse.jdt.core.formatter.alignment_for_type_parameters=0
 org.eclipse.jdt.core.formatter.alignment_for_parameters_in_constructor_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_type_parameters=0
 org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
 org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment=false
 org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_array_initializer=insert
 org.eclipse.jdt.core.formatter.insert_space_before_unary_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_array_initializer=insert
 org.eclipse.jdt.core.compiler.problem.missingDefaultCase=ignore
-org.eclipse.jdt.core.compiler.problem.redundantNullCheck=warning
 org.eclipse.jdt.core.formatter.format_line_comment_starting_on_first_column=true
+org.eclipse.jdt.core.compiler.problem.redundantNullCheck=warning
 org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownException=warning
 org.eclipse.jdt.core.compiler.problem.undocumentedEmptyBlock=ignore
 org.eclipse.jdt.core.formatter.parentheses_positions_in_annotation=common_lines
@@ -97,16 +97,16 @@ org.eclipse.jdt.core.formatter.insert_space_after_colon_in_assert=insert
 org.eclipse.jdt.core.formatter.insert_space_before_and_in_type_parameter=insert
 org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_parenthesized_expression=do not insert
 org.eclipse.jdt.core.formatter.align_type_members_on_columns=false
-org.eclipse.jdt.core.formatter.alignment_for_module_statements=16
 org.eclipse.jdt.core.formatter.alignment_for_assignment=0
+org.eclipse.jdt.core.formatter.alignment_for_module_statements=16
 org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_type_header=true
 org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_declaration=do not insert
 org.eclipse.jdt.core.formatter.comment.align_tags_names_descriptions=false
 org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_enum_constant=do not insert
 org.eclipse.jdt.core.formatter.blank_lines_before_first_class_body_declaration=1
-org.eclipse.jdt.core.formatter.format_guardian_clause_on_one_line=false
-org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer=do not insert
 org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer=do not insert
+org.eclipse.jdt.core.formatter.format_guardian_clause_on_one_line=false
 org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_if=insert
 org.eclipse.jdt.core.compiler.problem.incompatibleNonInheritedInterfaceMethod=warning
 org.eclipse.jdt.core.compiler.problem.missingSerialVersion=ignore
@@ -134,8 +134,8 @@ org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_array_initia
 org.eclipse.jdt.core.formatter.blank_lines_before_field=0
 org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation=do not insert
 org.eclipse.jdt.core.formatter.blank_lines_before_method=1
-org.eclipse.jdt.core.compiler.debug.sourceFile=generate
 org.eclipse.jdt.core.compiler.problem.unusedParameterWhenOverridingConcrete=disabled
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
 org.eclipse.jdt.core.formatter.alignment_for_superclass_in_type_declaration=16
 org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_throw=insert
 org.eclipse.jdt.core.compiler.codegen.targetPlatform=9
@@ -167,8 +167,8 @@ org.eclipse.jdt.core.compiler.problem.uncheckedTypeOperation=warning
 org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_parameters=do not insert
 org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_cast=do not insert
 org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement=do not insert
-org.eclipse.jdt.core.compiler.problem.fallthroughCase=ignore
 org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_type_reference=do not insert
+org.eclipse.jdt.core.compiler.problem.fallthroughCase=ignore
 org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_parameterized_type_reference=do not insert
 org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer=do not insert
 org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_declaration=insert
diff --git a/sample/PonySDK_DataGrid2.launch b/sample/PonySDK_DataGrid2.launch
new file mode 100644
index 00000000..f418823d
--- /dev/null
+++ b/sample/PonySDK_DataGrid2.launch
@@ -0,0 +1,159 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.jdt.launching.localJavaApplication">
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
+<listEntry value="/sample/src/main/java/com/ponysdk/impl/spring/MainSpring.java"/>
+</listAttribute>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
+<listEntry value="1"/>
+</listAttribute>
+<booleanAttribute key="org.eclipse.jdt.launching.ATTR_USE_CLASSPATH_ONLY_JAR" value="false"/>
+<booleanAttribute key="org.eclipse.jdt.launching.ATTR_USE_START_ON_FIRST_THREAD" value="true"/>
+<listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry internalArchive=&quot;/ponysdk/build/gwt/debug/gwt&quot; path=&quot;5&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry internalArchive=&quot;/ponysdk/build/gwt/prod/gwt&quot; path=&quot;5&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry internalArchive=&quot;/ponysdk/build/resources&quot; path=&quot;5&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry internalArchive=&quot;/ponysdk/build/resources/main&quot; path=&quot;5&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry path=&quot;5&quot; projectName=&quot;sample&quot; type=&quot;1&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry path=&quot;5&quot; projectName=&quot;ponysdk&quot; type=&quot;1&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry internalArchive=&quot;/ponysdk/build/gwt/debug/gwt/ponyterminaldebug/76E07755923E88C6A1D2B9D3481A0D98.cache.js&quot; path=&quot;5&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry internalArchive=&quot;/ponysdk/build/gwt/debug/gwt/ponyterminaldebug/clear.cache.gif&quot; path=&quot;5&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry internalArchive=&quot;/ponysdk/build/gwt/debug/gwt/ponyterminaldebug/compilation-mappings.txt&quot; path=&quot;5&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry internalArchive=&quot;/ponysdk/build/gwt/debug/gwt/ponyterminaldebug/ponyterminaldebug.devmode.js&quot; path=&quot;5&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry internalArchive=&quot;/ponysdk/build/gwt/debug/gwt/ponyterminaldebug/ponyterminaldebug.nocache.js&quot; path=&quot;5&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry internalArchive=&quot;/ponysdk/build/gwt/prod/gwt/ponyterminal/875E8EC9F6F8CE9889602ABEAE433194.cache.js&quot; path=&quot;5&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry internalArchive=&quot;/ponysdk/build/gwt/prod/gwt/ponyterminal/clear.cache.gif&quot; path=&quot;5&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry internalArchive=&quot;/ponysdk/build/gwt/prod/gwt/ponyterminal/compilation-mappings.txt&quot; path=&quot;5&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry internalArchive=&quot;/ponysdk/build/gwt/prod/gwt/ponyterminal/ponyterminal.devmode.js&quot; path=&quot;5&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry internalArchive=&quot;/ponysdk/build/gwt/prod/gwt/ponyterminal/ponyterminal.nocache.js&quot; path=&quot;5&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry internalArchive=&quot;/ponysdk/build/gwt/prod/gwt/WEB-INF/deploy/ponyterminal/rpcPolicyManifest/manifest.txt&quot; path=&quot;5&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry internalArchive=&quot;/ponysdk/build/gwt/prod/gwt/WEB-INF/deploy/ponyterminal/symbolMaps/875E8EC9F6F8CE9889602ABEAE433194.symbolMap&quot; path=&quot;5&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/com.google.gwt/gwt-user/2.8.2/a2b9be2c996a658c4e009ba652a9c6a81c88a797/gwt-user-2.8.2.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/com.google.gwt/gwt-user/2.8.2/1e4354de6741228bc7a6fc9d870497a76ecdd342/gwt-user-2.8.2-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/com.google.gwt/gwt-elemental/2.8.2/3c1ee3d01c3ed13e8807fccb5c375ec1f0aaebf0/gwt-elemental-2.8.2.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/com.google.gwt/gwt-elemental/2.8.2/1afd35a4d096f25febb3f71fd4a9135f2ccc17bc/gwt-elemental-2.8.2-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/javax.validation/validation-api/1.0.0.GA/b6bd7f9d78f6fdaa3c37dae18a4bd298915f328e/validation-api-1.0.0.GA.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/javax.validation/validation-api/1.0.0.GA/7a561191db2203550fbfa40d534d4997624cd369/validation-api-1.0.0.GA-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/javax.validation/validation-api/1.0.0.GA/7a561191db2203550fbfa40d534d4997624cd369/validation-api-1.0.0.GA-sources.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/javax.validation/validation-api/1.0.0.GA/7a561191db2203550fbfa40d534d4997624cd369/validation-api-1.0.0.GA-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/com.google.jsinterop/jsinterop-annotations/1.0.2/abd7319f53d018e11108a88f599bd16492448dd2/jsinterop-annotations-1.0.2.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/com.google.jsinterop/jsinterop-annotations/1.0.2/33716f8aef043f2f02b78ab4a1acda6cd90a7602/jsinterop-annotations-1.0.2-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/com.google.jsinterop/jsinterop-annotations/1.0.2/33716f8aef043f2f02b78ab4a1acda6cd90a7602/jsinterop-annotations-1.0.2-sources.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/com.google.jsinterop/jsinterop-annotations/1.0.2/33716f8aef043f2f02b78ab4a1acda6cd90a7602/jsinterop-annotations-1.0.2-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty.websocket/javax-websocket-server-impl/9.4.14.v20181114/7861a9c4733f79b76a219306e950ab53f7b5d822/javax-websocket-server-impl-9.4.14.v20181114.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty.websocket/javax-websocket-server-impl/9.4.14.v20181114/b46b422626dba481b631377fa5c3fe7407620c2b/javax-websocket-server-impl-9.4.14.v20181114-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-annotations/9.4.14.v20181114/3bbcbc5279b1be81ef41ab1c1d186fb432c3c779/jetty-annotations-9.4.14.v20181114.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-annotations/9.4.14.v20181114/d89c46caa9a3c75a1bbcf29418e0d86e6b7c5e00/jetty-annotations-9.4.14.v20181114-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-plus/9.4.14.v20181114/58ca362753581c0a71d048b7892f0f3baa294762/jetty-plus-9.4.14.v20181114.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-plus/9.4.14.v20181114/7aa18a53135a030d3249b63a289f320d84d82bee/jetty-plus-9.4.14.v20181114-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-webapp/9.4.14.v20181114/88a04172b5e7736bc3e95eb58623aa9ccdb475/jetty-webapp-9.4.14.v20181114.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-webapp/9.4.14.v20181114/e4f912d0ed235738e2902718ffc1951def50ccc0/jetty-webapp-9.4.14.v20181114-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty.websocket/websocket-server/9.4.14.v20181114/88b202e1fa02c79b9522930d2526435b3c77bd96/websocket-server-9.4.14.v20181114.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty.websocket/websocket-server/9.4.14.v20181114/5dc9950704633a67e66ac4932a1999730d1a1a22/websocket-server-9.4.14.v20181114-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-servlet/9.4.14.v20181114/96f501462af425190ff7b63e387692c1aa3af2c8/jetty-servlet-9.4.14.v20181114.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-servlet/9.4.14.v20181114/204b8a84adf3ce354138509c42638b5b2d223d1f/jetty-servlet-9.4.14.v20181114-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-security/9.4.14.v20181114/6cbeb2fe9b3cc4f88a7ea040b8a0c4f703cd72ce/jetty-security-9.4.14.v20181114.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-security/9.4.14.v20181114/33555125c5988fca12273f60a0aa545d848de54a/jetty-security-9.4.14.v20181114-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-server/9.4.14.v20181114/b36a3d52d78a1df6406f6fa236a6eeff48cbfef6/jetty-server-9.4.14.v20181114.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-server/9.4.14.v20181114/55db20ea68c9c1b0ed264d80e7d75b4988da87a6/jetty-server-9.4.14.v20181114-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-servlets/9.4.14.v20181114/38cfc07b53e5d285bb2fca78bb2531565ed9c9e5/jetty-servlets-9.4.14.v20181114.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-servlets/9.4.14.v20181114/5f06fed8d1f7987ea64036751e1f886df221c8b/jetty-servlets-9.4.14.v20181114-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty.websocket/javax-websocket-client-impl/9.4.14.v20181114/c733f5269977232d1d415c144663c9b037793617/javax-websocket-client-impl-9.4.14.v20181114.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty.websocket/javax-websocket-client-impl/9.4.14.v20181114/ad307eab6e3559d0fbe55c1392477fe0cbae44e0/javax-websocket-client-impl-9.4.14.v20181114-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty.websocket/websocket-client/9.4.14.v20181114/94530cdbf47fdb14706ad82945dc2c24f93b6934/websocket-client-9.4.14.v20181114.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty.websocket/websocket-client/9.4.14.v20181114/4b20f6b90fa3bd7dcc1203ecebef6a84c3c70645/websocket-client-9.4.14.v20181114-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-client/9.4.14.v20181114/1c46b088e1119928d54ff704fe38fe1b6b6700d0/jetty-client-9.4.14.v20181114.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-client/9.4.14.v20181114/7125d61e7d772051ab631e6ecbb40a745d30e80/jetty-client-9.4.14.v20181114-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-http/9.4.14.v20181114/6d0c8ac42e9894ae7b5032438eb4579c2a47f4fe/jetty-http-9.4.14.v20181114.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-http/9.4.14.v20181114/3c4f8a942909cabe6d029f835c185207eb91af75/jetty-http-9.4.14.v20181114-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty.websocket/websocket-common/9.4.14.v20181114/1d13b027da4b72d46144e19f1dd2a974e0980ac5/websocket-common-9.4.14.v20181114.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty.websocket/websocket-common/9.4.14.v20181114/5761431515532868117ab4822d6bb638f10bc661/websocket-common-9.4.14.v20181114-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-io/9.4.14.v20181114/a8c6a705ddb9f83a75777d89b0be59fcef3f7637/jetty-io-9.4.14.v20181114.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-io/9.4.14.v20181114/6132108ccabbe181707af911e5a68fd8e8806ff/jetty-io-9.4.14.v20181114-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-xml/9.4.14.v20181114/65cd197bc8082a1007130c8b644cea7938133568/jetty-xml-9.4.14.v20181114.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-xml/9.4.14.v20181114/8b54971142b421adfc12e71c4f8a0c4507180d56/jetty-xml-9.4.14.v20181114-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-jndi/9.4.14.v20181114/62203427ac69f016a754574e93933faaeb396c74/jetty-jndi-9.4.14.v20181114.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-jndi/9.4.14.v20181114/dd6d4d183665b9578bae6e9166f413b8867295df/jetty-jndi-9.4.14.v20181114-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-util/9.4.14.v20181114/5bb3d7a38f7ea54138336591d89dd5867b806c02/jetty-util-9.4.14.v20181114.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-util/9.4.14.v20181114/94e89a8c9f82e38555e95b9f7f58344a247e862c/jetty-util-9.4.14.v20181114-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-continuation/9.4.14.v20181114/ac4981a61bcaf4e2538de6270300a870224a16b8/jetty-continuation-9.4.14.v20181114.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-continuation/9.4.14.v20181114/77bf4359e05ff0dd7708ae27e37432c1665fd6af/jetty-continuation-9.4.14.v20181114-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty.websocket/websocket-servlet/9.4.14.v20181114/ca89f0b7eb8eb68a8d701d10df9742bed9eda4a9/websocket-servlet-9.4.14.v20181114.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty.websocket/websocket-servlet/9.4.14.v20181114/9ba6cc5e71a0b5bbfe41d74481d97653cfbcf533/websocket-servlet-9.4.14.v20181114-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty.websocket/websocket-api/9.4.14.v20181114/ad5adb45ec91d156ba229b32d82cead27b35d6a5/websocket-api-9.4.14.v20181114.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty.websocket/websocket-api/9.4.14.v20181114/928a884cd342ec415f0740b437dcdf57d427e2a2/websocket-api-9.4.14.v20181114-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.springframework/spring-web/5.1.3.RELEASE/c875df33e6c5ac0df53e727a08d42b316e69918b/spring-web-5.1.3.RELEASE.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.springframework/spring-web/5.1.3.RELEASE/7f3018f1227075cf6e5772659e042f7cdbe59cb6/spring-web-5.1.3.RELEASE-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.springframework/spring-context/5.1.3.RELEASE/158929623ee0166fa930e88c3e2ca86a887088c0/spring-context-5.1.3.RELEASE.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.springframework/spring-context/5.1.3.RELEASE/c5ee0067915517d1660805a11c154e7537da8ea2/spring-context-5.1.3.RELEASE-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.springframework/spring-aop/5.1.3.RELEASE/c6b69e5c73e17dd15b5a07d96ecfa2d2e7955705/spring-aop-5.1.3.RELEASE.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.springframework/spring-aop/5.1.3.RELEASE/36c0bc29b2c5c20f804eebec6ff508df832a1de0/spring-aop-5.1.3.RELEASE-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.springframework/spring-beans/5.1.3.RELEASE/9a15a7c84bd12516574bcaf87ffa38c1e65e8a2b/spring-beans-5.1.3.RELEASE.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.springframework/spring-beans/5.1.3.RELEASE/83d570bbf9311b4d4023bb70f853112c9fa010de/spring-beans-5.1.3.RELEASE-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.springframework/spring-expression/5.1.3.RELEASE/628a471a077ab80f7fd66a5f5e42e2d67e6a9607/spring-expression-5.1.3.RELEASE.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.springframework/spring-expression/5.1.3.RELEASE/165854558daa5a3daf3e375de664ddf983d70a4f/spring-expression-5.1.3.RELEASE-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.springframework/spring-core/5.1.3.RELEASE/b1e5325d35bfb27e42d57e9295510cad54ed8fdf/spring-core-5.1.3.RELEASE.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.springframework/spring-core/5.1.3.RELEASE/36ad145855655578be2bd01de15823c218cbbd69/spring-core-5.1.3.RELEASE-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.slf4j/slf4j-api/1.8.0-alpha2/34fa1d87256bbdb376ae7f6fa7e479610cd07dce/slf4j-api-1.8.0-alpha2.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.slf4j/slf4j-api/1.8.0-alpha2/5818a2c13c12c71c2861315d90888104a875f438/slf4j-api-1.8.0-alpha2-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/javax.servlet/javax.servlet-api/4.0.1/a27082684a2ff0bf397666c3943496c44541d1ca/javax.servlet-api-4.0.1.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/javax.servlet/javax.servlet-api/4.0.1/49a9da44db6e6b5f44ce15ddfcfe2b6666151b25/javax.servlet-api-4.0.1-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/javax.json/javax.json-api/1.1.4/c8efa3cfaeee2b05c2dfd54cba21548a081b1746/javax.json-api-1.1.4.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/javax.json/javax.json-api/1.1.4/eb81279e894e71bf034681c5494c60001775bb0/javax.json-api-1.1.4-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.glassfish/javax.json/1.1.4/943f240a509d3c70b448a55c6735591ecbd37c88/javax.json-1.1.4.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.glassfish/javax.json/1.1.4/c8718c73685d7d4915905c14ef650c7ca4f5d97e/javax.json-1.1.4-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.seleniumhq.selenium/selenium-api/3.14.0/73e6db9b3cdc42966679a2112bfde9efbef16223/selenium-api-3.14.0.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.seleniumhq.selenium/selenium-api/3.14.0/8c0af6fdccdc89a4394de7e3a8817ed2d6e41d7d/selenium-api-3.14.0-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.glassfish.tyrus/tyrus-client/1.15/2dd5b231c706b2b509a53f708cef923e58188f56/tyrus-client-1.15.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.glassfish.tyrus/tyrus-client/1.15/4a88a13873366fd82ba5ab5bfce70d4d1995ebfe/tyrus-client-1.15-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.glassfish.tyrus.ext/tyrus-extension-deflate/1.15/2b9c0aa0deb5b5d50b49255bd1085d5156a7bc15/tyrus-extension-deflate-1.15.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.glassfish.tyrus.ext/tyrus-extension-deflate/1.15/9ed534840fb2cc5395f9d75510a29ddb9adbdc95/tyrus-extension-deflate-1.15-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/junit/junit/4.12/2973d150c0dc1fefe998f834810d68f278ea58ec/junit-4.12.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/junit/junit/4.12/a6c32b40bf3d76eca54e3c601e5d1470c86fcdfa/junit-4.12-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.mockito/mockito-core/2.24.0/969a7bcb6f16e076904336ebc7ca171d412cc1f9/mockito-core-2.24.0.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.mockito/mockito-core/2.24.0/d261e9efb9b2e0be5ba7c9c0112e3c880d54e0ca/mockito-core-2.24.0-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.w3c.css/sac/1.3/cdb2dcb4e22b83d6b32b93095f644c3462739e82/sac-1.3.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.w3c.css/sac/1.3/d0eab9163d161293dcd1e291bc2b6b09b4b5c717/sac-1.3-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/javax.websocket/javax.websocket-api/1.0/fc843b649d4a1dcb0497669d262befa3918c7ba8/javax.websocket-api-1.0.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/javax.websocket/javax.websocket-api/1.0/107b0fdc7ca320b54dc1393e01585be5883ff348/javax.websocket-api-1.0-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.springframework/spring-jcl/5.1.3.RELEASE/d332735dbc9c3f48cac59fb832c5719eb62bbe4d/spring-jcl-5.1.3.RELEASE.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.springframework/spring-jcl/5.1.3.RELEASE/893d97e4a06c9300b9d9acd0321e38e217187e31/spring-jcl-5.1.3.RELEASE-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.glassfish.tyrus/tyrus-core/1.15/fea19322ec1d9641db2ad381b1cc4ae020e680df/tyrus-core-1.15.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.glassfish.tyrus/tyrus-core/1.15/b725f8c04e9f8d21d935c7f7ebe452e80c93c7ed/tyrus-core-1.15-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.hamcrest/hamcrest-core/1.3/42a25dc3219429f0e5d060061f71acb49bf010a0/hamcrest-core-1.3.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.hamcrest/hamcrest-core/1.3/1dc37250fbc78e23a65a67fbbaf71d2e9cbc3c0b/hamcrest-core-1.3-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/net.bytebuddy/byte-buddy/1.9.7/8fea78fea6449e1738b675cb155ce8422661e237/byte-buddy-1.9.7.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/net.bytebuddy/byte-buddy/1.9.7/ed6166d7f5a34842d3a2060ceea9e11a3d09413a/byte-buddy-1.9.7-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/net.bytebuddy/byte-buddy-agent/1.9.7/8e7d1b599f4943851ffea125fd9780e572727fc0/byte-buddy-agent-1.9.7.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/net.bytebuddy/byte-buddy-agent/1.9.7/65ac6028618b3c0596947fed4fc5c073d1e742fc/byte-buddy-agent-1.9.7-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.objenesis/objenesis/2.6/639033469776fd37c08358c6b92a4761feb2af4b/objenesis-2.6.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.objenesis/objenesis/2.6/96614f514a1031296657bf0dde452dc15e42fcb8/objenesis-2.6-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/javax.annotation/javax.annotation-api/1.2/479c1e06db31c432330183f5cae684163f186146/javax.annotation-api-1.2.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/javax.annotation/javax.annotation-api/1.2/ad18a02db08eaee697f812e333f692fc51129e4a/javax.annotation-api-1.2-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.ow2.asm/asm-commons/7.0/478006d07b7c561ae3a92ddc1829bca81ae0cdd1/asm-commons-7.0.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.ow2.asm/asm-commons/7.0/6a7ca89b189929d4eb4349c6f075fc345b055e0/asm-commons-7.0-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.ow2.asm/asm-analysis/7.0/4b310d20d6f1c6b7197a75f1b5d69f169bc8ac1f/asm-analysis-7.0.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.ow2.asm/asm-analysis/7.0/70608c6f4ee3c2073ccd43f1e4a359783334f86f/asm-analysis-7.0-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.ow2.asm/asm-tree/7.0/29bc62dcb85573af6e62e5b2d735ef65966c4180/asm-tree-7.0.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.ow2.asm/asm-tree/7.0/6064bf57bbce12aebc8ab96f32efe3f1c6cdd5fc/asm-tree-7.0-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.ow2.asm/asm/7.0/d74d4ba0dee443f68fb2dcb7fcdb945a2cd89912/asm-7.0.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.ow2.asm/asm/7.0/1e0eab03ec196dea229ea637e523b9c016e66b42/asm-7.0-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/javax.websocket/javax.websocket-client-api/1.0/afcf19e889d8725576811f8d47ab6c65d9dcbd78/javax.websocket-client-api-1.0.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/javax.websocket/javax.websocket-client-api/1.0/57ee0d4138e37dc6a9b3d264dea853cb468ae4c8/javax.websocket-client-api-1.0-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.glassfish.tyrus/tyrus-spi/1.15/84e344cd314c2060e48b6a083a9d626b09887158/tyrus-spi-1.15.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.glassfish.tyrus/tyrus-spi/1.15/fe0a2dc8ca1e9d7e96f2f27283fe436cdbea12dd/tyrus-spi-1.15-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/jakarta.websocket/jakarta.websocket-api/1.1.1/1fd00682dbede1b5ffddeed2311b45e223f7ea68/jakarta.websocket-api-1.1.1.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/jakarta.websocket/jakarta.websocket-api/1.1.1/863f62dfcf3bf5304efdc1b8d15d3fda4cd5690f/jakarta.websocket-api-1.1.1-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.seleniumhq.selenium/selenium-java/3.14.0/5b50d4072e0e51779b6e9f3594106312061bfde/selenium-java-3.14.0.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.seleniumhq.selenium/selenium-java/3.14.0/b04f3ee8f5e43fa3b162981b50bb72fe1acabb33/selenium-java-3.14.0-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.seleniumhq.selenium/selenium-chrome-driver/3.14.0/a8fa5d063821f70dab0b7170d4b814ef49ce4962/selenium-chrome-driver-3.14.0.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.seleniumhq.selenium/selenium-chrome-driver/3.14.0/a026b5aca5bd4d42a21fb9eb41348eb003e344ef/selenium-chrome-driver-3.14.0-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.seleniumhq.selenium/selenium-edge-driver/3.14.0/ca62365ff82c8c03861848355932ab36ddd73f57/selenium-edge-driver-3.14.0.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.seleniumhq.selenium/selenium-edge-driver/3.14.0/40b70f36b19980798f1fe365856b2a1caa3dc486/selenium-edge-driver-3.14.0-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.seleniumhq.selenium/selenium-firefox-driver/3.14.0/f35ddc0b5e0e09be644df14ada85d83e6b8b3f3c/selenium-firefox-driver-3.14.0.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.seleniumhq.selenium/selenium-firefox-driver/3.14.0/93de6f682174eb83ff790802a40366c4e3abd12/selenium-firefox-driver-3.14.0-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.seleniumhq.selenium/selenium-ie-driver/3.14.0/3c92cd026f08d381aa9cff8eca03962add562577/selenium-ie-driver-3.14.0.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.seleniumhq.selenium/selenium-ie-driver/3.14.0/b087fae7cd099a72b6602abb4d834c2e0151571e/selenium-ie-driver-3.14.0-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.seleniumhq.selenium/selenium-opera-driver/3.14.0/123ae21ad13ecc888bf3e18d5c65857df32e6a9f/selenium-opera-driver-3.14.0.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.seleniumhq.selenium/selenium-opera-driver/3.14.0/ba6417e62453713a52a4a524d10b83455f48dd20/selenium-opera-driver-3.14.0-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.seleniumhq.selenium/selenium-safari-driver/3.14.0/8dade249fbfc6833697592c155638f348de10fbd/selenium-safari-driver-3.14.0.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.seleniumhq.selenium/selenium-safari-driver/3.14.0/87b306ad9a0f67930d70a97e3e4912cf0955deb1/selenium-safari-driver-3.14.0-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.seleniumhq.selenium/selenium-support/3.14.0/2a8bfbe41c44a14f5674ea7bbcfc577259d34f99/selenium-support-3.14.0.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.seleniumhq.selenium/selenium-support/3.14.0/ca6132159a19ff765f46742a78c7f985cb44be7d/selenium-support-3.14.0-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.seleniumhq.selenium/selenium-remote-driver/3.14.0/434c26e9df775d8f49619f7275a65a36d2d72ceb/selenium-remote-driver-3.14.0.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.seleniumhq.selenium/selenium-remote-driver/3.14.0/6a4c36c02a1f03bdcf5769bffec9ed530ca51111/selenium-remote-driver-3.14.0-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/javax.websocket/javax.websocket-client-api/1.1/e9dd34da7a9b438bddd52c172318e2e70861f15c/javax.websocket-client-api-1.1.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/javax.websocket/javax.websocket-client-api/1.1/ddaaae2cd383f7a213964e3635366065f7cea8dd/javax.websocket-client-api-1.1-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.jsoup/jsoup/1.11.3/36da09a8f68484523fa2aaa100399d612b247d67/jsoup-1.11.3.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.jsoup/jsoup/1.11.3/871302b15d8cee9bfb393c4f1d0386b17646d8d1/jsoup-1.11.3-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.apache.commons/commons-exec/1.3/8dfb9facd0830a27b1b5f29f84593f0aeee7773b/commons-exec-1.3.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.apache.commons/commons-exec/1.3/efd2543e352e55ce5a685eed6db8af028b737905/commons-exec-1.3-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.apache.httpcomponents/httpclient/4.5.5/1603dfd56ebcd583ccdf337b6c3984ac55d89e58/httpclient-4.5.5.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.apache.httpcomponents/httpclient/4.5.5/9fd59f6f22326a4241f9524fdfd66a1f34824054/httpclient-4.5.5-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/commons-codec/commons-codec/1.10/4b95f4897fa13f2cd904aee711aeafc0c5295cd8/commons-codec-1.10.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/commons-codec/commons-codec/1.10/11fb3d88ae7e3b757d70237064210ceb954a5a04/commons-codec-1.10-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/commons-logging/commons-logging/1.2/4bfc12adfe4842bf07b657f0369c4cb522955686/commons-logging-1.2.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/commons-logging/commons-logging/1.2/ecf26c7507d67782a3bbd148d170b31dfad001aa/commons-logging-1.2-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/com.google.guava/guava/25.0-jre/7319c34fa5866a85b6bad445adad69d402323129/guava-25.0-jre.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/com.google.guava/guava/25.0-jre/30ade485699e7782cc2369b0e5d3d8e0bfc317c/guava-25.0-jre-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.apache.httpcomponents/httpcore/4.4.9/a86ce739e5a7175b4b234c290a00a5fdb80957a0/httpcore-4.4.9.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.apache.httpcomponents/httpcore/4.4.9/5808b4637c385d939e901eee3dc5f1121fc73a3b/httpcore-4.4.9-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/com.squareup.okhttp3/okhttp/3.10.0/7ef0f1d95bf4c0b3ba30bbae25e0e562b05cf75e/okhttp-3.10.0.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/com.squareup.okhttp3/okhttp/3.10.0/e99b7b608968f16b07104b93e62cb90701174d0/okhttp-3.10.0-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/com.squareup.okio/okio/1.14.1/3bd22672d0999a1a4d13b542b5dd855a89e69993/okio-1.14.1.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/com.squareup.okio/okio/1.14.1/33a7f94321c4e32273adeb44b6c4ec1a08f6fec4/okio-1.14.1-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/com.google.code.findbugs/jsr305/1.3.9/40719ea6961c0cb6afaeb6a921eaa1f6afd4cfdf/jsr305-1.3.9.jar&quot; path=&quot;5&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.checkerframework/checker-compat-qual/2.0.0/fc89b03860d11d6213d0154a62bcd1c2f69b9efa/checker-compat-qual-2.0.0.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.checkerframework/checker-compat-qual/2.0.0/eb7f7d588d0aef07a2c89178053c2a9e4613947f/checker-compat-qual-2.0.0-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/com.google.errorprone/error_prone_annotations/2.1.3/39b109f2cd352b2d71b52a3b5a1a9850e1dc304b/error_prone_annotations-2.1.3.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/com.google.errorprone/error_prone_annotations/2.1.3/990fe1fd48078a2befecdfcebcad8e6e1bd195a0/error_prone_annotations-2.1.3-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/com.google.j2objc/j2objc-annotations/1.1/ed28ded51a8b1c6b112568def5f4b455e6809019/j2objc-annotations-1.1.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/com.google.j2objc/j2objc-annotations/1.1/1efdf5b737b02f9b72ebdec4f72c37ec411302ff/j2objc-annotations-1.1-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.codehaus.mojo/animal-sniffer-annotations/1.14/775b7e22fb10026eed3f86e8dc556dfafe35f2d5/animal-sniffer-annotations-1.14.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.codehaus.mojo/animal-sniffer-annotations/1.14/886474da3f761d39fcbb723d97ecc5089e731f42/animal-sniffer-annotations-1.14-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.slf4j/jcl-over-slf4j/1.8.0-alpha2/ac221efe39bc6c88f4ca47f8f113e48b00948a24/jcl-over-slf4j-1.8.0-alpha2.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.slf4j/jcl-over-slf4j/1.8.0-alpha2/af288957ad52af97ff6f25c8038247fab4844ec/jcl-over-slf4j-1.8.0-alpha2-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.slf4j/log4j-over-slf4j/1.8.0-alpha2/d198524fbbd715602cc20490e24cabdd3ad01a61/log4j-over-slf4j-1.8.0-alpha2.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.slf4j/log4j-over-slf4j/1.8.0-alpha2/b0aaf752c9d805f80633c4d5e466d4e198fc3240/log4j-over-slf4j-1.8.0-alpha2-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.slf4j/jul-to-slf4j/1.8.0-alpha2/7571eaef486143af3ce6fb0225c31919a679735e/jul-to-slf4j-1.8.0-alpha2.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.slf4j/jul-to-slf4j/1.8.0-alpha2/b6bc8e33c9f22de29f9a94abedbd959d09782197/jul-to-slf4j-1.8.0-alpha2-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.apache.logging.log4j/log4j-slf4j-impl/2.10.0/8e4e0a30736175e31c7f714d95032c1734cfbdea/log4j-slf4j-impl-2.10.0.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.apache.logging.log4j/log4j-slf4j-impl/2.10.0/51e9adc49fcb32d961c66170c9b4b092ee809d9c/log4j-slf4j-impl-2.10.0-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.glassfish.tyrus/tyrus-container-grizzly-client/1.15/b7202fd51965a8afc8086a642d83238c49a9cfab/tyrus-container-grizzly-client-1.15.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.glassfish.tyrus/tyrus-container-grizzly-client/1.15/4443798f67a960c6ae2734531a531de70605bb81/tyrus-container-grizzly-client-1.15-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.apache.logging.log4j/log4j-core/2.10.0/c90b597163cd28ab6d9687edd53db601b6ea75a1/log4j-core-2.10.0.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.apache.logging.log4j/log4j-core/2.10.0/a2041b29bc3e761fba750c0df933cd48f76f5b3a/log4j-core-2.10.0-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.apache.logging.log4j/log4j-api/2.10.0/fec5797a55b786184a537abd39c3fa1449d752d6/log4j-api-2.10.0.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.apache.logging.log4j/log4j-api/2.10.0/fd42afa6acbfb3801accec744106ee28b9342567/log4j-api-2.10.0-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.glassfish.grizzly/grizzly-http-server/2.4.4/f9a62c711eb51f351cc5ba48faf44d5a49faa0a7/grizzly-http-server-2.4.4.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.glassfish.grizzly/grizzly-http-server/2.4.4/289ed9b73dbc3bb09a3a18ce5a9c99e340676d71/grizzly-http-server-2.4.4-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.glassfish.grizzly/grizzly-http/2.4.4/c789d449906458d4174126f6a4fefdd7a6008777/grizzly-http-2.4.4.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.glassfish.grizzly/grizzly-http/2.4.4/cd7921124be251b16a0106c3e273057b05dd05d2/grizzly-http-2.4.4-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.glassfish.grizzly/grizzly-framework/2.4.4/85ff29df39616972a074737948f116ef25addfee/grizzly-framework-2.4.4.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.glassfish.grizzly/grizzly-framework/2.4.4/1eeb6761586a7038132403d8e614518015aa1170/grizzly-framework-2.4.4-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/de.java2html/java2html/5.0/191302c1543594a3ba4ae6514b5cf8e60cfabe7c/java2html-5.0.jar&quot; path=&quot;5&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/commons-beanutils/commons-beanutils/1.9.3/c845703de334ddc6b4b3cd26835458cb1cba1f3d/commons-beanutils-1.9.3.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/commons-beanutils/commons-beanutils/1.9.3/9d70af7c5982bd09c33efa97ac98cee6363ba0f0/commons-beanutils-1.9.3-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/commons-fileupload/commons-fileupload/1.3.3/4ff14d809195b711fd6bcc87e6777f886730ca1/commons-fileupload-1.3.3.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/commons-fileupload/commons-fileupload/1.3.3/34c8608c461e2c832a364ec1a9e70f360f47d9f7/commons-fileupload-1.3.3-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/commons-io/commons-io/2.6/815893df5f31da2ece4040fe0a12fd44b577afaf/commons-io-2.6.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/commons-io/commons-io/2.6/2566800dc841d9d2c5a0d34d807e45d4107dbbdf/commons-io-2.6-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/commons-collections/commons-collections/3.2.2/8ad72fe39fa8c91eaaf12aadb21e0c3661fe26d5/commons-collections-3.2.2.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/commons-collections/commons-collections/3.2.2/78c50ebda5784937ca1615fc0e1d0cb35857d572/commons-collections-3.2.2-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/com.google.gwt/gwt-codeserver/2.8.2/46efb7a794d107d297a3ed3f253de0ee8b49f3bd/gwt-codeserver-2.8.2.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/com.google.gwt/gwt-codeserver/2.8.2/3c373dc1b6af286173ed2d169e56f12de261b1bf/gwt-codeserver-2.8.2-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/com.google.gwt/gwt-dev/2.8.2/7a87e060bbf129386b7ae772459fb9f87297c332/gwt-dev-2.8.2.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/com.google.gwt/gwt-dev/2.8.2/7e64ab7dd03c02df70269b0240300c7209670619/gwt-dev-2.8.2-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/apache-jsp/9.2.14.v20151106/756745c6efff964ae8d183866b962a534f20e30/apache-jsp-9.2.14.v20151106.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/apache-jsp/9.2.14.v20151106/a2c8e33b35dab6f194015979d6d3dbc2e2d0750b/apache-jsp-9.2.14.v20151106-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/net.sourceforge.htmlunit/htmlunit/2.19/230f011fa87e96ff4115cd8c9d1572572d718b3e/htmlunit-2.19.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/net.sourceforge.htmlunit/htmlunit/2.19/d9b07734a252d0155b0784cb4a441c1803155f92/htmlunit-2.19-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.apache.httpcomponents/httpmime/4.5.1/96823b9421ebb9f490dec837d9f96134e864e3a7/httpmime-4.5.1.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.apache.httpcomponents/httpmime/4.5.1/2aab83661676c842d50995fe934550e3e23b3c6/httpmime-4.5.1-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.apache.httpcomponents/httpclient/4.5.1/7e3cecc566df91338c6c67883b89ddd05a17db43/httpclient-4.5.1.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.apache.httpcomponents/httpclient/4.5.1/c0ecd55724129bbd48850314b4ff8a360d670662/httpclient-4.5.1-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/net.sourceforge.cssparser/cssparser/0.9.18/61c015378d27b5e245a5deb7a324c7e716b4706a/cssparser-0.9.18.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/net.sourceforge.cssparser/cssparser/0.9.18/30090d7df3b8ab88ae1761f65b7702b6ace07490/cssparser-0.9.18-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.ow2.asm/asm-util/5.0.3/1512e5571325854b05fb1efce1db75fcced54389/asm-util-5.0.3.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.ow2.asm/asm-util/5.0.3/f0f24f6666c1a15c7e202e91610476bd4ce59368/asm-util-5.0.3-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/colt/colt/1.2.0/abc984f3adc760684d49e0f11ddf167ba516d4f/colt-1.2.0.jar&quot; path=&quot;5&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/ant/ant/1.6.5/7d18faf23df1a5c3a43613952e0e8a182664564b/ant-1.6.5.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/ant/ant/1.6.5/9e0a847494563f35f9b02846a1c1eb4aa2ee5a9a/ant-1.6.5-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/com.ibm.icu/icu4j/50.1.1/c1267563fd08f2885bc1f934ddaca15d19c3d888/icu4j-50.1.1.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/com.ibm.icu/icu4j/50.1.1/145e5c32cb7a6bcf8120a134c48206d870c12394/icu4j-50.1.1-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/tapestry/tapestry/4.0.2/e855a807425d522e958cbce8697f21e9d679b1f7/tapestry-4.0.2.jar&quot; path=&quot;5&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/xalan/xalan/2.7.2/d55d3f02a56ec4c25695fe67e1334ff8c2ecea23/xalan-2.7.2.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/xalan/xalan/2.7.2/fe9c3d37a49238fac9d4d6c4f5bbd8c334da787a/xalan-2.7.2-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.apache.commons/commons-lang3/3.4/5fe28b9518e58819180a43a850fbc0dd24b7c050/commons-lang3-3.4.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.apache.commons/commons-lang3/3.4/b49dafc9cfef24c356827f322e773e7c26725dd2/commons-lang3-3.4-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/net.sourceforge.htmlunit/htmlunit-core-js/2.17/4316d68f449d42f69faf4ee255aa31b03e4f7dd5/htmlunit-core-js-2.17.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/net.sourceforge.htmlunit/htmlunit-core-js/2.17/c54d38efe959a8c30336e6c8c671c05b0f99266a/htmlunit-core-js-2.17-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/xerces/xercesImpl/2.11.0/9bb329db1cfc4e22462c9d6b43a8432f5850e92c/xercesImpl-2.11.0.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/xerces/xercesImpl/2.11.0/af86e59459a503adec5e9b47426dd9fa2ac5f1f6/xercesImpl-2.11.0-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/net.sourceforge.nekohtml/nekohtml/1.9.22/4f54af68ecb345f2453fb6884672ad08414154e3/nekohtml-1.9.22.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/net.sourceforge.nekohtml/nekohtml/1.9.22/88eb858a017e4a4ba762a9968da59ed57fc08898/nekohtml-1.9.22-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.mortbay.jasper/apache-jsp/8.0.9.M3/e46309f2423c0d7321cc2a0928f4e411b82aee9/apache-jsp-8.0.9.M3.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.mortbay.jasper/apache-jsp/8.0.9.M3/1b499c5b6eb92b52dd829d1a62cd46db77204e63/apache-jsp-8.0.9.M3-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty.toolchain/jetty-schemas/3.1.M0/6179bafb6ed2eb029862356df6713078c7874f85/jetty-schemas-3.1.M0.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty.toolchain/jetty-schemas/3.1.M0/e15af2e59c6415e2d722f174aa579fc02c653252/jetty-schemas-3.1.M0-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/xalan/serializer/2.7.2/24247f3bb052ee068971393bdb83e04512bb1c3c/serializer-2.7.2.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/xalan/serializer/2.7.2/fe9c3d37a49238fac9d4d6c4f5bbd8c334da787a/serializer-2.7.2-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.apache.httpcomponents/httpcore/4.4.3/e876a79d561e5c6207b78d347e198c8c4531a5e5/httpcore-4.4.3.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.apache.httpcomponents/httpcore/4.4.3/b972b5dfd2db7d41d76a6fc5445852522a136e2e/httpcore-4.4.3-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/xml-apis/xml-apis/1.4.01/3789d9fada2d3d458c4ba2de349d48780f381ee3/xml-apis-1.4.01.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/xml-apis/xml-apis/1.4.01/5502da0c4c0a7916a604356ef19394ccfa30cd4b/xml-apis-1.4.01-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.mortbay.jasper/apache-el/8.0.9.M3/98daa71c32b7d27dd9463b36de9cebab3f2e5e2e/apache-el-8.0.9.M3.jar&quot; path=&quot;5&quot; sourceAttachmentPath=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/org.mortbay.jasper/apache-el/8.0.9.M3/297a1a9956edd818542170028ad90061ac8ed853/apache-el-8.0.9.M3-sources.jar&quot; sourceRootPath=&quot;&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-9/&quot; path=&quot;5&quot; type=&quot;4&quot;/&gt;&#13;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;C:/Users/mabbas/.gradle/caches/modules-2/files-2.1/com.google.code.gson/gson/2.8.5/f645ed69d595b24d4cf8b3fbb64cc505bede8829/gson-2.8.5.jar&quot; path=&quot;5&quot; type=&quot;2&quot;/&gt;&#13;&#10;"/>
+</listAttribute>
+<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
+<stringAttribute key="org.eclipse.jdt.launching.MAIN_TYPE" value="com.ponysdk.impl.spring.MainSpring"/>
+<listAttribute key="org.eclipse.jdt.launching.MODULEPATH"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROGRAM_ARGUMENTS" value="-build"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="sample"/>
+<stringAttribute key="org.eclipse.jdt.launching.VM_ARGUMENTS" value="-server -Xmx512m -Dlog4j.configurationFile=etc/log4j2.xml"/>
+</launchConfiguration>
diff --git a/sample/build.gradle b/sample/build.gradle
index 942b449e..b485fa7d 100644
--- a/sample/build.gradle
+++ b/sample/build.gradle
@@ -1,43 +1,48 @@
+repositories {
+    mavenCentral()
+    maven {
+        url "https://github.com/PonySDK/Maven/raw/master/ext"
+    }
+    maven {
+        url "http://oss.sonatype.org/content/repositories/snapshots"
+    }
+}
+
 ext {
     java2htmlVersion = '5.0'
     commonsBeanutilsVersion = '1.9.3'
     commonsIoVersion = '2.6'
     commonsFileuploadVersion = '1.3.3'
-    gwtVersion = '2.8.2'
-    jettyVersion = '9.4.14.v20181114'
-    springVersion = '5.1.3.RELEASE'
-    javaxServletVersion = '4.0.1'
-    slf4jVersion = '1.8.0-alpha2'
-    log4jVersion = '2.10.0'
-    jsonVersion = '1.1.4'
 }
 
 dependencies {
-    implementation(
-            project(path: ':ponysdk', configuration: 'default'),
-            'org.springframework:spring-context:' + springVersion,
-            'javax.json:javax.json-api:' + jsonVersion,
-            'javax.servlet:javax.servlet-api:' + javaxServletVersion,
-            'org.slf4j:slf4j-api:' + slf4jVersion,
-            'de.java2html:java2html:' + java2htmlVersion,
-            'org.eclipse.jetty.websocket:websocket-client:' + jettyVersion,
-            'commons-beanutils:commons-beanutils:' + commonsBeanutilsVersion,
-            'commons-io:commons-io:' + commonsIoVersion,
-            'commons-fileupload:commons-fileupload:' + commonsFileuploadVersion,
-            'com.google.code.gson:gson:2.8.6'
+    compile (
+        project(':ponysdk'),
+
+        'de.java2html:java2html:' + java2htmlVersion,
+
+        'org.eclipse.jetty.websocket:websocket-client:' + jettyVersion,
+
+        'commons-beanutils:commons-beanutils:' + commonsBeanutilsVersion,
+
+        'commons-io:commons-io:' + commonsIoVersion,
+        'commons-fileupload:commons-fileupload:' + commonsFileuploadVersion
     )
 
-    runtimeOnly(
-            'com.google.gwt:gwt-codeserver:' + gwtVersion,
-            'de.java2html:java2html:' + java2htmlVersion,
-            'org.springframework:spring-aop:' + springVersion,
-            'org.springframework:spring-expression:' + springVersion,
-            'org.slf4j:jcl-over-slf4j:' + slf4jVersion,
-            'org.slf4j:log4j-over-slf4j:' + slf4jVersion,
-            'org.slf4j:jul-to-slf4j:' + slf4jVersion,
-            'org.apache.logging.log4j:log4j-api:' + log4jVersion,
-            'org.apache.logging.log4j:log4j-core:' + log4jVersion,
-            'org.apache.logging.log4j:log4j-slf4j-impl:' + log4jVersion,
+    runtime (
+        'com.google.gwt:gwt-codeserver:' + gwtVersion,
+
+        'de.java2html:java2html:' + java2htmlVersion,
+
+        'org.springframework:spring-aop:' + springVersion,
+        'org.springframework:spring-expression:' + springVersion,
+
+        'org.slf4j:jcl-over-slf4j:' + slf4jVersion,
+        'org.slf4j:log4j-over-slf4j:' + slf4jVersion,
+        'org.slf4j:jul-to-slf4j:' + slf4jVersion,
+        'org.apache.logging.log4j:log4j-api:' + log4jVersion,
+        'org.apache.logging.log4j:log4j-core:' + log4jVersion,
+        'org.apache.logging.log4j:log4j-slf4j-impl:' + log4jVersion,
     )
 }
 
@@ -46,30 +51,31 @@ task runCodeServer(type: JavaExec) {
     classpath += sourceSets.main.runtimeClasspath
     main = 'com.google.gwt.dev.codeserver.CodeServer'
     args = [
-            '-src', '../ponysdk/src/main/java',
-            '-generateJsInteropExports', '-noincremental',
-            '-style', 'DETAILED',
-            'com.ponysdk.core.PonyTerminalDebug'
+        '-src', '../ponysdk/src/main/java',
+        '-generateJsInteropExports', '-noincremental',
+        '-style', 'DETAILED',
+        'com.ponysdk.core.PonyTerminalDebug'
     ]
     jvmArgs = ['-server', '-Xmx1024m']
 }
 
 task runSampleSpring(type: JavaExec) {
-    classpath = sourceSets.main.runtimeClasspath
-    classpath += files(buildDir.getAbsolutePath() + '/gwt/gwt')
-    classpath += files(buildDir.getAbsolutePath() + '/resources')
-    classpath += files(buildDir.getAbsolutePath() + '/resources/main')
-    main = 'com.ponysdk.impl.spring.MainSpring'
-    jvmArgs = ['-server', '-Xmx512m', '-Dlog4j.configurationFile=etc/log4j2.xml', '-agentlib:jdwp=transport=dt_socket,server=y,address=8888,suspend=n']
+  classpath = sourceSets.main.runtimeClasspath
+  classpath += files(buildDir.getAbsolutePath() + '/gwt/debug/gwt')
+  classpath += files(buildDir.getAbsolutePath() + '/gwt/prod/gwt')
+  classpath += files(buildDir.getAbsolutePath() + '/resources')
+  classpath += files(buildDir.getAbsolutePath() + '/resources/main')
+  main = 'com.ponysdk.impl.spring.MainSpring'
+  jvmArgs = ['-server', '-Xmx512m', '-Dlog4j.configurationFile=etc/log4j2.xml', '-agentlib:jdwp=transport=dt_socket,server=y,address=8888,suspend=n']
 }
 
 task runSampleTrading(type: JavaExec) {
-    classpath = sourceSets.main.runtimeClasspath
-    classpath += files(buildDir.getAbsolutePath() + '/gwt/debug/gwt')
-    classpath += files(buildDir.getAbsolutePath() + '/gwt/prod/gwt')
-    classpath += files(buildDir.getAbsolutePath() + '/resources/etc')
-    main = 'com.ponysdk.impl.java.Main'
-    jvmArgs = ['-server', '-Xmx512m', '-Dponysdk.application.id=trading', '-Dponysdk.application.name="Trading sample"', '-Dponysdk.application.description="Trading Sample"',
-               '-Dponysdk.application.context.name=trading', '-Dponysdk.entry.point.class=com.ponysdk.sample.client.TradingSampleEntryPoint',
-               '-Dponysdk.application.javascripts=script/ponysdk.js;script/widget.js;script/sample.js;script/less.js', '-Dponysdk.application.stylesheets=css/sample.less;css/ponysdk.less']
+  classpath = sourceSets.main.runtimeClasspath
+  classpath += files(buildDir.getAbsolutePath() + '/gwt/debug/gwt')
+  classpath += files(buildDir.getAbsolutePath() + '/gwt/prod/gwt')
+  classpath += files(buildDir.getAbsolutePath() + '/resources/etc')
+  main = 'com.ponysdk.impl.java.Main'
+  jvmArgs = ['-server', '-Xmx512m', '-Dponysdk.application.id=trading', '-Dponysdk.application.name="Trading sample"', '-Dponysdk.application.description="Trading Sample"',
+             '-Dponysdk.application.context.name=trading', '-Dponysdk.entry.point.class=com.ponysdk.sample.client.TradingSampleEntryPoint',
+             '-Dponysdk.application.javascripts=script/ponysdk.js;script/widget.js;script/sample.js;script/less.js', '-Dponysdk.application.stylesheets=css/sample.less;css/ponysdk.less' ]
 }
diff --git a/sample/src/main/java/com/ponysdk/sample/client/UISampleEntryPoint.java b/sample/src/main/java/com/ponysdk/sample/client/UISampleEntryPoint.java
index e20528a6..34f0a67f 100644
--- a/sample/src/main/java/com/ponysdk/sample/client/UISampleEntryPoint.java
+++ b/sample/src/main/java/com/ponysdk/sample/client/UISampleEntryPoint.java
@@ -23,11 +23,70 @@
 
 package com.ponysdk.sample.client;
 
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.OutputStream;
+import java.text.SimpleDateFormat;
+import java.time.Duration;
+import java.util.ArrayList;
+import java.util.Comparator;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Random;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicInteger;
+
+import javax.servlet.http.HttpServletResponse;
+
+import org.apache.commons.fileupload.FileItem;
+import org.apache.commons.fileupload.disk.DiskFileItemFactory;
+import org.apache.commons.fileupload.servlet.ServletFileUpload;
+import org.apache.commons.io.FilenameUtils;
+import org.apache.commons.io.IOUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.ponysdk.core.model.PUnit;
 import com.ponysdk.core.server.application.UIContext;
 import com.ponysdk.core.server.concurrent.PScheduler;
 import com.ponysdk.core.server.stm.Txn;
-import com.ponysdk.core.ui.basic.*;
+import com.ponysdk.core.ui.basic.Element;
+import com.ponysdk.core.ui.basic.IsPWidget;
+import com.ponysdk.core.ui.basic.PAbsolutePanel;
+import com.ponysdk.core.ui.basic.PAnchor;
+import com.ponysdk.core.ui.basic.PButton;
+import com.ponysdk.core.ui.basic.PComplexPanel;
+import com.ponysdk.core.ui.basic.PCookies;
+import com.ponysdk.core.ui.basic.PDateBox;
+import com.ponysdk.core.ui.basic.PDockLayoutPanel;
+import com.ponysdk.core.ui.basic.PFileUpload;
+import com.ponysdk.core.ui.basic.PFlowPanel;
+import com.ponysdk.core.ui.basic.PFrame;
+import com.ponysdk.core.ui.basic.PFunctionalLabel;
+import com.ponysdk.core.ui.basic.PLabel;
+import com.ponysdk.core.ui.basic.PListBox;
+import com.ponysdk.core.ui.basic.PMenuBar;
+import com.ponysdk.core.ui.basic.PRichTextArea;
+import com.ponysdk.core.ui.basic.PScript;
+import com.ponysdk.core.ui.basic.PScrollPanel;
+import com.ponysdk.core.ui.basic.PSimplePanel;
+import com.ponysdk.core.ui.basic.PStackLayoutPanel;
+import com.ponysdk.core.ui.basic.PTabLayoutPanel;
+import com.ponysdk.core.ui.basic.PTextBox;
+import com.ponysdk.core.ui.basic.PTree;
+import com.ponysdk.core.ui.basic.PTreeItem;
+import com.ponysdk.core.ui.basic.PWidget;
+import com.ponysdk.core.ui.basic.PWindow;
 import com.ponysdk.core.ui.basic.event.PClickEvent;
 import com.ponysdk.core.ui.basic.event.PKeyUpEvent;
 import com.ponysdk.core.ui.basic.event.PKeyUpHandler;
@@ -36,6 +95,17 @@ import com.ponysdk.core.ui.datagrid.DataGrid;
 import com.ponysdk.core.ui.datagrid.dynamic.Configuration;
 import com.ponysdk.core.ui.datagrid.dynamic.DynamicDataGrid;
 import com.ponysdk.core.ui.datagrid.impl.PLabelCellRenderer;
+import com.ponysdk.core.ui.datagrid2.ColumnDefinition;
+import com.ponysdk.core.ui.datagrid2.ColumnVisibilitySelectorDataGridView;
+import com.ponysdk.core.ui.datagrid2.ConfigSelectorDataGridView;
+import com.ponysdk.core.ui.datagrid2.DataGridAdapter;
+import com.ponysdk.core.ui.datagrid2.DataGridModel;
+import com.ponysdk.core.ui.datagrid2.DataGridView;
+import com.ponysdk.core.ui.datagrid2.DataGridView.DecodeException;
+import com.ponysdk.core.ui.datagrid2.RowAction;
+import com.ponysdk.core.ui.datagrid2.RowSelectorColumnDataGridView;
+import com.ponysdk.core.ui.datagrid2.SimpleColumnDefinition;
+import com.ponysdk.core.ui.datagrid2.SimpleDataGridView;
 import com.ponysdk.core.ui.eventbus2.EventBus.EventHandler;
 import com.ponysdk.core.ui.formatter.TextFunction;
 import com.ponysdk.core.ui.grid.AbstractGridWidget;
@@ -54,24 +124,11 @@ import com.ponysdk.core.ui.rich.PTwinListBox;
 import com.ponysdk.sample.client.event.UserLoggedOutEvent;
 import com.ponysdk.sample.client.event.UserLoggedOutHandler;
 import com.ponysdk.sample.client.page.addon.LoggerAddOn;
-import com.ponysdk.core.ui.scene.AbstractScene;
-import com.ponysdk.core.ui.scene.Router;
-import com.ponysdk.core.ui.scene.Scene;
-import org.apache.commons.fileupload.FileItem;
-import org.apache.commons.fileupload.disk.DiskFileItemFactory;
-import org.apache.commons.fileupload.servlet.ServletFileUpload;
-import org.apache.commons.io.FilenameUtils;
-import org.apache.commons.io.IOUtils;
-
-import javax.servlet.http.HttpServletResponse;
-import java.io.*;
-import java.text.SimpleDateFormat;
-import java.time.Duration;
-import java.util.*;
-import java.util.concurrent.atomic.AtomicInteger;
 
 public class UISampleEntryPoint implements EntryPoint, UserLoggedOutHandler {
 
+    private static final Logger log = LoggerFactory.getLogger(UISampleEntryPoint.class);
+
     private PLabel mainLabel;
 
     // HighChartsStackedColumnAddOn highChartsStackedColumnAddOn;
@@ -81,32 +138,47 @@ public class UISampleEntryPoint implements EntryPoint, UserLoggedOutHandler {
 
     @Override
     public void start(final UIContext uiContext) {
-
         uiContext.setTerminalDataReceiver((object, instruction) -> System.err.println(object + " : " + instruction));
 
-        //createReconnectingPanel();
-
-        mainLabel = Element.newPLabel("Can be dd by anybody : ₲ῳ₸");
-        mainLabel.setAttributeLinkedToValue("data-title");
-        mainLabel.setTitle("String ASCII");
-
-        //PWindow.getMain().add(mainLabel);
-        //testVisibilityHandler(PWindow.getMain());
-        //testPerf();
-        //testScene();
-        //if (true) return;
-        //createNewGridSystem();
-        //testPAddon();
-        //createWindow().open();
-        //downloadFile();
-        //createNewEvent();
-        //testUIDelegator();
-        //testNewGrid();
-        //createFunctionalLabel();
-        //PWindow.getMain().add(createGrid());
-        //       testPAddon();
-
-        //PScript.execute(PWindow.getMain(), "alert('coucou Main');");
+        createReconnectingPanel();
+
+        //        mainLabel = Element.newPLabel("Can be modified by anybody : ₲ῳ₸");
+        //        mainLabel.setAttributeLinkedToValue("data-title");
+        //        mainLabel.setTitle("String ASCII");
+        //        PWindow.getMain().add(mainLabel);
+
+        //FIXME
+        //        testSimpleDataGridView();
+        //        testSimpleDataGridViewOnly();
+        testNewGrid();
+
+        if (true) return;
+
+        testVisibilityHandler(PWindow.getMain());
+
+        testPerf();
+
+        createNewGridSystem();
+
+        testPAddon();
+
+        createWindow().open();
+
+        downloadFile();
+
+        createNewEvent();
+
+        testUIDelegator();
+
+        testNewGrid();
+
+        createFunctionalLabel();
+
+        PWindow.getMain().add(createGrid());
+
+        testPAddon();
+
+        PScript.execute(PWindow.getMain(), "alert('coucou Main');");
 
         final PWindow window = createWindow();
         window.open();
@@ -222,30 +294,556 @@ public class UISampleEntryPoint implements EntryPoint, UserLoggedOutHandler {
         // uiContext.getHistory().newItem("", false);
     }
 
-    private void testScene() {
-        Scene scene1 = new AbstractScene("scene1", "Scene 1", "scene1") {
+    //-------------------------------------------------------------------------------------------//
+    //--------------------------- Functional / performance tests --------------------------------//
+    //-------------------------------------------------------------------------------------------//
+
+    private static class MyRow {
+
+        private final int id;
+        private Map<String, String> map;
+
+        public MyRow(final int id) {
+            super();
+            this.id = id;
+        }
+
+        public int getId() {
+            return id;
+        }
+
+        public void putValue(final String key, final String value) {
+            if (map == null) map = new HashMap<>();
+            map.put(key, value);
+        }
+
+        public String getValue(final String key) {
+            if (map != null) {
+                final String v = map.get(key);
+                if (v != null) return v;
+            }
+            return key + String.format("%09d", id);
+        }
+
+        @Override
+        public MyRow clone() {
+            final MyRow model = new MyRow(id);
+            if (map == null) return model;
+            model.map = new HashMap<>(map);
+            return model;
+        }
+
+        @Override
+        public String toString() {
+            return "SampleModel [id=" + id + "]";
+        }
+    }
+
+    private MyRow createMyRow(final int index) {
+        return new MyRow(index);
+    }
+
+    private void testSimpleDataGridViewOnly() { //FIXME
+        final DataGridView<Integer, MyRow> simpleGridView = new SimpleDataGridView<>();
+        final ColumnVisibilitySelectorDataGridView<Integer, MyRow> columnVisibilitySelectorDataGridView = new ColumnVisibilitySelectorDataGridView<>(
+            simpleGridView);
+        final RowSelectorColumnDataGridView<Integer, MyRow> rowSelectorColumnDataGridView = new RowSelectorColumnDataGridView<>(
+            columnVisibilitySelectorDataGridView);
+        final ConfigSelectorDataGridView<Integer, MyRow> configSelectorDataGridView = new ConfigSelectorDataGridView<>(
+            rowSelectorColumnDataGridView, "DEFAULT");
+
+        final DataGridView<Integer, MyRow> gridView = configSelectorDataGridView;
+        gridView.setAdapter(new DataGridAdapter<Integer, MyRow>() {
+
+            private final List<ColumnDefinition<MyRow>> columns = new ArrayList<>();
+
+            {
+                for (char c = 'a'; c <= 'z'; c++) {
+                    final String ss = c + "";
+                    columns.add(new SimpleColumnDefinition<>(ss, v -> v.getValue(ss), (v, s) -> {
+                        v.putValue(ss, s);
+                    }));
+                }
+            }
+
             @Override
-            public PWidget buildGUI() {
-                return Element.newPLabel("Scene1 Started");
+            public void onUnselectRow(final IsPWidget rowWidget) {
+                rowWidget.asWidget().removeStyleName("selected-row");
+            }
+
+            @Override
+            public void onSelectRow(final IsPWidget rowWidget) {
+                rowWidget.asWidget().addStyleName("selected-row");
+            }
+
+            @Override
+            public boolean isAscendingSortByInsertionOrder() {
+                return false;
             }
-        };
 
-        Scene scene2 = new AbstractScene("scene2", "Scene 2", "scene2") {
             @Override
-            public PWidget buildGUI() {
-                return Element.newPLabel("Scene2 Started");
+            public Integer getKey(final MyRow v) {
+                return v.id;
             }
+
+            @Override
+            public List<ColumnDefinition<MyRow>> getColumnDefinitions() {
+                return columns;
+            }
+
+            @Override
+            public int compareDefault(final MyRow v1, final MyRow v2) {
+                return 0;
+            }
+
+            @Override
+            public void onCreateHeaderRow(final IsPWidget rowWidget) {
+                rowWidget.asWidget().getParent().asWidget().setStyleProperty("background", "aliceblue");
+            }
+
+            @Override
+            public void onCreateFooterRow(final IsPWidget rowWidget) {
+                rowWidget.asWidget().getParent().asWidget().setStyleProperty("background", "aliceblue");
+            }
+
+            @Override
+            public void onCreateRow(final IsPWidget rowWidget) {
+            }
+
+            @Override
+            public boolean hasHeader() {
+                return true;
+            }
+
+            @Override
+            public boolean hasFooter() {
+                return false;
+            }
+
+            @Override
+            public IsPWidget createLoadingDataWidget() {
+                final PComplexPanel div = Element.newDiv();
+                div.setWidth("100%");
+                div.setHeight("100%");
+                div.setStyleProperty("background-color", "#FFFFFF7F");
+                return div;
+            }
+
+            @Override
+            public void onCreateColumnResizer(final IsPWidget resizer) {
+            }
+        });
+        gridView.setPollingDelayMillis(250L);
+        final DataGridModel<Integer, MyRow> model = gridView.getModel();
+        gridView.asWidget().setHeight("500px");
+        gridView.asWidget().setWidth("1000px");
+        gridView.asWidget().setStyleProperty("resize", "both");
+        gridView.asWidget().setStyleProperty("overflow", "hidden");
+
+        PWindow.getMain().add(gridView);
+        PWindow.getMain().add(configSelectorDataGridView.getDecoratorWidget());
+
+        model.setBound(false);
+        for (int i = 0; i < 1_000; i++) {
+            if (i % 500_000 == 0) log.info("i: {}", i);
+            model.setData(createMyRow(i));
+        }
+        model.setBound(true);
+        gridView.addRowAction(UISampleEntryPoint.class, new RowAction<>() {
+
+            @Override
+            public boolean testRow(final MyRow t, final int index) {
+                return (index & 1) == 0;
+            }
+
+            @Override
+            public void cancel(final IsPWidget row) {
+                row.asWidget().removeStyleName("unpair-row");
+            }
+
+            @Override
+            public void apply(final IsPWidget row) {
+                row.asWidget().addStyleName("unpair-row");
+            }
+        });
+
+        //        final PButton update = Element.newPButton("Update all data");
+        //        PWindow.getMain().add(update);
+        //        update.addClickHandler(event -> updateData(model));
+        //
+        //        final PButton add = Element.newPButton("Create new data");
+        //        PWindow.getMain().add(add);
+        //        add.addClickHandler(event -> addData(model));
+        //
+        //        final PButton modifyVisible = Element.newPButton("Modify visible data (col d)");
+        //        PWindow.getMain().add(modifyVisible);
+        //        modifyVisible.addClickHandler(event -> updateVisibleColumnData(model));
+        //
+        //        final PButton modifyUnvisible = Element.newPButton("Modify unvisible data (col z)");
+        //        PWindow.getMain().add(modifyUnvisible);
+        //        modifyUnvisible.addClickHandler(event -> updateUnvisibleColumnData(model));
+
+        testPerformance(model);
+    }
+
+    void testPerformance(final DataGridModel<Integer, MyRow> model) {
+
+        final Runnable updateData = () -> {
+            for (int i = 0; i < 1_000; i++) {
+                model.setData(createMyRow(i));
+            }
+            System.out.println("\n" + "########## updateData ##########" + "\n");
+        };
+
+        final Runnable updateVisibleColumnData = () -> {
+            for (int i = 0; i < 1_000; i++) {
+                final MyRow v = createMyRow(i);
+                v.putValue("b", "TOTO");
+                model.setData(v);
+            }
+            System.out.println("\n" + "########## updateVisibleColumnData ##########" + "\n");
         };
 
-        PSimplePanel layout = Element.newPSimplePanel();
-        Router router = new Router("sample");
-        router.setLayout(layout);
-        router.push(scene1);
-        router.push(scene2);
+        final Runnable updateUnvisibleColumnData = () -> {
+            for (int i = 0; i < 1_000; i++) {
+                final MyRow v = createMyRow(i);
+                v.putValue("z", "TOTO");
+                model.setData(v);
+            }
+            System.out.println("\n" + "########## updateUnvisibleColumnData ##########" + "\n");
+        };
+
+        final int[] from = { 0 };
+        // An array is created and not an int so we can modify the value inside of the lambda expression
+        final Runnable addData = () -> {
+            for (int i = from[0]; i < from[0] + 1000; i++) {
+                model.setData(createMyRow(i));
+            }
+            System.out.println("\n" + "########## addData ##########" + "\n");
+            from[0] += 1000;
+        };
+
+        final ScheduledExecutorService updateDataExecutor = Executors.newSingleThreadScheduledExecutor();
+        updateDataExecutor.scheduleAtFixedRate(updateData, 0, 5, TimeUnit.SECONDS);
+
+        final ScheduledExecutorService updateVisibleColumnDataExecutor = Executors.newSingleThreadScheduledExecutor();
+        updateVisibleColumnDataExecutor.scheduleAtFixedRate(updateVisibleColumnData, 1, 5, TimeUnit.SECONDS);
 
-        PWindow.getMain().add(layout);
+        final ScheduledExecutorService updateUnvisibleColumnDataExecutor = Executors.newSingleThreadScheduledExecutor();
+        updateUnvisibleColumnDataExecutor.scheduleAtFixedRate(updateUnvisibleColumnData, 2, 5, TimeUnit.SECONDS);
 
-        router.go("scene2");
+        final ScheduledExecutorService addDataExecutor = Executors.newSingleThreadScheduledExecutor();
+        addDataExecutor.scheduleAtFixedRate(addData, 18, 2, TimeUnit.SECONDS);
+
+        final ScheduledExecutorService shutdownExecutor = Executors.newSingleThreadScheduledExecutor();
+        shutdownExecutor.submit(() -> {
+            wait(17);
+            shutdown(updateDataExecutor);
+            shutdown(updateVisibleColumnDataExecutor);
+            shutdown(updateUnvisibleColumnDataExecutor);
+            wait(10);
+            shutdown(addDataExecutor);
+        });
+    }
+
+    private void wait(final int seconds) {
+        try {
+            TimeUnit.SECONDS.sleep(seconds);
+        } catch (final InterruptedException e) {
+            e.printStackTrace();
+        }
+    }
+
+    private void shutdown(final ExecutorService executor) {
+        try {
+            System.out.println("attempt to shutdown executor");
+            executor.shutdown();
+            executor.awaitTermination(5, TimeUnit.SECONDS);
+        } catch (final InterruptedException e) {
+            System.err.println("tasks interrupted");
+        } finally {
+            if (!executor.isTerminated()) {
+                System.err.println("cancel non-finished tasks");
+            }
+            executor.shutdownNow();
+            System.out.println("shutdown finished");
+        }
+    }
+
+    //    private void updateData(final DataGridModel<Integer, MyRow> model) {
+    //        for (int i = 0; i < 1_000; i++) {
+    //            model.setData(createMyRow(i));
+    //        }
+    //    }
+    //
+    //    private void addData(final DataGridModel<Integer, MyRow> model) {
+    //        for (int i = 1_000; i < 2_000; i++) {
+    //            model.setData(createMyRow(i));
+    //        }
+    //    }
+    //
+    //    private void updateVisibleColumnData(final DataGridModel<Integer, MyRow> model) {
+    //        for (int i = 0; i < 1_000; i++) {
+    //            final MyRow v = createMyRow(i);
+    //            v.putValue("b", "TOTO");
+    //            model.setData(v);
+    //        }
+    //    }
+    //
+    //    private void updateUnvisibleColumnData(final DataGridModel<Integer, MyRow> model) {
+    //        for (int i = 0; i < 1_000; i++) {
+    //            final MyRow v = createMyRow(i);
+    //            v.putValue("z", "TOTO");
+    //            model.setData(v);
+    //        }
+    //    }
+
+    //--------------------------------------------------------------------------------------------//
+    //--------------------------------------------------------------------------------------------//
+    //--------------------------------------------------------------------------------------------//
+
+    private static class MyModel {
+
+        private final int id;
+        private Map<String, String> map;
+
+        public MyModel(final int id) {
+            super();
+            this.id = id;
+        }
+
+        public int getId() {
+            return id;
+        }
+
+        public void putValue(final String key, final String value) {
+            if (map == null) map = new HashMap<>();
+            map.put(key, value);
+        }
+
+        public String getValue(final String key) {
+            if (map != null) {
+                final String v = map.get(key);
+                if (v != null) return v;
+            }
+            return key + String.format("%09d", id);
+        }
+
+        @Override
+        public MyModel clone() {
+            final MyModel model = new MyModel(id);
+            if (map == null) return model;
+            model.map = new HashMap<>(map);
+            return model;
+        }
+
+        @Override
+        public String toString() {
+            return "SampleModel [id=" + id + "]";
+        }
+    }
+
+    private static MyModel createMyModel(final int index) {
+        return new MyModel(index);
+    }
+
+    private void testSimpleDataGridView() {
+        final DataGridView<Integer, MyModel> simpleGridView = new SimpleDataGridView<>();
+        final ColumnVisibilitySelectorDataGridView<Integer, MyModel> columnVisibilitySelectorDataGridView = new ColumnVisibilitySelectorDataGridView<>(
+            simpleGridView);
+        final RowSelectorColumnDataGridView<Integer, MyModel> rowSelectorColumnDataGridView = new RowSelectorColumnDataGridView<>(
+            columnVisibilitySelectorDataGridView);
+        //        final ColumnFilterFooterDataGridView<Integer, MyModel> columnFilterFooterDataGridView = new ColumnFilterFooterDataGridView<>(
+        //            rowSelectorColumnDataGridView);
+        final ConfigSelectorDataGridView<Integer, MyModel> configSelectorDataGridView = new ConfigSelectorDataGridView<>(
+            rowSelectorColumnDataGridView, "DEFAULT");
+
+        final DataGridView<Integer, MyModel> gridView = configSelectorDataGridView;
+        gridView.setAdapter(new DataGridAdapter<Integer, UISampleEntryPoint.MyModel>() {
+
+            private final List<ColumnDefinition<MyModel>> columns = new ArrayList<>();
+
+            {
+                for (char c = 'a'; c <= 'z'; c++) {
+                    final String ss = c + "";
+                    columns.add(new SimpleColumnDefinition<>(ss, v -> v.getValue(ss), (v, s) -> {
+                        v.putValue(ss, s);
+                    }));
+                }
+                for (char c = 'A'; c <= 'Z'; c++) {
+                    final String ss = c + "";
+                    columns.add(new SimpleColumnDefinition<>(ss, v -> v.getValue(ss), (v, s) -> {
+                        v.putValue(ss, s);
+                    }));
+                }
+            }
+
+            @Override
+            public void onUnselectRow(final IsPWidget rowWidget) {
+                rowWidget.asWidget().removeStyleName("selected-row");
+            }
+
+            @Override
+            public void onSelectRow(final IsPWidget rowWidget) {
+                rowWidget.asWidget().addStyleName("selected-row");
+            }
+
+            @Override
+            public boolean isAscendingSortByInsertionOrder() {
+                return false;
+            }
+
+            @Override
+            public Integer getKey(final MyModel v) {
+                return v.id;
+            }
+
+            @Override
+            public List<ColumnDefinition<MyModel>> getColumnDefinitions() {
+                return columns;
+            }
+
+            @Override
+            public int compareDefault(final MyModel v1, final MyModel v2) {
+                return 0;
+            }
+
+            @Override
+            public void onCreateHeaderRow(final IsPWidget rowWidget) {
+                rowWidget.asWidget().getParent().asWidget().setStyleProperty("background", "aliceblue");
+            }
+
+            @Override
+            public void onCreateFooterRow(final IsPWidget rowWidget) {
+                rowWidget.asWidget().getParent().asWidget().setStyleProperty("background", "aliceblue");
+            }
+
+            @Override
+            public void onCreateRow(final IsPWidget rowWidget) {
+            }
+
+            @Override
+            public boolean hasHeader() {
+                return true;
+            }
+
+            @Override
+            public boolean hasFooter() {
+                return false;
+            }
+
+            @Override
+            public IsPWidget createLoadingDataWidget() {
+                final PComplexPanel div = Element.newDiv();
+                div.setWidth("100%");
+                div.setHeight("100%");
+                div.setStyleProperty("background-color", "#FFFFFF7F");
+                return div;
+            }
+
+            @Override
+            public void onCreateColumnResizer(final IsPWidget resizer) {
+            }
+        });
+        gridView.setPollingDelayMillis(250L);
+        final DataGridModel<Integer, MyModel> model = gridView.getModel();
+        gridView.asWidget().setHeight("500px");
+        gridView.asWidget().setWidth("1000px");
+        gridView.asWidget().setStyleProperty("resize", "both");
+        gridView.asWidget().setStyleProperty("overflow", "hidden");
+        final PTextBox pollingDelay = Element.newPTextBox();
+        final PButton changePollingDelay = Element.newPButton("Change polling delay (ms)");
+        PWindow.getMain().add(pollingDelay);
+        PWindow.getMain().add(changePollingDelay);
+        changePollingDelay.addClickHandler((e) -> {
+            gridView.setPollingDelayMillis(Integer.parseInt(pollingDelay.getText().trim()));
+        });
+        PWindow.getMain().add(gridView);
+
+        final PButton clearSortsButton = Element.newPButton("Clear Sorts");
+        clearSortsButton.addClickHandler(e -> {
+            gridView.clearSorts();
+        });
+        PWindow.getMain().add(clearSortsButton);
+        PWindow.getMain().add(columnVisibilitySelectorDataGridView.getDecoratorWidget());
+        PWindow.getMain().add(configSelectorDataGridView.getDecoratorWidget());
+
+        final PTextBox addConfigTextBox = Element.newPTextBox();
+        final PButton addConfigButton = Element.newPButton("Add Config");
+        final PLabel addConfigLabel = Element.newPLabel();
+        addConfigLabel.setStyleProperty("color", "red");
+
+        PWindow.getMain().add(addConfigTextBox);
+        PWindow.getMain().add(addConfigButton);
+        addConfigButton.addClickHandler(e -> {
+            final String key = addConfigTextBox.getText();
+            if (!configSelectorDataGridView.addConfigEntry(key, configSelectorDataGridView.getCurrentConfig())) {
+                addConfigLabel.setText(key + " config already exists");
+                return;
+            }
+            addConfigLabel.setText("");
+            addConfigTextBox.setText("");
+            configSelectorDataGridView.selectConfig(key);
+        });
+
+        final PTextBox exportConfigTextBox = Element.newPTextBox();
+        final PButton exportConfigButton = Element.newPButton("Export Configs");
+        exportConfigButton.addClickHandler(e -> {
+            exportConfigTextBox.setText(configSelectorDataGridView.encodeConfigEntries(configSelectorDataGridView.getConfigEntries()));
+        });
+        final PTextBox importConfigTextBox = Element.newPTextBox();
+        final PButton importConfigButton = Element.newPButton("Import Configs");
+        importConfigButton.addClickHandler(e -> {
+            try {
+                configSelectorDataGridView
+                    .setConfigEntries(configSelectorDataGridView.decodeConfigEntries(importConfigTextBox.getText()));
+            } catch (final DecodeException e1) {
+                e1.printStackTrace();
+            }
+        });
+        PWindow.getMain().add(exportConfigTextBox);
+        PWindow.getMain().add(exportConfigButton);
+        PWindow.getMain().add(importConfigTextBox);
+        PWindow.getMain().add(importConfigButton);
+        model.setBound(false);
+        for (int i = 0; i < 1_000; i++) {
+            if (i % 500_000 == 0) log.info("i: {}", i);
+            model.setData(createMyModel(i));
+        }
+        model.setBound(true);
+        gridView.addRowAction(UISampleEntryPoint.class, new RowAction<>() {
+
+            @Override
+            public boolean testRow(final MyModel t, final int index) {
+                return (index & 1) == 0;
+            }
+
+            @Override
+            public void cancel(final IsPWidget row) {
+                row.asWidget().removeStyleName("unpair-row");
+            }
+
+            @Override
+            public void apply(final IsPWidget row) {
+                row.asWidget().addStyleName("unpair-row");
+            }
+        });
+        //        final AtomicInteger ii = new AtomicInteger(1_000);
+        //        final AtomicBoolean reverse = new AtomicBoolean(false);
+        //        PScheduler.scheduleAtFixedRate(() -> {
+        //            if (ii.get() % 10_000 == 0) log.info("ii : {}", ii);
+        //            if (reverse.get()) {
+        //                final int i = ii.getAndDecrement();
+        //                model.removeData(i);
+        //            } else {
+        //                final int i = ii.getAndIncrement();
+        //                model.setData(createMyModel(i));
+        //                if (i == 1_000_000) {
+        //                    log.info("Start reversing");
+        //                    reverse.set(true);
+        //                }
+        //            }
+        //        }, Duration.ofMillis(10L));
     }
 
     private void testVisibilityHandler(final PWindow window) {
@@ -299,9 +897,7 @@ public class UISampleEntryPoint implements EntryPoint, UserLoggedOutHandler {
                 updateLabel(label, String.valueOf(a));
             }
         });
-        button.addClickHandler(event -> {
-            visibilityLabel.setText("Visibility : " + subPanel.isShown());
-        });
+        button.addClickHandler(event -> visibilityLabel.setText("Visibility : " + subPanel.isShown()));
     }
 
     private static void updateLabel(final PLabel label, final String text) {
@@ -357,7 +953,7 @@ public class UISampleEntryPoint implements EntryPoint, UserLoggedOutHandler {
         final BufferedReader reader = new BufferedReader(new InputStreamReader(item.getInputStream(), "UTF-8"));
         final StringBuilder value = new StringBuilder();
         final char[] buffer = new char[1024];
-        for (int length = 0; (length = reader.read(buffer)) > 0; ) {
+        for (int length = 0; (length = reader.read(buffer)) > 0;) {
             value.append(buffer, 0, length);
         }
         System.out.println(value.toString());
@@ -539,7 +1135,7 @@ public class UISampleEntryPoint implements EntryPoint, UserLoggedOutHandler {
 
     private void createNewEvent() {
         final EventHandler<PClickEvent> handler = UIContext.getNewEventBus().subscribe(PClickEvent.class,
-                event -> System.err.println("B " + event));
+            event -> System.err.println("B " + event));
         UIContext.getNewEventBus().post(new PClickEvent(this));
         UIContext.getNewEventBus().post(new PClickEvent(this));
         UIContext.getNewEventBus().unsubscribe(handler);
@@ -658,7 +1254,7 @@ public class UISampleEntryPoint implements EntryPoint, UserLoggedOutHandler {
         windowContainer.add(button1);
         button1.addClickHandler(event -> {
             final PWindow newPWindow = Element.newPWindow(w, "Sub Window 1 " + i.incrementAndGet(),
-                    "resizable=yes,location=0,status=0,scrollbars=0");
+                "resizable=yes,location=0,status=0,scrollbars=0");
             newPWindow.add(Element.newPLabel("Sub window"));
             newPWindow.open();
         });
@@ -667,7 +1263,7 @@ public class UISampleEntryPoint implements EntryPoint, UserLoggedOutHandler {
         windowContainer.add(button2);
         button2.addClickHandler(event -> {
             final PWindow newPWindow = Element.newPWindow("Not Sub Window 1 " + i.incrementAndGet(),
-                    "resizable=yes,location=0,status=0,scrollbars=0");
+                "resizable=yes,location=0,status=0,scrollbars=0");
             newPWindow.add(Element.newPLabel("Sub window"));
             newPWindow.open();
         });
@@ -804,7 +1400,7 @@ public class UISampleEntryPoint implements EntryPoint, UserLoggedOutHandler {
 
             @Override
             public PKeyCodes[] getFilteredKeys() {
-                return new PKeyCodes[]{PKeyCodes.ENTER};
+                return new PKeyCodes[] { PKeyCodes.ENTER };
             }
         });
         return pTextBox;
@@ -870,7 +1466,8 @@ public class UISampleEntryPoint implements EntryPoint, UserLoggedOutHandler {
         }
 
         /**
-         * @param security the security to set
+         * @param security
+         *            the security to set
          */
         public void setSecurity(final String security) {
             this.security = security;
@@ -884,7 +1481,8 @@ public class UISampleEntryPoint implements EntryPoint, UserLoggedOutHandler {
         }
 
         /**
-         * @param classe the classe to set
+         * @param classe
+         *            the classe to set
          */
         public void setClasse(final String classe) {
             this.classe = classe;
@@ -898,7 +1496,8 @@ public class UISampleEntryPoint implements EntryPoint, UserLoggedOutHandler {
         }
 
         /**
-         * @param bid the bid to set
+         * @param bid
+         *            the bid to set
          */
         public void setBid(final Double bid) {
             this.bid = bid;
@@ -912,7 +1511,8 @@ public class UISampleEntryPoint implements EntryPoint, UserLoggedOutHandler {
         }
 
         /**
-         * @param offer the offer to set
+         * @param offer
+         *            the offer to set
          */
         public void setOffer(final Double offer) {
             this.offer = offer;
@@ -926,7 +1526,8 @@ public class UISampleEntryPoint implements EntryPoint, UserLoggedOutHandler {
         }
 
         /**
-         * @param spread the spread to set
+         * @param spread
+         *            the spread to set
          */
         public void setSpread(final Double spread) {
             this.spread = spread;
@@ -940,7 +1541,8 @@ public class UISampleEntryPoint implements EntryPoint, UserLoggedOutHandler {
         }
 
         /**
-         * @param coucou the coucou to set
+         * @param coucou
+         *            the coucou to set
          */
         public void setCoucou(final String coucou) {
             this.coucou = coucou;
@@ -954,7 +1556,8 @@ public class UISampleEntryPoint implements EntryPoint, UserLoggedOutHandler {
         }
 
         /**
-         * @param coucou1 the coucou1 to set
+         * @param coucou1
+         *            the coucou1 to set
          */
         public void setCoucou1(final String coucou1) {
             this.coucou1 = coucou1;
@@ -968,7 +1571,8 @@ public class UISampleEntryPoint implements EntryPoint, UserLoggedOutHandler {
         }
 
         /**
-         * @param coucou2 the coucou2 to set
+         * @param coucou2
+         *            the coucou2 to set
          */
         public void setCoucou2(final String coucou2) {
             this.coucou2 = coucou2;
@@ -982,7 +1586,8 @@ public class UISampleEntryPoint implements EntryPoint, UserLoggedOutHandler {
         }
 
         /**
-         * @param coucou3 the coucou3 to set
+         * @param coucou3
+         *            the coucou3 to set
          */
         public void setCoucou3(final String coucou3) {
             this.coucou3 = coucou3;
@@ -996,7 +1601,8 @@ public class UISampleEntryPoint implements EntryPoint, UserLoggedOutHandler {
         }
 
         /**
-         * @param coucou4 the coucou4 to set
+         * @param coucou4
+         *            the coucou4 to set
          */
         public void setCoucou4(final String coucou4) {
             this.coucou4 = coucou4;
diff --git a/sample/src/main/resources/css/ponysdk.css b/sample/src/main/resources/css/ponysdk.css
index c1ae3513..8177206b 100644
--- a/sample/src/main/resources/css/ponysdk.css
+++ b/sample/src/main/resources/css/ponysdk.css
@@ -2295,3 +2295,15 @@ ul.pony-MultiSelectListBox-ItemsSelectionPanel a:hover {
         opacity: 0.5;
     }
 }
+
+[pony-hovered]{
+    background-color: red !important;
+}
+
+div.selected-row {
+    background-color: yellow !important;
+}
+
+div.unpair-row {
+    background-color: lightgoldenrodyellow;
+}
\ No newline at end of file
diff --git a/sample/src/main/resources/etc/server_application.xml b/sample/src/main/resources/etc/server_application.xml
index 3867a300..8e1a33a6 100644
--- a/sample/src/main/resources/etc/server_application.xml
+++ b/sample/src/main/resources/etc/server_application.xml
@@ -24,6 +24,7 @@ http://www.springframework.org/schema/task http://www.springframework.org/schema
             <list>
                 <value>script/jquery-3.0.0.min.js</value>
                 <value>script/sample.js</value>
+                <value>http://benalman.com/code/projects/jquery-throttle-debounce/jquery.ba-throttle-debounce.js</value>
             </list>
         </property>
         <property name="style">
